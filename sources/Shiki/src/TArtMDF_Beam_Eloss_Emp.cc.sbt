// -*- mode: c++ -*-
// 
// File TArtMDF_Beam_Eloss_EmpMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Sat Jan 13 22:30:36 2018
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_Beam_Eloss_Emp::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_Beam_Eloss_Emp.hh"
//
// Static data variables
//
int    TArtMDF_Beam_Eloss_Emp::gNVariables    = 3;
int    TArtMDF_Beam_Eloss_Emp::gNCoefficients = 32;
double TArtMDF_Beam_Eloss_Emp::gDMean         = 231.047;
// Assignment to mean vector.
double TArtMDF_Beam_Eloss_Emp::gXMean[] = {
  0.0714286, 0.166667, 0.00621037 };

// Assignment to minimum vector.
double TArtMDF_Beam_Eloss_Emp::gXMin[] = {
  27, 9, 167.999 };

// Assignment to maximum vector.
double TArtMDF_Beam_Eloss_Emp::gXMax[] = {
  34, 11, 293.906 };

// Assignment to coefficients vector.
double TArtMDF_Beam_Eloss_Emp::gCoefficient[] = {
  -0.37809,
  63.0011,
  -0.0574336,
  0.0236989,
  -0.0127322,
  0.00948888,
  0.0116217,
  -0.00394793,
  -0.0258319,
  0.0129954,
  0.0148003,
  -0.00170978,
  0.00366041,
  -0.00257743,
  -0.00235532,
  0.00610888,
  -0.00191362,
  -0.000277931,
  -0.00135085,
  -0.0049067,
  0.00121436,
  0.00169724,
  -0.000804967,
  0.000738692,
  0.000201913,
  -0.000345517,
  -2.28684e-05,
  0.00102163,
  -0.00100663,
  -0.000250253,
  -0.000187875,
  5.94821e-05
 };

// Assignment to error coefficients vector.
double TArtMDF_Beam_Eloss_Emp::gCoefficientRMS[] = {
  0.988555,
  2.23507,
  0.863697,
  2.29383,
  3.90735,
  2.1253,
  3.18418,
  3.98369,
  6.23614,
  3.29156,
  4.23355,
  1.11681,
  3.53656,
  4.51849,
  2.25806,
  8.22235,
  3.74134,
  4.33288,
  4.82943,
  9.30898,
  5.38013,
  5.35656,
  4.18659,
  3.40453,
  2.94513,
  5.10194,
  2.59034,
  7.38657,
  7.9335,
  6.20545,
  5.11947,
  4.6551
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_Beam_Eloss_Emp::gPower[i * NVariables + j];
int    TArtMDF_Beam_Eloss_Emp::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  3,  1,
  2,  1,  2,
  3,  1,  1,
  2,  2,  1,
  5,  1,  1,
  1,  3,  1,
  1,  1,  4,
  1,  2,  3,
  6,  1,  1,
  3,  2,  3,
  2,  2,  2,
  3,  2,  2,
  2,  3,  2,
  2,  3,  3,
  2,  1,  3,
  3,  1,  2,
  1,  1,  5,
  1,  2,  4,
  1,  5,  2,
  2,  1,  4,
  1,  3,  3,
  2,  2,  3,
  3,  1,  3,
  3,  1,  4,
  1,  2,  5,
  1,  3,  4
};

// 
// The method   double TArtMDF_Beam_Eloss_Emp::MDF(double *x)
// 
double TArtMDF_Beam_Eloss_Emp::MDF(double *x) {
  double returnValue = TArtMDF_Beam_Eloss_Emp::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_Beam_Eloss_Emp::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_Beam_Eloss_Emp::gCoefficient[i];
    for (j = 0; j < TArtMDF_Beam_Eloss_Emp::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_Beam_Eloss_Emp::gPower[TArtMDF_Beam_Eloss_Emp::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_Beam_Eloss_Emp::gXMax[j] - TArtMDF_Beam_Eloss_Emp::gXMin[j]) * (x[j] - TArtMDF_Beam_Eloss_Emp::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_Beam_Eloss_EmpMDF.cxx

// -*- mode: c++ -*-
// 
// File TArtMDF_Eloss_Eout_CMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Sat Dec 30 23:04:01 2017
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_Eloss_Eout_C::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_Eloss_Eout_C.h"
//
// Static data variables
//
int    TArtMDF_Eloss_Eout_C::gNVariables    = 3;
int    TArtMDF_Eloss_Eout_C::gNCoefficients = 31;
double TArtMDF_Eloss_Eout_C::gDMean         = 202.683;
// Assignment to mean vector.
double TArtMDF_Eloss_Eout_C::gXMean[] = {
  0.0714286, 0.166667, 0.0034264 };

// Assignment to minimum vector.
double TArtMDF_Eloss_Eout_C::gXMin[] = {
  27, 9, 173.225 };

// Assignment to maximum vector.
double TArtMDF_Eloss_Eout_C::gXMax[] = {
  34, 11, 296.32 };

// Assignment to coefficients vector.
double TArtMDF_Eloss_Eout_C::gCoefficient[] = {
  1.22579,
  67.1541,
  -6.46805,
  2.67488,
  -1.66887,
  1.34839,
  -0.544861,
  -0.878442,
  1.18566,
  0.996066,
  -0.179501,
  0.601216,
  -0.47873,
  0.239228,
  -0.327088,
  -0.207484,
  0.198178,
  -0.0158532,
  -0.224758,
  0.0829563,
  0.232843,
  -0.110419,
  0.126219,
  0.0539737,
  0.153669,
  -0.0657898,
  -0.0530077,
  -0.0678061,
  -0.0977098,
  -0.0320288,
  0.0162933
 };

// Assignment to error coefficients vector.
double TArtMDF_Eloss_Eout_C::gCoefficientRMS[] = {
  0.820747,
  2.06566,
  0.808993,
  2.14893,
  3.56151,
  1.96954,
  3.67802,
  3.17577,
  2.96856,
  2.93491,
  1.03037,
  3.18121,
  4.12935,
  4.99215,
  3.46073,
  3.71368,
  3.05558,
  4.00514,
  4.4641,
  2.71718,
  4.9483,
  4.57608,
  6.73226,
  2.08744,
  6.83263,
  4.53839,
  2.35784,
  7.22304,
  5.85453,
  5.56726,
  4.16539
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_Eloss_Eout_C::gPower[i * NVariables + j];
int    TArtMDF_Eloss_Eout_C::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  1,  2,
  3,  1,  1,
  2,  2,  1,
  2,  3,  1,
  1,  3,  1,
  1,  1,  4,
  1,  2,  3,
  2,  1,  3,
  2,  2,  2,
  1,  1,  5,
  1,  2,  4,
  3,  2,  2,
  2,  3,  2,
  1,  5,  2,
  3,  1,  2,
  2,  1,  4,
  2,  2,  3,
  6,  1,  1,
  2,  3,  3,
  1,  2,  5,
  1,  3,  3,
  3,  1,  3,
  4,  1,  3,
  3,  1,  4,
  1,  3,  4
};

// 
// The method   double TArtMDF_Eloss_Eout_C::MDF(double *x)
// 
double TArtMDF_Eloss_Eout_C::MDF(double *x) {
  double returnValue = TArtMDF_Eloss_Eout_C::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_Eloss_Eout_C::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_Eloss_Eout_C::gCoefficient[i];
    for (j = 0; j < TArtMDF_Eloss_Eout_C::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_Eloss_Eout_C::gPower[TArtMDF_Eloss_Eout_C::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_Eloss_Eout_C::gXMax[j] - TArtMDF_Eloss_Eout_C::gXMin[j]) * (x[j] - TArtMDF_Eloss_Eout_C::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_Eloss_Eout_CMDF.cxx

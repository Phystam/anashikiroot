// -*- mode: c++ -*-
// 
// File TArtMDF_Eloss_Eout_EmpMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Sun Dec 31 08:19:14 2017
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_Eloss_Eout_Emp::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_Eloss_Eout_Emp.h"
//
// Static data variables
//
int    TArtMDF_Eloss_Eout_Emp::gNVariables    = 3;
int    TArtMDF_Eloss_Eout_Emp::gNCoefficients = 31;
double TArtMDF_Eloss_Eout_Emp::gDMean         = 231.047;
// Assignment to mean vector.
double TArtMDF_Eloss_Eout_Emp::gXMean[] = {
  0.0714286, 0.166667, 0.00511609 };

// Assignment to minimum vector.
double TArtMDF_Eloss_Eout_Emp::gXMin[] = {
  27, 9, 170.01 };

// Assignment to maximum vector.
double TArtMDF_Eloss_Eout_Emp::gXMax[] = {
  34, 11, 294.83 };

// Assignment to coefficients vector.
double TArtMDF_Eloss_Eout_Emp::gCoefficient[] = {
  -0.246303,
  62.6778,
  -0.327601,
  0.138744,
  -0.0705777,
  0.0539785,
  -0.0222072,
  0.0746996,
  0.0589467,
  -0.14077,
  0.0202824,
  0.0779501,
  -0.00993132,
  -0.0153882,
  0.000125318,
  -0.00877015,
  -0.00801385,
  -0.00978668,
  0.00782735,
  -0.00530293,
  0.0120179,
  0.00116538,
  0.00403852,
  -0.0020791,
  0.00383519,
  -0.00360291,
  -0.00106632,
  -0.000869439,
  -0.000449558,
  -0.000231064,
  -9.9886e-05
 };

// Assignment to error coefficients vector.
double TArtMDF_Eloss_Eout_Emp::gCoefficientRMS[] = {
  0.983893,
  2.22455,
  0.841109,
  2.23074,
  3.86728,
  2.11436,
  3.96014,
  3.28807,
  2.2619,
  6.12748,
  3.48586,
  4.06317,
  1.11612,
  4.46758,
  4.38513,
  2.30575,
  4.77411,
  3.71664,
  5.3236,
  4.10368,
  5.38213,
  2.92941,
  3.3464,
  5.02555,
  7.26206,
  7.8123,
  4.29533,
  5.01946,
  6.11107,
  4.57738,
  2.56198
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_Eloss_Eout_Emp::gPower[i * NVariables + j];
int    TArtMDF_Eloss_Eout_Emp::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  1,  2,
  2,  2,  1,
  2,  3,  1,
  3,  1,  1,
  1,  1,  4,
  5,  1,  1,
  1,  3,  1,
  1,  2,  3,
  2,  1,  3,
  4,  1,  1,
  2,  3,  2,
  2,  2,  2,
  3,  1,  2,
  1,  1,  5,
  3,  2,  3,
  1,  3,  2,
  1,  2,  4,
  2,  1,  4,
  2,  2,  3,
  3,  1,  3,
  3,  2,  2,
  1,  2,  5,
  3,  1,  4,
  1,  3,  4,
  1,  3,  3
};

// 
// The method   double TArtMDF_Eloss_Eout_Emp::MDF(double *x)
// 
double TArtMDF_Eloss_Eout_Emp::MDF(double *x) {
  double returnValue = TArtMDF_Eloss_Eout_Emp::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_Eloss_Eout_Emp::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_Eloss_Eout_Emp::gCoefficient[i];
    for (j = 0; j < TArtMDF_Eloss_Eout_Emp::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_Eloss_Eout_Emp::gPower[TArtMDF_Eloss_Eout_Emp::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_Eloss_Eout_Emp::gXMax[j] - TArtMDF_Eloss_Eout_Emp::gXMin[j]) * (x[j] - TArtMDF_Eloss_Eout_Emp::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_Eloss_Eout_EmpMDF.cxx

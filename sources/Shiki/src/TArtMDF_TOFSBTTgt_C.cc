// -*- mode: c++ -*-
// 
// File TArtMDF_TOFSBTTgt_CMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Fri Dec  8 18:36:45 2017
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_TOFSBTTgt_C::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_TOFSBTTgt_C.hh"
//
// Static data variables
//
int    TArtMDF_TOFSBTTgt_C::gNVariables    = 3;
int    TArtMDF_TOFSBTTgt_C::gNCoefficients = 10;
double TArtMDF_TOFSBTTgt_C::gDMean         = 15.6337;
// Assignment to mean vector.
double TArtMDF_TOFSBTTgt_C::gXMean[] = {
  0.0714286, 0.166667, -0.164547 };

// Assignment to minimum vector.
double TArtMDF_TOFSBTTgt_C::gXMin[] = {
  27, 9, 175.088 };

// Assignment to maximum vector.
double TArtMDF_TOFSBTTgt_C::gXMax[] = {
  34, 11, 213.407 };

// Assignment to coefficients vector.
double TArtMDF_TOFSBTTgt_C::gCoefficient[] = {
  0.258924,
  1.6071,
  0.0147371,
  -0.00811158,
  0.0109941,
  0.00909245,
  -0.00512399,
  -0.00235643,
  0.00175556,
  0.000295899
 };

// Assignment to error coefficients vector.
double TArtMDF_TOFSBTTgt_C::gCoefficientRMS[] = {
  0.147199,
  0.126741,
  0.117303,
  0.17722,
  0.229988,
  0.195595,
  0.298563,
  0.48523,
  0.521419,
  0.170079
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_TOFSBTTgt_C::gPower[i * NVariables + j];
int    TArtMDF_TOFSBTTgt_C::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  1,  2,
  2,  2,  1,
  3,  1,  1,
  1,  3,  1
};

// 
// The method   double TArtMDF_TOFSBTTgt_C::MDF(double *x)
// 
double TArtMDF_TOFSBTTgt_C::MDF(double *x) {
  double returnValue = TArtMDF_TOFSBTTgt_C::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_TOFSBTTgt_C::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_TOFSBTTgt_C::gCoefficient[i];
    for (j = 0; j < TArtMDF_TOFSBTTgt_C::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_TOFSBTTgt_C::gPower[TArtMDF_TOFSBTTgt_C::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_TOFSBTTgt_C::gXMax[j] - TArtMDF_TOFSBTTgt_C::gXMin[j]) * (x[j] - TArtMDF_TOFSBTTgt_C::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_TOFSBTTgt_C.cxx

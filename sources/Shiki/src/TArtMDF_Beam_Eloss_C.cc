// -*- mode: c++ -*-
// 
// File TArtMDF_Beam_Eloss_CMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Fri Dec  8 21:11:50 2017
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_Beam_Eloss_C::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_Beam_Eloss_C.hh"
//
// Static data variables
//
int    TArtMDF_Beam_Eloss_C::gNVariables    = 3;
int    TArtMDF_Beam_Eloss_C::gNCoefficients = 31;
double TArtMDF_Beam_Eloss_C::gDMean         = 254.329;
// Assignment to mean vector.
double TArtMDF_Beam_Eloss_C::gXMean[] = {
  0.0714286, 0.166667, 0.00240821 };

// Assignment to minimum vector.
double TArtMDF_Beam_Eloss_C::gXMin[] = {
  27, 9, 194.648 };

// Assignment to maximum vector.
double TArtMDF_Beam_Eloss_C::gXMax[] = {
  34, 11, 347.017 };

// Assignment to coefficients vector.
double TArtMDF_Beam_Eloss_C::gCoefficient[] = {
  0.604277,
  78.9229,
  -3.26949,
  1.38337,
  -0.80578,
  0.591595,
  -0.242187,
  0.757577,
  0.592521,
  -1.41628,
  0.26833,
  -0.197289,
  0.786582,
  -0.110743,
  0.0306339,
  -0.116574,
  -0.0919306,
  -0.0903233,
  0.0861302,
  -0.0842396,
  0.0661135,
  0.020535,
  0.122863,
  -0.0396499,
  0.0512382,
  -0.0436007,
  -0.0190052,
  -0.00658879,
  -0.00784095,
  -0.00561152,
  0.00218143
 };

// Assignment to error coefficients vector.
double TArtMDF_Beam_Eloss_C::gCoefficientRMS[] = {
  0.922609,
  2.03113,
  0.790625,
  2.09317,
  3.52372,
  1.95077,
  3.66168,
  3.08385,
  2.12532,
  5.72352,
  3.08787,
  4.07825,
  3.79507,
  1.04918,
  3.99973,
  4.57958,
  2.16538,
  4.39885,
  3.70413,
  3.63647,
  2.98939,
  2.86561,
  4.89733,
  4.51825,
  6.61473,
  7.10764,
  4.44958,
  2.33908,
  3.96643,
  5.10547,
  4.40121
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_Beam_Eloss_C::gPower[i * NVariables + j];
int    TArtMDF_Beam_Eloss_C::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  1,  2,
  2,  2,  1,
  2,  3,  1,
  3,  1,  1,
  1,  1,  4,
  1,  2,  3,
  5,  1,  1,
  1,  3,  1,
  2,  1,  3,
  2,  2,  2,
  4,  1,  1,
  2,  3,  2,
  3,  1,  2,
  1,  1,  5,
  1,  2,  4,
  1,  5,  2,
  3,  2,  3,
  2,  1,  4,
  2,  2,  3,
  3,  1,  3,
  1,  2,  5,
  1,  3,  3,
  3,  2,  2,
  2,  2,  4,
  1,  3,  4
};

// 
// The method   double TArtMDF_Beam_Eloss_C::MDF(double *x)
// 
double TArtMDF_Beam_Eloss_C::MDF(double *x) {
  double returnValue = TArtMDF_Beam_Eloss_C::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_Beam_Eloss_C::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_Beam_Eloss_C::gCoefficient[i];
    for (j = 0; j < TArtMDF_Beam_Eloss_C::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_Beam_Eloss_C::gPower[TArtMDF_Beam_Eloss_C::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_Beam_Eloss_C::gXMax[j] - TArtMDF_Beam_Eloss_C::gXMin[j]) * (x[j] - TArtMDF_Beam_Eloss_C::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_Beam_Eloss_C.cxx

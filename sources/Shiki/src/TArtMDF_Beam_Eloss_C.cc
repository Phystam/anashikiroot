// -*- mode: c++ -*-
// 
// File TArtMDF_Beam_Eloss_CMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Fri Jan  5 18:57:46 2018
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_Beam_Eloss_C::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_Beam_Eloss_C.hh"
//
// Static data variables
//
int    TArtMDF_Beam_Eloss_C::gNVariables    = 3;
int    TArtMDF_Beam_Eloss_C::gNCoefficients = 30;
double TArtMDF_Beam_Eloss_C::gDMean         = 217.503;
// Assignment to mean vector.
double TArtMDF_Beam_Eloss_C::gXMean[] = {
  0.0714286, 0.166667, 0.00511609 };

// Assignment to minimum vector.
double TArtMDF_Beam_Eloss_C::gXMin[] = {
  27, 9, 170.01 };

// Assignment to maximum vector.
double TArtMDF_Beam_Eloss_C::gXMax[] = {
  34, 11, 294.83 };

// Assignment to coefficients vector.
double TArtMDF_Beam_Eloss_C::gCoefficient[] = {
  0.300907,
  64.9484,
  -2.9879,
  1.23446,
  -0.712124,
  0.552355,
  -0.227827,
  0.523701,
  0.472799,
  -0.396144,
  -0.0660977,
  0.227334,
  -0.167709,
  0.0834078,
  -0.114801,
  -0.0127883,
  0.0861032,
  -0.0680295,
  0.0558009,
  -0.0805885,
  0.0210714,
  0.00934899,
  -0.0297668,
  0.0420695,
  0.0226454,
  -0.01586,
  -0.00927067,
  -0.0295767,
  -0.00586947,
  5.83874e-05
 };

// Assignment to error coefficients vector.
double TArtMDF_Beam_Eloss_C::gCoefficientRMS[] = {
  0.848068,
  2.15752,
  0.82307,
  2.02071,
  3.75131,
  2.05371,
  3.83909,
  3.03505,
  2.63715,
  3.26807,
  1.06632,
  3.37845,
  4.33266,
  4.26644,
  3.60838,
  4.16656,
  5.16555,
  3.97911,
  3.24872,
  4.62658,
  2.84132,
  2.90052,
  4.86917,
  7.03198,
  5.2446,
  4.86459,
  2.48583,
  7.56792,
  5.92203,
  4.43708
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_Beam_Eloss_C::gPower[i * NVariables + j];
int    TArtMDF_Beam_Eloss_C::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  1,  2,
  2,  2,  1,
  2,  3,  1,
  3,  1,  1,
  1,  3,  1,
  1,  1,  4,
  1,  2,  3,
  2,  1,  3,
  2,  2,  2,
  3,  2,  2,
  3,  1,  2,
  1,  1,  5,
  1,  2,  4,
  2,  3,  2,
  1,  5,  2,
  3,  2,  1,
  2,  1,  4,
  2,  2,  3,
  3,  2,  3,
  1,  2,  5,
  1,  3,  3,
  3,  1,  3,
  3,  1,  4,
  1,  3,  4
};

// 
// The method   double TArtMDF_Beam_Eloss_C::MDF(double *x)
// 
double TArtMDF_Beam_Eloss_C::MDF(double *x) {
  double returnValue = TArtMDF_Beam_Eloss_C::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_Beam_Eloss_C::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_Beam_Eloss_C::gCoefficient[i];
    for (j = 0; j < TArtMDF_Beam_Eloss_C::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_Beam_Eloss_C::gPower[TArtMDF_Beam_Eloss_C::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_Beam_Eloss_C::gXMax[j] - TArtMDF_Beam_Eloss_C::gXMin[j]) * (x[j] - TArtMDF_Beam_Eloss_C::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_Beam_Eloss_CMDF.cxx

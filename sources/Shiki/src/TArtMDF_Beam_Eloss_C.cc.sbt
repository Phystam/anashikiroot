// -*- mode: c++ -*-
// 
// File TArtMDF_Beam_Eloss_CMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Sat Jan 13 22:36:33 2018
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_Beam_Eloss_C::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_Beam_Eloss_C.hh"
//
// Static data variables
//
int    TArtMDF_Beam_Eloss_C::gNVariables    = 3;
int    TArtMDF_Beam_Eloss_C::gNCoefficients = 30;
double TArtMDF_Beam_Eloss_C::gDMean         = 202.683;
// Assignment to mean vector.
double TArtMDF_Beam_Eloss_C::gXMean[] = {
  0.0714286, 0.166667, 0.0186074 };

// Assignment to minimum vector.
double TArtMDF_Beam_Eloss_C::gXMin[] = {
  27, 9, 147.583 };

// Assignment to maximum vector.
double TArtMDF_Beam_Eloss_C::gXMax[] = {
  34, 11, 284.869 };

// Assignment to coefficients vector.
double TArtMDF_Beam_Eloss_C::gCoefficient[] = {
  -0.630989,
  71.6255,
  -2.90131,
  1.19893,
  -0.988089,
  0.651195,
  -0.273417,
  0.508318,
  0.389013,
  0.45926,
  -0.384441,
  -0.0647384,
  -0.230689,
  0.116506,
  -0.136274,
  -0.137854,
  0.0973427,
  -0.0394873,
  0.0257291,
  0.105752,
  -0.0477637,
  -0.0701423,
  0.00809148,
  0.0711165,
  0.037165,
  -0.0419797,
  -0.0158733,
  -0.0496618,
  -0.0183835,
  0.000797333
 };

// Assignment to error coefficients vector.
double TArtMDF_Beam_Eloss_C::gCoefficientRMS[] = {
  0.815856,
  2.15776,
  0.789923,
  1.94894,
  4.02769,
  2.09489,
  3.91299,
  2.91816,
  3.72928,
  2.54837,
  3.13482,
  1.02959,
  4.55556,
  4.5799,
  4.87661,
  4.74951,
  3.85687,
  4.3014,
  3.08018,
  3.95017,
  5.54201,
  4.77914,
  2.79834,
  7.61179,
  5.62194,
  5.78454,
  2.74811,
  8.0854,
  6.19241,
  5.54585
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_Beam_Eloss_C::gPower[i * NVariables + j];
int    TArtMDF_Beam_Eloss_C::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  1,  2,
  2,  2,  1,
  1,  1,  4,
  2,  3,  1,
  3,  1,  1,
  1,  3,  1,
  1,  2,  3,
  2,  1,  3,
  2,  2,  2,
  1,  1,  5,
  1,  2,  4,
  3,  2,  2,
  1,  3,  2,
  3,  1,  2,
  2,  1,  4,
  2,  3,  2,
  3,  2,  1,
  2,  2,  3,
  3,  2,  3,
  1,  2,  5,
  1,  3,  3,
  3,  1,  3,
  2,  2,  4,
  1,  3,  4
};

// 
// The method   double TArtMDF_Beam_Eloss_C::MDF(double *x)
// 
double TArtMDF_Beam_Eloss_C::MDF(double *x) {
  double returnValue = TArtMDF_Beam_Eloss_C::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_Beam_Eloss_C::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_Beam_Eloss_C::gCoefficient[i];
    for (j = 0; j < TArtMDF_Beam_Eloss_C::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_Beam_Eloss_C::gPower[TArtMDF_Beam_Eloss_C::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_Beam_Eloss_C::gXMax[j] - TArtMDF_Beam_Eloss_C::gXMin[j]) * (x[j] - TArtMDF_Beam_Eloss_C::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_Beam_Eloss_CMDF.cxx

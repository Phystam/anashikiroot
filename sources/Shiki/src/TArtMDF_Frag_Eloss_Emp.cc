// -*- mode: c++ -*-
// 
// File TArtMDF_Frag_Eloss_EmpMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Mon Dec 11 20:55:57 2017
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_Frag_Eloss_Emp::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_Frag_Eloss_Emp.hh"
//
// Static data variables
//
int    TArtMDF_Frag_Eloss_Emp::gNVariables    = 3;
int    TArtMDF_Frag_Eloss_Emp::gNCoefficients = 32;
double TArtMDF_Frag_Eloss_Emp::gDMean         = 266.996;
// Assignment to mean vector.
double TArtMDF_Frag_Eloss_Emp::gXMean[] = {
  0.0714286, 0.166667, 0.00532037 };

// Assignment to minimum vector.
double TArtMDF_Frag_Eloss_Emp::gXMin[] = {
  27, 9, 188.443 };

// Assignment to maximum vector.
double TArtMDF_Frag_Eloss_Emp::gXMax[] = {
  34, 11, 344.176 };

// Assignment to coefficients vector.
double TArtMDF_Frag_Eloss_Emp::gCoefficient[] = {
  -0.426474,
  77.8223,
  0.0525782,
  -0.0222624,
  0.0126655,
  -0.00892578,
  0.00367809,
  -0.0119042,
  -0.00945778,
  0.022772,
  -0.00400362,
  -0.0127498,
  0.0015222,
  0.00265462,
  -5.89854e-05,
  0.00214604,
  0.00145359,
  0.00166351,
  -0.0037612,
  0.0011782,
  -0.000712038,
  -0.00213445,
  0.00201879,
  -0.000275656,
  0.00041653,
  0.00027239,
  -0.000161807,
  -0.000774986,
  0.000774755,
  7.96208e-05,
  -0.000193848,
  0.000112702
 };

// Assignment to error coefficients vector.
double TArtMDF_Frag_Eloss_Emp::gCoefficientRMS[] = {
  0.947791,
  2.26846,
  0.808187,
  2.14296,
  3.70427,
  2.03309,
  3.83812,
  3.16177,
  2.17361,
  5.93568,
  3.33614,
  3.94993,
  1.07291,
  4.28048,
  4.20051,
  3.96122,
  2.21546,
  3.69687,
  10.084,
  3.92038,
  3.19935,
  5.15194,
  6.88502,
  2.82926,
  4.80696,
  4.79579,
  3.20202,
  6.95346,
  7.48331,
  2.45437,
  5.84511,
  4.37589
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_Frag_Eloss_Emp::gPower[i * NVariables + j];
int    TArtMDF_Frag_Eloss_Emp::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  1,  2,
  2,  2,  1,
  2,  3,  1,
  3,  1,  1,
  1,  1,  4,
  5,  1,  1,
  1,  3,  1,
  1,  2,  3,
  2,  1,  3,
  2,  2,  2,
  4,  1,  1,
  2,  3,  2,
  3,  1,  2,
  1,  1,  5,
  1,  2,  4,
  3,  2,  3,
  5,  1,  2,
  1,  3,  2,
  2,  1,  4,
  1,  2,  5,
  4,  1,  2,
  2,  2,  3,
  3,  1,  3,
  1,  3,  3,
  3,  1,  4,
  1,  3,  4
};

// 
// The method   double TArtMDF_Frag_Eloss_Emp::MDF(double *x)
// 
double TArtMDF_Frag_Eloss_Emp::MDF(double *x) {
  double returnValue = TArtMDF_Frag_Eloss_Emp::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_Frag_Eloss_Emp::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_Frag_Eloss_Emp::gCoefficient[i];
    for (j = 0; j < TArtMDF_Frag_Eloss_Emp::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_Frag_Eloss_Emp::gPower[TArtMDF_Frag_Eloss_Emp::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_Frag_Eloss_Emp::gXMax[j] - TArtMDF_Frag_Eloss_Emp::gXMin[j]) * (x[j] - TArtMDF_Frag_Eloss_Emp::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_Frag_Eloss_EmpMDF.cxx

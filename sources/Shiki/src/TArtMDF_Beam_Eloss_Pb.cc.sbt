// -*- mode: c++ -*-
// 
// File TArtMDF_Beam_Eloss_PbMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Fri Jan 12 16:25:10 2018
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_Beam_Eloss_Pb::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_Beam_Eloss_Pb.hh"
//
// Static data variables
//
int    TArtMDF_Beam_Eloss_Pb::gNVariables    = 3;
int    TArtMDF_Beam_Eloss_Pb::gNCoefficients = 32;
double TArtMDF_Beam_Eloss_Pb::gDMean         = 210.647;
// Assignment to mean vector.
double TArtMDF_Beam_Eloss_Pb::gXMean[] = {
  0.0714286, 0.166667, 0.0138421 };

// Assignment to minimum vector.
double TArtMDF_Beam_Eloss_Pb::gXMin[] = {
  27, 9, 153.51 };

// Assignment to maximum vector.
double TArtMDF_Beam_Eloss_Pb::gXMax[] = {
  34, 11, 287.246 };

// Assignment to coefficients vector.
double TArtMDF_Beam_Eloss_Pb::gCoefficient[] = {
  -0.440658,
  68.7271,
  -2.08772,
  0.879561,
  -0.560058,
  0.394932,
  -0.159145,
  0.381806,
  -0.923671,
  0.482759,
  0.192804,
  0.519179,
  -0.0703355,
  -0.129776,
  -0.00868617,
  -0.0629927,
  -0.0771106,
  -0.0601584,
  0.0452595,
  -0.00678229,
  -0.062785,
  0.111659,
  0.054342,
  0.0152436,
  -0.0243693,
  0.033349,
  -0.0288438,
  -0.0215543,
  -0.00188588,
  -0.00780184,
  0.0121918,
  0.00483147
 };

// Assignment to error coefficients vector.
double TArtMDF_Beam_Eloss_Pb::gCoefficientRMS[] = {
  0.941549,
  2.17575,
  0.861512,
  2.13048,
  4.00123,
  2.10712,
  3.97854,
  2.15045,
  5.91333,
  3.13273,
  3.66866,
  3.97996,
  1.06741,
  5.78124,
  9.60047,
  1.81238,
  4.95005,
  4.59733,
  3.71039,
  3.29369,
  3.79022,
  5.49288,
  3.97675,
  3.11509,
  5.43183,
  7.53911,
  8.03716,
  7.36817,
  2.69912,
  5.47587,
  11.1754,
  6.38384
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_Beam_Eloss_Pb::gPower[i * NVariables + j];
int    TArtMDF_Beam_Eloss_Pb::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  1,  2,
  2,  3,  1,
  3,  1,  1,
  2,  2,  1,
  1,  1,  4,
  5,  1,  1,
  1,  3,  1,
  1,  2,  3,
  2,  1,  3,
  6,  1,  1,
  2,  2,  2,
  1,  1,  5,
  1,  2,  4,
  4,  1,  2,
  2,  3,  2,
  3,  2,  3,
  3,  1,  2,
  1,  5,  2,
  2,  1,  4,
  2,  2,  3,
  3,  1,  3,
  1,  2,  5,
  1,  3,  3,
  1,  3,  4,
  2,  1,  5,
  2,  2,  4
};

// 
// The method   double TArtMDF_Beam_Eloss_Pb::MDF(double *x)
// 
double TArtMDF_Beam_Eloss_Pb::MDF(double *x) {
  double returnValue = TArtMDF_Beam_Eloss_Pb::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_Beam_Eloss_Pb::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_Beam_Eloss_Pb::gCoefficient[i];
    for (j = 0; j < TArtMDF_Beam_Eloss_Pb::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_Beam_Eloss_Pb::gPower[TArtMDF_Beam_Eloss_Pb::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_Beam_Eloss_Pb::gXMax[j] - TArtMDF_Beam_Eloss_Pb::gXMin[j]) * (x[j] - TArtMDF_Beam_Eloss_Pb::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_Beam_Eloss_PbMDF.cxx

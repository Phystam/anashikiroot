// -*- mode: c++ -*-
// 
// File TArtMDF_TOFSBTTgt_PbMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Mon Dec 11 17:39:06 2017
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_TOFSBTTgt_Pb::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_TOFSBTTgt_Pb.hh"
//
// Static data variables
//
int    TArtMDF_TOFSBTTgt_Pb::gNVariables    = 3;
int    TArtMDF_TOFSBTTgt_Pb::gNCoefficients = 31;
double TArtMDF_TOFSBTTgt_Pb::gDMean         = 15.6144;
// Assignment to mean vector.
double TArtMDF_TOFSBTTgt_Pb::gXMean[] = {
  0.0714286, 0.166667, -0.164547 };

// Assignment to minimum vector.
double TArtMDF_TOFSBTTgt_Pb::gXMin[] = {
  27, 9, 175.088 };

// Assignment to maximum vector.
double TArtMDF_TOFSBTTgt_Pb::gXMax[] = {
  34, 11, 213.407 };

// Assignment to coefficients vector.
double TArtMDF_TOFSBTTgt_Pb::gCoefficient[] = {
  0.258273,
  1.60419,
  0.0141947,
  -0.00605227,
  0.0108504,
  0.00937469,
  -0.00398914,
  -0.00319202,
  0.00226018,
  -0.00248418,
  0.00573114,
  0.00119849,
  -0.00308573,
  0.000463679,
  -0.000660675,
  -0.00162122,
  -7.97319e-07,
  -0.00146533,
  0.00122431,
  0.000220456,
  0.000332191,
  0.000180381,
  -0.000667115,
  -0.000409699,
  0.000366218,
  3.98261e-05,
  -0.000102974,
  -2.39842e-05,
  2.43051e-05,
  2.06694e-05,
  -9.18503e-06
 };

// Assignment to error coefficients vector.
double TArtMDF_TOFSBTTgt_Pb::gCoefficientRMS[] = {
  0.236056,
  0.531591,
  0.181512,
  0.554532,
  0.895979,
  0.496781,
  0.960394,
  0.783208,
  0.427739,
  0.555617,
  1.44845,
  0.821944,
  0.95561,
  0.271044,
  1.79423,
  0.923071,
  1.03987,
  1.13348,
  1.28744,
  0.690407,
  0.556879,
  0.772121,
  1.26156,
  1.70068,
  1.8458,
  1.4159,
  1.75344,
  0.924968,
  0.623861,
  1.05697,
  1.20159
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_TOFSBTTgt_Pb::gPower[i * NVariables + j];
int    TArtMDF_TOFSBTTgt_Pb::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  1,  2,
  2,  2,  1,
  1,  2,  3,
  2,  3,  1,
  3,  1,  1,
  1,  1,  4,
  5,  1,  1,
  1,  3,  1,
  2,  1,  3,
  2,  2,  2,
  3,  2,  2,
  2,  3,  2,
  3,  1,  2,
  1,  5,  2,
  4,  1,  1,
  1,  2,  4,
  3,  2,  3,
  2,  2,  3,
  3,  1,  3,
  3,  1,  4,
  2,  1,  5,
  1,  1,  5,
  1,  3,  3,
  1,  3,  4,
  2,  1,  4
};

// 
// The method   double TArtMDF_TOFSBTTgt_Pb::MDF(double *x)
// 
double TArtMDF_TOFSBTTgt_Pb::MDF(double *x) {
  double returnValue = TArtMDF_TOFSBTTgt_Pb::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_TOFSBTTgt_Pb::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_TOFSBTTgt_Pb::gCoefficient[i];
    for (j = 0; j < TArtMDF_TOFSBTTgt_Pb::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_TOFSBTTgt_Pb::gPower[TArtMDF_TOFSBTTgt_Pb::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_TOFSBTTgt_Pb::gXMax[j] - TArtMDF_TOFSBTTgt_Pb::gXMin[j]) * (x[j] - TArtMDF_TOFSBTTgt_Pb::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_TOFSBTTgt_PbMDF.cxx

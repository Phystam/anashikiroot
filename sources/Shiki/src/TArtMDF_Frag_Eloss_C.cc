// -*- mode: c++ -*-
// 
// File TArtMDF_Frag_Eloss_CMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Fri Dec  8 21:08:05 2017
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_Frag_Eloss_C::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_Frag_Eloss_C.hh"
//
// Static data variables
//
int    TArtMDF_Frag_Eloss_C::gNVariables    = 3;
int    TArtMDF_Frag_Eloss_C::gNCoefficients = 31;
double TArtMDF_Frag_Eloss_C::gDMean         = 254.329;
// Assignment to mean vector.
double TArtMDF_Frag_Eloss_C::gXMean[] = {
  0.0714286, 0.166667, 0.0276929 };

// Assignment to minimum vector.
double TArtMDF_Frag_Eloss_C::gXMin[] = {
  27, 9, 149.421 };

// Assignment to maximum vector.
double TArtMDF_Frag_Eloss_C::gXMax[] = {
  34, 11, 327.501 };

// Assignment to coefficients vector.
double TArtMDF_Frag_Eloss_C::gCoefficient[] = {
  -3.07407,
  86.2963,
  2.54469,
  -1.07319,
  0.947742,
  -0.511678,
  0.207126,
  -0.463168,
  1.12223,
  -0.572987,
  -0.360647,
  -0.632512,
  0.0706336,
  0.174897,
  -0.000318597,
  0.117916,
  0.0758243,
  0.0786068,
  0.0127571,
  0.0757917,
  -0.149608,
  -0.0621647,
  -0.0561754,
  0.0313932,
  -0.00808101,
  0.025588,
  -0.00611759,
  -0.0314319,
  0.0330777,
  0.0165188,
  -0.00588318
 };

// Assignment to error coefficients vector.
double TArtMDF_Frag_Eloss_C::gCoefficientRMS[] = {
  0.92264,
  2.22826,
  0.780897,
  1.94989,
  4.18074,
  2.15196,
  4.01864,
  2.10635,
  5.82008,
  3.06735,
  4.01448,
  3.91176,
  1.0474,
  4.67669,
  4.68247,
  5.11678,
  1.77374,
  3.7884,
  3.38,
  3.88218,
  5.80615,
  5.37003,
  4.22647,
  5.86063,
  2.91638,
  6.21388,
  2.97275,
  7.94845,
  8.38762,
  5.56946,
  7.13066
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_Frag_Eloss_C::gPower[i * NVariables + j];
int    TArtMDF_Frag_Eloss_C::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  1,  2,
  2,  3,  1,
  3,  1,  1,
  2,  2,  1,
  1,  1,  4,
  5,  1,  1,
  1,  3,  1,
  1,  2,  3,
  2,  1,  3,
  1,  1,  5,
  6,  1,  1,
  2,  2,  2,
  4,  1,  2,
  2,  3,  2,
  3,  2,  3,
  3,  1,  2,
  1,  2,  4,
  2,  1,  4,
  1,  3,  3,
  1,  2,  5,
  1,  3,  2,
  2,  2,  3,
  3,  1,  3,
  1,  3,  4,
  3,  1,  4
};

// 
// The method   double TArtMDF_Frag_Eloss_C::MDF(double *x)
// 
double TArtMDF_Frag_Eloss_C::MDF(double *x) {
  double returnValue = TArtMDF_Frag_Eloss_C::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_Frag_Eloss_C::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_Frag_Eloss_C::gCoefficient[i];
    for (j = 0; j < TArtMDF_Frag_Eloss_C::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_Frag_Eloss_C::gPower[TArtMDF_Frag_Eloss_C::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_Frag_Eloss_C::gXMax[j] - TArtMDF_Frag_Eloss_C::gXMin[j]) * (x[j] - TArtMDF_Frag_Eloss_C::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_Frag_Eloss_CMDF.cxx

// -*- mode: c++ -*-
// 
// File TArtMDF_Frag_Eloss_PbMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Mon Dec 11 20:55:11 2017
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_Frag_Eloss_Pb::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_Frag_Eloss_Pb.hh"
//
// Static data variables
//
int    TArtMDF_Frag_Eloss_Pb::gNVariables    = 3;
int    TArtMDF_Frag_Eloss_Pb::gNCoefficients = 32;
double TArtMDF_Frag_Eloss_Pb::gDMean         = 257.732;
// Assignment to mean vector.
double TArtMDF_Frag_Eloss_Pb::gXMean[] = {
  0.0714286, 0.166667, 0.0188594 };

// Assignment to minimum vector.
double TArtMDF_Frag_Eloss_Pb::gXMin[] = {
  27, 9, 160.901 };

// Assignment to maximum vector.
double TArtMDF_Frag_Eloss_Pb::gXMax[] = {
  34, 11, 331.821 };

// Assignment to coefficients vector.
double TArtMDF_Frag_Eloss_Pb::gCoefficient[] = {
  -2.04151,
  83.7353,
  1.86741,
  -0.788952,
  0.55401,
  -0.331639,
  0.135066,
  -0.422006,
  -0.335133,
  0.801669,
  -0.193443,
  0.106897,
  -0.443717,
  0.0531503,
  -0.0073584,
  0.0681683,
  0.0498734,
  0.0592943,
  0.0464608,
  -0.106617,
  -0.0328155,
  -0.0789894,
  0.0505308,
  -0.007917,
  0.0170193,
  -0.00297087,
  0.0128404,
  -0.0206282,
  0.0199527,
  0.00886837,
  0.0124298,
  -0.00485104
 };

// Assignment to error coefficients vector.
double TArtMDF_Frag_Eloss_Pb::gCoefficientRMS[] = {
  0.928222,
  2.30929,
  0.788562,
  2.10065,
  4.04533,
  2.1044,
  3.93984,
  3.09787,
  2.13536,
  5.81683,
  3.75045,
  4.58566,
  3.86885,
  1.05355,
  4.59096,
  5.21771,
  2.17242,
  4.75697,
  4.84405,
  9.72316,
  3.84954,
  5.62262,
  6.99859,
  3.11589,
  5.56221,
  2.75521,
  4.33633,
  7.66596,
  8.1504,
  5.55299,
  5.80167,
  6.22319
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_Frag_Eloss_Pb::gPower[i * NVariables + j];
int    TArtMDF_Frag_Eloss_Pb::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  1,  2,
  2,  2,  1,
  2,  3,  1,
  3,  1,  1,
  1,  1,  4,
  1,  2,  3,
  5,  1,  1,
  1,  3,  1,
  2,  1,  3,
  2,  2,  2,
  4,  1,  1,
  1,  1,  5,
  2,  3,  2,
  3,  1,  2,
  1,  2,  4,
  3,  2,  3,
  5,  1,  2,
  1,  3,  2,
  2,  1,  4,
  1,  3,  3,
  3,  2,  2,
  2,  2,  3,
  3,  1,  3,
  1,  3,  4,
  1,  2,  5,
  2,  2,  4
};

// 
// The method   double TArtMDF_Frag_Eloss_Pb::MDF(double *x)
// 
double TArtMDF_Frag_Eloss_Pb::MDF(double *x) {
  double returnValue = TArtMDF_Frag_Eloss_Pb::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_Frag_Eloss_Pb::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_Frag_Eloss_Pb::gCoefficient[i];
    for (j = 0; j < TArtMDF_Frag_Eloss_Pb::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_Frag_Eloss_Pb::gPower[TArtMDF_Frag_Eloss_Pb::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_Frag_Eloss_Pb::gXMax[j] - TArtMDF_Frag_Eloss_Pb::gXMin[j]) * (x[j] - TArtMDF_Frag_Eloss_Pb::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_Frag_Eloss_PbMDF.cxx

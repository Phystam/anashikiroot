#include "TArtEasyNeutron.hh"

#include "TArtSAMURAIParameters.hh"
#include "TArtCalibNEBULA.hh"
#include "TArtCalibNeuLAND.hh"
#include "TArtCalibNeuLANDVETO.hh"
#include "TArtNEBULAPla.hh"
#include "TArtNeuLANDPla.hh"
#include "TArtCore.hh"
#include "TArtStoreManager.hh"
#include <Riostream.h>
#include <TROOT.h>
#include <TMath.h>
#include <TVector3.h>

TArtEasyNeutron::TArtEasyNeutron(){
  TArtCore::Info(__FILE__,"Creating Neutron detector objects...");
  fcalibnebula = new TArtCalibNEBULA();
  fcalibneuland = new TArtCalibNeuLAND();
  fcalibneulandveto = new TArtCalibNeuLANDVETO();
}

TArtEasyNeutron::~TArtEasyNeutron(){
  ClearData();
}

//________________________________________________________
void TArtEasyNeutron::ClearData(){
  fcalibnebula->ClearData();
  fcalibneuland->ClearData();
  fcalibneulandveto->ClearData();
  fnumnebulapla=0;
  fpos.clear();
  ftavecal.clear();
  ftaveslw.clear();
  fqavecal.clear();
}

void TArtEasyNeutron::ReconstructData(){
  fcalibnebula->ReconstructData();
  fcalibneuland->ReconstructData();
  fcalibneulandveto->ReconstructData();
  fnumnebulapla = fcalibnebula->GetNumNEBULAPla();
  for(Int_t i=0;i<fnumnebulapla;i++){
    Int_t id=fcalibnebula->GetID();
    Int_t layer=fcalibnebula->GetLayer();
    Int_t sublayer=fcalibnebula->GetSubLayer();
    fid.push_back(id);
    flayer.push_back(layer);
    fsublayer.push_back(sublayer);

    Double_t x=fcalibnebula->GetPos(0);
    Double_t y=fcalibnebula->GetPos(1);
    Double_t z=fcalibnebula->GetPos(2);
    TVector3 v(x,y,z);
    fpos.push_back(v);
    Double_t tavecal = fcalibnebula->GetTAveCal();
    Double_t taveslw = fcalibnebula->GetTAveSlw();
    Double_t qavecal = fcalibnebula->GetQAveCal();
    ftavecal.push_back(tavecal);
    ftaveslw.push_back(taveslw);
    fqavecal.push_back(qavecal);
  }
}

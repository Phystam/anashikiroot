// -*- mode: c++ -*-
// 
// File TArtMDF_Beam_Eloss_PbMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Fri Jan  5 18:58:53 2018
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_Beam_Eloss_Pb::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_Beam_Eloss_Pb.hh"
//
// Static data variables
//
int    TArtMDF_Beam_Eloss_Pb::gNVariables    = 3;
int    TArtMDF_Beam_Eloss_Pb::gNCoefficients = 31;
double TArtMDF_Beam_Eloss_Pb::gDMean         = 221.304;
// Assignment to mean vector.
double TArtMDF_Beam_Eloss_Pb::gXMean[] = {
  0.0714286, 0.166667, 0.00511609 };

// Assignment to minimum vector.
double TArtMDF_Beam_Eloss_Pb::gXMin[] = {
  27, 9, 170.01 };

// Assignment to maximum vector.
double TArtMDF_Beam_Eloss_Pb::gXMax[] = {
  34, 11, 294.83 };

// Assignment to coefficients vector.
double TArtMDF_Beam_Eloss_Pb::gCoefficient[] = {
  0.180958,
  64.1636,
  -2.2422,
  0.94788,
  -0.4709,
  0.372833,
  0.51805,
  0.404318,
  -0.151772,
  -0.965798,
  0.533654,
  -0.0743399,
  0.140646,
  -0.112422,
  0.00618804,
  -0.0609894,
  -0.0717238,
  -0.0394438,
  -0.00227484,
  -0.0606441,
  0.0825198,
  0.0123298,
  0.0532539,
  0.032708,
  -0.0177975,
  0.0287818,
  -0.0245526,
  -0.00841176,
  -0.00259339,
  -0.00198962,
  -0.00117633
 };

// Assignment to error coefficients vector.
double TArtMDF_Beam_Eloss_Pb::gCoefficientRMS[] = {
  0.962878,
  2.17661,
  0.82392,
  2.18316,
  3.78444,
  2.07387,
  3.2169,
  2.2145,
  3.91269,
  5.9869,
  3.96856,
  1.09302,
  3.40921,
  4.37106,
  4.28754,
  2.25868,
  3.64853,
  4.01486,
  3.21665,
  3.70705,
  5.26059,
  2.86588,
  5.20978,
  3.27664,
  4.91411,
  7.09691,
  7.63676,
  4.9091,
  2.50743,
  5.97635,
  4.47732
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_Beam_Eloss_Pb::gPower[i * NVariables + j];
int    TArtMDF_Beam_Eloss_Pb::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  2,  1,
  2,  3,  1,
  2,  1,  2,
  3,  1,  1,
  5,  1,  1,
  1,  3,  1,
  1,  1,  4,
  1,  2,  3,
  2,  1,  3,
  4,  1,  1,
  2,  2,  2,
  1,  1,  5,
  4,  1,  2,
  2,  3,  2,
  3,  2,  3,
  1,  3,  2,
  3,  1,  2,
  1,  2,  4,
  2,  1,  4,
  2,  2,  3,
  3,  1,  3,
  1,  2,  5,
  1,  3,  3,
  3,  1,  4,
  1,  3,  4
};

// 
// The method   double TArtMDF_Beam_Eloss_Pb::MDF(double *x)
// 
double TArtMDF_Beam_Eloss_Pb::MDF(double *x) {
  double returnValue = TArtMDF_Beam_Eloss_Pb::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_Beam_Eloss_Pb::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_Beam_Eloss_Pb::gCoefficient[i];
    for (j = 0; j < TArtMDF_Beam_Eloss_Pb::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_Beam_Eloss_Pb::gPower[TArtMDF_Beam_Eloss_Pb::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_Beam_Eloss_Pb::gXMax[j] - TArtMDF_Beam_Eloss_Pb::gXMin[j]) * (x[j] - TArtMDF_Beam_Eloss_Pb::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_Beam_Eloss_PbMDF.cxx

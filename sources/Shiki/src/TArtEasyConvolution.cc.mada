#include "TArtEasyConvolution.hh"
#include "TF1.h"
#include "Math/Integrator.h"
#include "TMath.h"


TF1* TArtEasyConvolution::ConvolutionGaus(TF1* F1){
  f1=F1;
  nparaf1=f1->GetNumberFreeParameters();
  xmax=f1->GetXmax();
  xmin=f1->GetXmin();
  f2=new TF1("f2","gausn");
  f2->SetParameter(0,1);
  f2->SetParameter(1,0);
  //  f2->SetParameter(2,sigma);
  f12=new TF1("f12",*TArtEasyConvolution::Func_12,xmax,xmin,nparaf1+2);
  conv=new TF1("conv",*TArtEasyConvolution::Conv_12,xmax,xmin,nparaf1+4);
  return conv;
}

Double_t TArtEasyConvolution::Func_12( Double_t* x, Double_t* para){
  for(int i=0;i<nparaf1;i++){
    f1->SetParameter(i,para[i]);
  }
  f2->SetParameter(2,para[nparaf1]);
  return f1->Eval(x[0]) * f2->Eval(para[nparaf1+1]-x[0]);
}

Double_t TArtEasyConvolution::Conv_12( Double_t* x, Double_t* para){
  f12->SetParameter(nparaf1+1, x[0]);
  ROOT::Math::IntegratorOneDim ig(ROOT::Math::IntegrationOneDim::kADAPTIVE); 
  ig.SetFunction(*f12);
  return ig.Integral(para[nparaf1+2],para[nparaf1+3]);
}

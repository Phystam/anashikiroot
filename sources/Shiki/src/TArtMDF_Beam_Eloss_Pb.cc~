// -*- mode: c++ -*-
// 
// File TArtMDF_Beam_ElossMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Mon Dec 11 15:34:13 2017
// ROOT version 5.34/30
//
// This file contains the function 
//
//    double  TArtMDF_Beam_Eloss::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "TArtMDF_Beam_Eloss_Pb.hh"
//
// Static data variables
//
int    TArtMDF_Beam_Eloss_Pb::gNVariables    = 3;
int    TArtMDF_Beam_Eloss_Pb::gNCoefficients = 31;
double TArtMDF_Beam_Eloss_Pb::gDMean         = 257.732;
// Assignment to mean vector.
double TArtMDF_Beam_Eloss_Pb::gXMean[] = {
  0.0714286, 0.166667, 0.00240821 };

// Assignment to minimum vector.
double TArtMDF_Beam_Eloss_Pb::gXMin[] = {
  27, 9, 194.648 };

// Assignment to maximum vector.
double TArtMDF_Beam_Eloss_Pb::gXMax[] = {
  34, 11, 347.017 };

// Assignment to coefficients vector.
double TArtMDF_Beam_Eloss_Pb::gCoefficient[] = {
  0.422303,
  78.2257,
  -2.5991,
  1.09463,
  -0.583819,
  0.433587,
  0.599537,
  0.475706,
  -0.17727,
  -1.15155,
  0.649994,
  -0.086987,
  0.185119,
  -0.141108,
  -0.00385943,
  -0.0791687,
  -0.0849802,
  -0.0553987,
  0.0426771,
  -0.00498054,
  -0.0667186,
  0.121904,
  0.0139291,
  0.0635202,
  -0.0250866,
  0.0371743,
  -0.0336574,
  -0.0110786,
  -0.00299668,
  -0.00254245,
  -8.30087e-05
 };

// Assignment to error coefficients vector.
double TArtMDF_Beam_Eloss_Pb::gCoefficientRMS[] = {
  0.932609,
  2.07202,
  0.796567,
  1.97505,
  3.54813,
  1.97016,
  3.10096,
  2.12794,
  3.68427,
  5.84843,
  3.93968,
  1.05592,
  3.16027,
  4.10598,
  4.00048,
  1.79382,
  3.46651,
  3.6618,
  3.02181,
  3.99268,
  4.42866,
  4.88309,
  2.72318,
  4.95843,
  4.54497,
  6.65173,
  7.16909,
  4.48093,
  2.35169,
  5.52646,
  4.12853
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = TArtMDF_Beam_Eloss_Pb::gPower[i * NVariables + j];
int    TArtMDF_Beam_Eloss_Pb::gPower[] = {
  1,  1,  1,
  1,  1,  2,
  1,  2,  1,
  2,  1,  1,
  1,  1,  3,
  1,  2,  2,
  2,  2,  1,
  2,  3,  1,
  2,  1,  2,
  3,  1,  1,
  5,  1,  1,
  1,  3,  1,
  1,  1,  4,
  1,  2,  3,
  2,  1,  3,
  6,  1,  1,
  2,  2,  2,
  1,  1,  5,
  1,  2,  4,
  3,  2,  2,
  2,  3,  2,
  3,  2,  3,
  1,  3,  2,
  3,  1,  2,
  2,  1,  4,
  2,  2,  3,
  3,  1,  3,
  1,  2,  5,
  1,  3,  3,
  3,  1,  4,
  1,  3,  4
};

// 
// The method   double TArtMDF_Beam_Eloss_Pb::MDF(double *x)
// 
double TArtMDF_Beam_Eloss_Pb::MDF(double *x) {
  double returnValue = TArtMDF_Beam_Eloss_Pb::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < TArtMDF_Beam_Eloss_Pb::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = TArtMDF_Beam_Eloss_Pb::gCoefficient[i];
    for (j = 0; j < TArtMDF_Beam_Eloss_Pb::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = TArtMDF_Beam_Eloss_Pb::gPower[TArtMDF_Beam_Eloss_Pb::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (TArtMDF_Beam_Eloss_Pb::gXMax[j] - TArtMDF_Beam_Eloss_Pb::gXMin[j]) * (x[j] - TArtMDF_Beam_Eloss_Pb::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for TArtMDF_Beam_Eloss_Pb.cc

//
// File generated by rootcint at Thu Nov  9 20:40:06 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME anabrips_dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "anabrips_dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void TArtTKEPara_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtTKEPara(void *p = 0);
   static void *newArray_TArtTKEPara(Long_t size, void *p);
   static void delete_TArtTKEPara(void *p);
   static void deleteArray_TArtTKEPara(void *p);
   static void destruct_TArtTKEPara(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtTKEPara*)
   {
      ::TArtTKEPara *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtTKEPara >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtTKEPara", ::TArtTKEPara::Class_Version(), "./include/TArtTKEPara.hh", 12,
                  typeid(::TArtTKEPara), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtTKEPara::Dictionary, isa_proxy, 4,
                  sizeof(::TArtTKEPara) );
      instance.SetNew(&new_TArtTKEPara);
      instance.SetNewArray(&newArray_TArtTKEPara);
      instance.SetDelete(&delete_TArtTKEPara);
      instance.SetDeleteArray(&deleteArray_TArtTKEPara);
      instance.SetDestructor(&destruct_TArtTKEPara);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtTKEPara*)
   {
      return GenerateInitInstanceLocal((::TArtTKEPara*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtTKEPara*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtBigRIPSParameters_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtBigRIPSParameters(void *p = 0);
   static void *newArray_TArtBigRIPSParameters(Long_t size, void *p);
   static void delete_TArtBigRIPSParameters(void *p);
   static void deleteArray_TArtBigRIPSParameters(void *p);
   static void destruct_TArtBigRIPSParameters(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtBigRIPSParameters*)
   {
      ::TArtBigRIPSParameters *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtBigRIPSParameters >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtBigRIPSParameters", ::TArtBigRIPSParameters::Class_Version(), "./include/TArtBigRIPSParameters.hh", 24,
                  typeid(::TArtBigRIPSParameters), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtBigRIPSParameters::Dictionary, isa_proxy, 4,
                  sizeof(::TArtBigRIPSParameters) );
      instance.SetNew(&new_TArtBigRIPSParameters);
      instance.SetNewArray(&newArray_TArtBigRIPSParameters);
      instance.SetDelete(&delete_TArtBigRIPSParameters);
      instance.SetDeleteArray(&deleteArray_TArtBigRIPSParameters);
      instance.SetDestructor(&destruct_TArtBigRIPSParameters);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtBigRIPSParameters*)
   {
      return GenerateInitInstanceLocal((::TArtBigRIPSParameters*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtBigRIPSParameters*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtTKE_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtTKE(void *p = 0);
   static void *newArray_TArtTKE(Long_t size, void *p);
   static void delete_TArtTKE(void *p);
   static void deleteArray_TArtTKE(void *p);
   static void destruct_TArtTKE(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtTKE*)
   {
      ::TArtTKE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtTKE >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtTKE", ::TArtTKE::Class_Version(), "./include/TArtTKE.hh", 9,
                  typeid(::TArtTKE), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtTKE::Dictionary, isa_proxy, 4,
                  sizeof(::TArtTKE) );
      instance.SetNew(&new_TArtTKE);
      instance.SetNewArray(&newArray_TArtTKE);
      instance.SetDelete(&delete_TArtTKE);
      instance.SetDeleteArray(&deleteArray_TArtTKE);
      instance.SetDestructor(&destruct_TArtTKE);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtTKE*)
   {
      return GenerateInitInstanceLocal((::TArtTKE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtTKE*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtCalibTKE_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtCalibTKE(void *p = 0);
   static void *newArray_TArtCalibTKE(Long_t size, void *p);
   static void delete_TArtCalibTKE(void *p);
   static void deleteArray_TArtCalibTKE(void *p);
   static void destruct_TArtCalibTKE(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtCalibTKE*)
   {
      ::TArtCalibTKE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtCalibTKE >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtCalibTKE", ::TArtCalibTKE::Class_Version(), "./include/TArtCalibTKE.hh", 17,
                  typeid(::TArtCalibTKE), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtCalibTKE::Dictionary, isa_proxy, 4,
                  sizeof(::TArtCalibTKE) );
      instance.SetNew(&new_TArtCalibTKE);
      instance.SetNewArray(&newArray_TArtCalibTKE);
      instance.SetDelete(&delete_TArtCalibTKE);
      instance.SetDeleteArray(&deleteArray_TArtCalibTKE);
      instance.SetDestructor(&destruct_TArtCalibTKE);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtCalibTKE*)
   {
      return GenerateInitInstanceLocal((::TArtCalibTKE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtCalibTKE*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtIC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtIC(void *p = 0);
   static void *newArray_TArtIC(Long_t size, void *p);
   static void delete_TArtIC(void *p);
   static void deleteArray_TArtIC(void *p);
   static void destruct_TArtIC(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtIC*)
   {
      ::TArtIC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtIC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtIC", ::TArtIC::Class_Version(), "./include/TArtIC.hh", 10,
                  typeid(::TArtIC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtIC::Dictionary, isa_proxy, 4,
                  sizeof(::TArtIC) );
      instance.SetNew(&new_TArtIC);
      instance.SetNewArray(&newArray_TArtIC);
      instance.SetDelete(&delete_TArtIC);
      instance.SetDeleteArray(&deleteArray_TArtIC);
      instance.SetDestructor(&destruct_TArtIC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtIC*)
   {
      return GenerateInitInstanceLocal((::TArtIC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtIC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtFocalPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtFocalPlane(void *p = 0);
   static void *newArray_TArtFocalPlane(Long_t size, void *p);
   static void delete_TArtFocalPlane(void *p);
   static void deleteArray_TArtFocalPlane(void *p);
   static void destruct_TArtFocalPlane(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtFocalPlane*)
   {
      ::TArtFocalPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtFocalPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtFocalPlane", ::TArtFocalPlane::Class_Version(), "./include/TArtFocalPlane.hh", 8,
                  typeid(::TArtFocalPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtFocalPlane::Dictionary, isa_proxy, 4,
                  sizeof(::TArtFocalPlane) );
      instance.SetNew(&new_TArtFocalPlane);
      instance.SetNewArray(&newArray_TArtFocalPlane);
      instance.SetDelete(&delete_TArtFocalPlane);
      instance.SetDeleteArray(&deleteArray_TArtFocalPlane);
      instance.SetDestructor(&destruct_TArtFocalPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtFocalPlane*)
   {
      return GenerateInitInstanceLocal((::TArtFocalPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtFocalPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtRIPS_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtRIPS(void *p = 0);
   static void *newArray_TArtRIPS(Long_t size, void *p);
   static void delete_TArtRIPS(void *p);
   static void deleteArray_TArtRIPS(void *p);
   static void destruct_TArtRIPS(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtRIPS*)
   {
      ::TArtRIPS *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtRIPS >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtRIPS", ::TArtRIPS::Class_Version(), "./include/TArtRIPS.hh", 8,
                  typeid(::TArtRIPS), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtRIPS::Dictionary, isa_proxy, 4,
                  sizeof(::TArtRIPS) );
      instance.SetNew(&new_TArtRIPS);
      instance.SetNewArray(&newArray_TArtRIPS);
      instance.SetDelete(&delete_TArtRIPS);
      instance.SetDeleteArray(&deleteArray_TArtRIPS);
      instance.SetDestructor(&destruct_TArtRIPS);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtRIPS*)
   {
      return GenerateInitInstanceLocal((::TArtRIPS*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtRIPS*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtRecoRIPS_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtRecoRIPS(void *p = 0);
   static void *newArray_TArtRecoRIPS(Long_t size, void *p);
   static void delete_TArtRecoRIPS(void *p);
   static void deleteArray_TArtRecoRIPS(void *p);
   static void destruct_TArtRecoRIPS(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtRecoRIPS*)
   {
      ::TArtRecoRIPS *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtRecoRIPS >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtRecoRIPS", ::TArtRecoRIPS::Class_Version(), "./include/TArtRecoRIPS.hh", 19,
                  typeid(::TArtRecoRIPS), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtRecoRIPS::Dictionary, isa_proxy, 4,
                  sizeof(::TArtRecoRIPS) );
      instance.SetNew(&new_TArtRecoRIPS);
      instance.SetNewArray(&newArray_TArtRecoRIPS);
      instance.SetDelete(&delete_TArtRecoRIPS);
      instance.SetDeleteArray(&deleteArray_TArtRecoRIPS);
      instance.SetDestructor(&destruct_TArtRecoRIPS);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtRecoRIPS*)
   {
      return GenerateInitInstanceLocal((::TArtRecoRIPS*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtRecoRIPS*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtCalibPPAC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtCalibPPAC(void *p = 0);
   static void *newArray_TArtCalibPPAC(Long_t size, void *p);
   static void delete_TArtCalibPPAC(void *p);
   static void deleteArray_TArtCalibPPAC(void *p);
   static void destruct_TArtCalibPPAC(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtCalibPPAC*)
   {
      ::TArtCalibPPAC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtCalibPPAC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtCalibPPAC", ::TArtCalibPPAC::Class_Version(), "./include/TArtCalibPPAC.hh", 19,
                  typeid(::TArtCalibPPAC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtCalibPPAC::Dictionary, isa_proxy, 4,
                  sizeof(::TArtCalibPPAC) );
      instance.SetNew(&new_TArtCalibPPAC);
      instance.SetNewArray(&newArray_TArtCalibPPAC);
      instance.SetDelete(&delete_TArtCalibPPAC);
      instance.SetDeleteArray(&deleteArray_TArtCalibPPAC);
      instance.SetDestructor(&destruct_TArtCalibPPAC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtCalibPPAC*)
   {
      return GenerateInitInstanceLocal((::TArtCalibPPAC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtCalibPPAC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtCalibPlastic_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtCalibPlastic(void *p = 0);
   static void *newArray_TArtCalibPlastic(Long_t size, void *p);
   static void delete_TArtCalibPlastic(void *p);
   static void deleteArray_TArtCalibPlastic(void *p);
   static void destruct_TArtCalibPlastic(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtCalibPlastic*)
   {
      ::TArtCalibPlastic *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtCalibPlastic >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtCalibPlastic", ::TArtCalibPlastic::Class_Version(), "./include/TArtCalibPlastic.hh", 18,
                  typeid(::TArtCalibPlastic), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtCalibPlastic::Dictionary, isa_proxy, 4,
                  sizeof(::TArtCalibPlastic) );
      instance.SetNew(&new_TArtCalibPlastic);
      instance.SetNewArray(&newArray_TArtCalibPlastic);
      instance.SetDelete(&delete_TArtCalibPlastic);
      instance.SetDeleteArray(&deleteArray_TArtCalibPlastic);
      instance.SetDestructor(&destruct_TArtCalibPlastic);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtCalibPlastic*)
   {
      return GenerateInitInstanceLocal((::TArtCalibPlastic*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtCalibPlastic*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtCalibIC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtCalibIC(void *p = 0);
   static void *newArray_TArtCalibIC(Long_t size, void *p);
   static void delete_TArtCalibIC(void *p);
   static void deleteArray_TArtCalibIC(void *p);
   static void destruct_TArtCalibIC(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtCalibIC*)
   {
      ::TArtCalibIC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtCalibIC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtCalibIC", ::TArtCalibIC::Class_Version(), "./include/TArtCalibIC.hh", 19,
                  typeid(::TArtCalibIC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtCalibIC::Dictionary, isa_proxy, 4,
                  sizeof(::TArtCalibIC) );
      instance.SetNew(&new_TArtCalibIC);
      instance.SetNewArray(&newArray_TArtCalibIC);
      instance.SetDelete(&delete_TArtCalibIC);
      instance.SetDeleteArray(&deleteArray_TArtCalibIC);
      instance.SetDestructor(&destruct_TArtCalibIC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtCalibIC*)
   {
      return GenerateInitInstanceLocal((::TArtCalibIC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtCalibIC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtCalibGe_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtCalibGe(void *p = 0);
   static void *newArray_TArtCalibGe(Long_t size, void *p);
   static void delete_TArtCalibGe(void *p);
   static void deleteArray_TArtCalibGe(void *p);
   static void destruct_TArtCalibGe(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtCalibGe*)
   {
      ::TArtCalibGe *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtCalibGe >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtCalibGe", ::TArtCalibGe::Class_Version(), "./include/TArtCalibGe.hh", 17,
                  typeid(::TArtCalibGe), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtCalibGe::Dictionary, isa_proxy, 4,
                  sizeof(::TArtCalibGe) );
      instance.SetNew(&new_TArtCalibGe);
      instance.SetNewArray(&newArray_TArtCalibGe);
      instance.SetDelete(&delete_TArtCalibGe);
      instance.SetDeleteArray(&deleteArray_TArtCalibGe);
      instance.SetDestructor(&destruct_TArtCalibGe);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtCalibGe*)
   {
      return GenerateInitInstanceLocal((::TArtCalibGe*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtCalibGe*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtCalibFocalPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtCalibFocalPlane(void *p = 0);
   static void *newArray_TArtCalibFocalPlane(Long_t size, void *p);
   static void delete_TArtCalibFocalPlane(void *p);
   static void deleteArray_TArtCalibFocalPlane(void *p);
   static void destruct_TArtCalibFocalPlane(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtCalibFocalPlane*)
   {
      ::TArtCalibFocalPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtCalibFocalPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtCalibFocalPlane", ::TArtCalibFocalPlane::Class_Version(), "./include/TArtCalibFocalPlane.hh", 19,
                  typeid(::TArtCalibFocalPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtCalibFocalPlane::Dictionary, isa_proxy, 4,
                  sizeof(::TArtCalibFocalPlane) );
      instance.SetNew(&new_TArtCalibFocalPlane);
      instance.SetNewArray(&newArray_TArtCalibFocalPlane);
      instance.SetDelete(&delete_TArtCalibFocalPlane);
      instance.SetDeleteArray(&deleteArray_TArtCalibFocalPlane);
      instance.SetDestructor(&destruct_TArtCalibFocalPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtCalibFocalPlane*)
   {
      return GenerateInitInstanceLocal((::TArtCalibFocalPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtCalibFocalPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtCalibPID_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtCalibPID(void *p = 0);
   static void *newArray_TArtCalibPID(Long_t size, void *p);
   static void delete_TArtCalibPID(void *p);
   static void deleteArray_TArtCalibPID(void *p);
   static void destruct_TArtCalibPID(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtCalibPID*)
   {
      ::TArtCalibPID *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtCalibPID >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtCalibPID", ::TArtCalibPID::Class_Version(), "./include/TArtCalibPID.hh", 21,
                  typeid(::TArtCalibPID), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtCalibPID::Dictionary, isa_proxy, 4,
                  sizeof(::TArtCalibPID) );
      instance.SetNew(&new_TArtCalibPID);
      instance.SetNewArray(&newArray_TArtCalibPID);
      instance.SetDelete(&delete_TArtCalibPID);
      instance.SetDeleteArray(&deleteArray_TArtCalibPID);
      instance.SetDestructor(&destruct_TArtCalibPID);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtCalibPID*)
   {
      return GenerateInitInstanceLocal((::TArtCalibPID*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtCalibPID*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtTOF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtTOF(void *p = 0);
   static void *newArray_TArtTOF(Long_t size, void *p);
   static void delete_TArtTOF(void *p);
   static void deleteArray_TArtTOF(void *p);
   static void destruct_TArtTOF(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtTOF*)
   {
      ::TArtTOF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtTOF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtTOF", ::TArtTOF::Class_Version(), "./include/TArtTOF.hh", 8,
                  typeid(::TArtTOF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtTOF::Dictionary, isa_proxy, 4,
                  sizeof(::TArtTOF) );
      instance.SetNew(&new_TArtTOF);
      instance.SetNewArray(&newArray_TArtTOF);
      instance.SetDelete(&delete_TArtTOF);
      instance.SetDeleteArray(&deleteArray_TArtTOF);
      instance.SetDestructor(&destruct_TArtTOF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtTOF*)
   {
      return GenerateInitInstanceLocal((::TArtTOF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtTOF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtBeam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtBeam(void *p = 0);
   static void *newArray_TArtBeam(Long_t size, void *p);
   static void delete_TArtBeam(void *p);
   static void deleteArray_TArtBeam(void *p);
   static void destruct_TArtBeam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtBeam*)
   {
      ::TArtBeam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtBeam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtBeam", ::TArtBeam::Class_Version(), "./include/TArtBeam.hh", 9,
                  typeid(::TArtBeam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtBeam::Dictionary, isa_proxy, 4,
                  sizeof(::TArtBeam) );
      instance.SetNew(&new_TArtBeam);
      instance.SetNewArray(&newArray_TArtBeam);
      instance.SetDelete(&delete_TArtBeam);
      instance.SetDeleteArray(&deleteArray_TArtBeam);
      instance.SetDestructor(&destruct_TArtBeam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtBeam*)
   {
      return GenerateInitInstanceLocal((::TArtBeam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtBeam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtRecoTOF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtRecoTOF(void *p = 0);
   static void *newArray_TArtRecoTOF(Long_t size, void *p);
   static void delete_TArtRecoTOF(void *p);
   static void deleteArray_TArtRecoTOF(void *p);
   static void destruct_TArtRecoTOF(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtRecoTOF*)
   {
      ::TArtRecoTOF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtRecoTOF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtRecoTOF", ::TArtRecoTOF::Class_Version(), "./include/TArtRecoTOF.hh", 17,
                  typeid(::TArtRecoTOF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtRecoTOF::Dictionary, isa_proxy, 4,
                  sizeof(::TArtRecoTOF) );
      instance.SetNew(&new_TArtRecoTOF);
      instance.SetNewArray(&newArray_TArtRecoTOF);
      instance.SetDelete(&delete_TArtRecoTOF);
      instance.SetDeleteArray(&deleteArray_TArtRecoTOF);
      instance.SetDestructor(&destruct_TArtRecoTOF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtRecoTOF*)
   {
      return GenerateInitInstanceLocal((::TArtRecoTOF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtRecoTOF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtRecoBeam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtRecoBeam(void *p = 0);
   static void *newArray_TArtRecoBeam(Long_t size, void *p);
   static void delete_TArtRecoBeam(void *p);
   static void deleteArray_TArtRecoBeam(void *p);
   static void destruct_TArtRecoBeam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtRecoBeam*)
   {
      ::TArtRecoBeam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtRecoBeam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtRecoBeam", ::TArtRecoBeam::Class_Version(), "./include/TArtRecoBeam.hh", 19,
                  typeid(::TArtRecoBeam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtRecoBeam::Dictionary, isa_proxy, 4,
                  sizeof(::TArtRecoBeam) );
      instance.SetNew(&new_TArtRecoBeam);
      instance.SetNewArray(&newArray_TArtRecoBeam);
      instance.SetDelete(&delete_TArtRecoBeam);
      instance.SetDeleteArray(&deleteArray_TArtRecoBeam);
      instance.SetDestructor(&destruct_TArtRecoBeam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtRecoBeam*)
   {
      return GenerateInitInstanceLocal((::TArtRecoBeam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtRecoBeam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtRecoPID_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtRecoPID(void *p = 0);
   static void *newArray_TArtRecoPID(Long_t size, void *p);
   static void delete_TArtRecoPID(void *p);
   static void deleteArray_TArtRecoPID(void *p);
   static void destruct_TArtRecoPID(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtRecoPID*)
   {
      ::TArtRecoPID *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtRecoPID >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtRecoPID", ::TArtRecoPID::Class_Version(), "./include/TArtRecoPID.hh", 22,
                  typeid(::TArtRecoPID), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtRecoPID::Dictionary, isa_proxy, 4,
                  sizeof(::TArtRecoPID) );
      instance.SetNew(&new_TArtRecoPID);
      instance.SetNewArray(&newArray_TArtRecoPID);
      instance.SetDelete(&delete_TArtRecoPID);
      instance.SetDeleteArray(&deleteArray_TArtRecoPID);
      instance.SetDestructor(&destruct_TArtRecoPID);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtRecoPID*)
   {
      return GenerateInitInstanceLocal((::TArtRecoPID*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtRecoPID*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtFocalPlanePara_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtFocalPlanePara(void *p = 0);
   static void *newArray_TArtFocalPlanePara(Long_t size, void *p);
   static void delete_TArtFocalPlanePara(void *p);
   static void deleteArray_TArtFocalPlanePara(void *p);
   static void destruct_TArtFocalPlanePara(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtFocalPlanePara*)
   {
      ::TArtFocalPlanePara *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtFocalPlanePara >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtFocalPlanePara", ::TArtFocalPlanePara::Class_Version(), "./include/TArtFocalPlanePara.hh", 6,
                  typeid(::TArtFocalPlanePara), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtFocalPlanePara::Dictionary, isa_proxy, 4,
                  sizeof(::TArtFocalPlanePara) );
      instance.SetNew(&new_TArtFocalPlanePara);
      instance.SetNewArray(&newArray_TArtFocalPlanePara);
      instance.SetDelete(&delete_TArtFocalPlanePara);
      instance.SetDeleteArray(&deleteArray_TArtFocalPlanePara);
      instance.SetDestructor(&destruct_TArtFocalPlanePara);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtFocalPlanePara*)
   {
      return GenerateInitInstanceLocal((::TArtFocalPlanePara*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtFocalPlanePara*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtGePara_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtGePara(void *p = 0);
   static void *newArray_TArtGePara(Long_t size, void *p);
   static void delete_TArtGePara(void *p);
   static void deleteArray_TArtGePara(void *p);
   static void destruct_TArtGePara(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtGePara*)
   {
      ::TArtGePara *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtGePara >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtGePara", ::TArtGePara::Class_Version(), "./include/TArtGePara.hh", 12,
                  typeid(::TArtGePara), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtGePara::Dictionary, isa_proxy, 4,
                  sizeof(::TArtGePara) );
      instance.SetNew(&new_TArtGePara);
      instance.SetNewArray(&newArray_TArtGePara);
      instance.SetDelete(&delete_TArtGePara);
      instance.SetDeleteArray(&deleteArray_TArtGePara);
      instance.SetDestructor(&destruct_TArtGePara);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtGePara*)
   {
      return GenerateInitInstanceLocal((::TArtGePara*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtGePara*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtGe_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtGe(void *p = 0);
   static void *newArray_TArtGe(Long_t size, void *p);
   static void delete_TArtGe(void *p);
   static void deleteArray_TArtGe(void *p);
   static void destruct_TArtGe(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtGe*)
   {
      ::TArtGe *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtGe >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtGe", ::TArtGe::Class_Version(), "./include/TArtGe.hh", 6,
                  typeid(::TArtGe), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtGe::Dictionary, isa_proxy, 4,
                  sizeof(::TArtGe) );
      instance.SetNew(&new_TArtGe);
      instance.SetNewArray(&newArray_TArtGe);
      instance.SetDelete(&delete_TArtGe);
      instance.SetDeleteArray(&deleteArray_TArtGe);
      instance.SetDestructor(&destruct_TArtGe);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtGe*)
   {
      return GenerateInitInstanceLocal((::TArtGe*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtGe*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtPPACPara_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtPPACPara(void *p = 0);
   static void *newArray_TArtPPACPara(Long_t size, void *p);
   static void delete_TArtPPACPara(void *p);
   static void deleteArray_TArtPPACPara(void *p);
   static void destruct_TArtPPACPara(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtPPACPara*)
   {
      ::TArtPPACPara *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtPPACPara >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtPPACPara", ::TArtPPACPara::Class_Version(), "./include/TArtPPACPara.hh", 12,
                  typeid(::TArtPPACPara), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtPPACPara::Dictionary, isa_proxy, 4,
                  sizeof(::TArtPPACPara) );
      instance.SetNew(&new_TArtPPACPara);
      instance.SetNewArray(&newArray_TArtPPACPara);
      instance.SetDelete(&delete_TArtPPACPara);
      instance.SetDeleteArray(&deleteArray_TArtPPACPara);
      instance.SetDestructor(&destruct_TArtPPACPara);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtPPACPara*)
   {
      return GenerateInitInstanceLocal((::TArtPPACPara*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtPPACPara*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtPPAC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtPPAC(void *p = 0);
   static void *newArray_TArtPPAC(Long_t size, void *p);
   static void delete_TArtPPAC(void *p);
   static void deleteArray_TArtPPAC(void *p);
   static void destruct_TArtPPAC(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtPPAC*)
   {
      ::TArtPPAC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtPPAC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtPPAC", ::TArtPPAC::Class_Version(), "./include/TArtPPAC.hh", 6,
                  typeid(::TArtPPAC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtPPAC::Dictionary, isa_proxy, 4,
                  sizeof(::TArtPPAC) );
      instance.SetNew(&new_TArtPPAC);
      instance.SetNewArray(&newArray_TArtPPAC);
      instance.SetDelete(&delete_TArtPPAC);
      instance.SetDeleteArray(&deleteArray_TArtPPAC);
      instance.SetDestructor(&destruct_TArtPPAC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtPPAC*)
   {
      return GenerateInitInstanceLocal((::TArtPPAC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtPPAC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtSi_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtSi(void *p = 0);
   static void *newArray_TArtSi(Long_t size, void *p);
   static void delete_TArtSi(void *p);
   static void deleteArray_TArtSi(void *p);
   static void destruct_TArtSi(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtSi*)
   {
      ::TArtSi *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtSi >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtSi", ::TArtSi::Class_Version(), "./include/TArtSi.hh", 7,
                  typeid(::TArtSi), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtSi::Dictionary, isa_proxy, 4,
                  sizeof(::TArtSi) );
      instance.SetNew(&new_TArtSi);
      instance.SetNewArray(&newArray_TArtSi);
      instance.SetDelete(&delete_TArtSi);
      instance.SetDeleteArray(&deleteArray_TArtSi);
      instance.SetDestructor(&destruct_TArtSi);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtSi*)
   {
      return GenerateInitInstanceLocal((::TArtSi*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtSi*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtPlasticPara_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtPlasticPara(void *p = 0);
   static void *newArray_TArtPlasticPara(Long_t size, void *p);
   static void delete_TArtPlasticPara(void *p);
   static void deleteArray_TArtPlasticPara(void *p);
   static void destruct_TArtPlasticPara(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtPlasticPara*)
   {
      ::TArtPlasticPara *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtPlasticPara >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtPlasticPara", ::TArtPlasticPara::Class_Version(), "./include/TArtPlasticPara.hh", 12,
                  typeid(::TArtPlasticPara), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtPlasticPara::Dictionary, isa_proxy, 4,
                  sizeof(::TArtPlasticPara) );
      instance.SetNew(&new_TArtPlasticPara);
      instance.SetNewArray(&newArray_TArtPlasticPara);
      instance.SetDelete(&delete_TArtPlasticPara);
      instance.SetDeleteArray(&deleteArray_TArtPlasticPara);
      instance.SetDestructor(&destruct_TArtPlasticPara);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtPlasticPara*)
   {
      return GenerateInitInstanceLocal((::TArtPlasticPara*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtPlasticPara*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtICPara_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtICPara(void *p = 0);
   static void *newArray_TArtICPara(Long_t size, void *p);
   static void delete_TArtICPara(void *p);
   static void deleteArray_TArtICPara(void *p);
   static void destruct_TArtICPara(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtICPara*)
   {
      ::TArtICPara *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtICPara >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtICPara", ::TArtICPara::Class_Version(), "./include/TArtICPara.hh", 12,
                  typeid(::TArtICPara), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtICPara::Dictionary, isa_proxy, 4,
                  sizeof(::TArtICPara) );
      instance.SetNew(&new_TArtICPara);
      instance.SetNewArray(&newArray_TArtICPara);
      instance.SetDelete(&delete_TArtICPara);
      instance.SetDeleteArray(&deleteArray_TArtICPara);
      instance.SetDestructor(&destruct_TArtICPara);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtICPara*)
   {
      return GenerateInitInstanceLocal((::TArtICPara*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtICPara*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtSiPara_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtSiPara(void *p = 0);
   static void *newArray_TArtSiPara(Long_t size, void *p);
   static void delete_TArtSiPara(void *p);
   static void deleteArray_TArtSiPara(void *p);
   static void destruct_TArtSiPara(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtSiPara*)
   {
      ::TArtSiPara *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtSiPara >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtSiPara", ::TArtSiPara::Class_Version(), "./include/TArtSiPara.hh", 12,
                  typeid(::TArtSiPara), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtSiPara::Dictionary, isa_proxy, 4,
                  sizeof(::TArtSiPara) );
      instance.SetNew(&new_TArtSiPara);
      instance.SetNewArray(&newArray_TArtSiPara);
      instance.SetDelete(&delete_TArtSiPara);
      instance.SetDeleteArray(&deleteArray_TArtSiPara);
      instance.SetDestructor(&destruct_TArtSiPara);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtSiPara*)
   {
      return GenerateInitInstanceLocal((::TArtSiPara*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtSiPara*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtRIPSPara_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtRIPSPara(void *p = 0);
   static void *newArray_TArtRIPSPara(Long_t size, void *p);
   static void delete_TArtRIPSPara(void *p);
   static void deleteArray_TArtRIPSPara(void *p);
   static void destruct_TArtRIPSPara(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtRIPSPara*)
   {
      ::TArtRIPSPara *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtRIPSPara >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtRIPSPara", ::TArtRIPSPara::Class_Version(), "./include/TArtRIPSPara.hh", 7,
                  typeid(::TArtRIPSPara), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtRIPSPara::Dictionary, isa_proxy, 4,
                  sizeof(::TArtRIPSPara) );
      instance.SetNew(&new_TArtRIPSPara);
      instance.SetNewArray(&newArray_TArtRIPSPara);
      instance.SetDelete(&delete_TArtRIPSPara);
      instance.SetDeleteArray(&deleteArray_TArtRIPSPara);
      instance.SetDestructor(&destruct_TArtRIPSPara);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtRIPSPara*)
   {
      return GenerateInitInstanceLocal((::TArtRIPSPara*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtRIPSPara*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtTOFPara_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtTOFPara(void *p = 0);
   static void *newArray_TArtTOFPara(Long_t size, void *p);
   static void delete_TArtTOFPara(void *p);
   static void deleteArray_TArtTOFPara(void *p);
   static void destruct_TArtTOFPara(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtTOFPara*)
   {
      ::TArtTOFPara *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtTOFPara >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtTOFPara", ::TArtTOFPara::Class_Version(), "./include/TArtTOFPara.hh", 6,
                  typeid(::TArtTOFPara), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtTOFPara::Dictionary, isa_proxy, 4,
                  sizeof(::TArtTOFPara) );
      instance.SetNew(&new_TArtTOFPara);
      instance.SetNewArray(&newArray_TArtTOFPara);
      instance.SetDelete(&delete_TArtTOFPara);
      instance.SetDeleteArray(&deleteArray_TArtTOFPara);
      instance.SetDestructor(&destruct_TArtTOFPara);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtTOFPara*)
   {
      return GenerateInitInstanceLocal((::TArtTOFPara*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtTOFPara*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtBeamPara_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtBeamPara(void *p = 0);
   static void *newArray_TArtBeamPara(Long_t size, void *p);
   static void delete_TArtBeamPara(void *p);
   static void deleteArray_TArtBeamPara(void *p);
   static void destruct_TArtBeamPara(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtBeamPara*)
   {
      ::TArtBeamPara *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtBeamPara >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtBeamPara", ::TArtBeamPara::Class_Version(), "./include/TArtBeamPara.hh", 10,
                  typeid(::TArtBeamPara), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtBeamPara::Dictionary, isa_proxy, 4,
                  sizeof(::TArtBeamPara) );
      instance.SetNew(&new_TArtBeamPara);
      instance.SetNewArray(&newArray_TArtBeamPara);
      instance.SetDelete(&delete_TArtBeamPara);
      instance.SetDeleteArray(&deleteArray_TArtBeamPara);
      instance.SetDestructor(&destruct_TArtBeamPara);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtBeamPara*)
   {
      return GenerateInitInstanceLocal((::TArtBeamPara*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtBeamPara*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtPlastic_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtPlastic(void *p = 0);
   static void *newArray_TArtPlastic(Long_t size, void *p);
   static void delete_TArtPlastic(void *p);
   static void deleteArray_TArtPlastic(void *p);
   static void destruct_TArtPlastic(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtPlastic*)
   {
      ::TArtPlastic *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtPlastic >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtPlastic", ::TArtPlastic::Class_Version(), "./include/TArtPlastic.hh", 7,
                  typeid(::TArtPlastic), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtPlastic::Dictionary, isa_proxy, 4,
                  sizeof(::TArtPlastic) );
      instance.SetNew(&new_TArtPlastic);
      instance.SetNewArray(&newArray_TArtPlastic);
      instance.SetDelete(&delete_TArtPlastic);
      instance.SetDeleteArray(&deleteArray_TArtPlastic);
      instance.SetDestructor(&destruct_TArtPlastic);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtPlastic*)
   {
      return GenerateInitInstanceLocal((::TArtPlastic*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtPlastic*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtCalibCoin_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtCalibCoin(void *p = 0);
   static void *newArray_TArtCalibCoin(Long_t size, void *p);
   static void delete_TArtCalibCoin(void *p);
   static void deleteArray_TArtCalibCoin(void *p);
   static void destruct_TArtCalibCoin(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtCalibCoin*)
   {
      ::TArtCalibCoin *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtCalibCoin >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtCalibCoin", ::TArtCalibCoin::Class_Version(), "./include/TArtCalibCoin.hh", 12,
                  typeid(::TArtCalibCoin), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtCalibCoin::Dictionary, isa_proxy, 4,
                  sizeof(::TArtCalibCoin) );
      instance.SetNew(&new_TArtCalibCoin);
      instance.SetNewArray(&newArray_TArtCalibCoin);
      instance.SetDelete(&delete_TArtCalibCoin);
      instance.SetDeleteArray(&deleteArray_TArtCalibCoin);
      instance.SetDestructor(&destruct_TArtCalibCoin);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtCalibCoin*)
   {
      return GenerateInitInstanceLocal((::TArtCalibCoin*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtCalibCoin*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtCalibSi_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtCalibSi(void *p = 0);
   static void *newArray_TArtCalibSi(Long_t size, void *p);
   static void delete_TArtCalibSi(void *p);
   static void deleteArray_TArtCalibSi(void *p);
   static void destruct_TArtCalibSi(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtCalibSi*)
   {
      ::TArtCalibSi *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtCalibSi >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtCalibSi", ::TArtCalibSi::Class_Version(), "./include/TArtCalibSi.hh", 17,
                  typeid(::TArtCalibSi), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtCalibSi::Dictionary, isa_proxy, 4,
                  sizeof(::TArtCalibSi) );
      instance.SetNew(&new_TArtCalibSi);
      instance.SetNewArray(&newArray_TArtCalibSi);
      instance.SetDelete(&delete_TArtCalibSi);
      instance.SetDeleteArray(&deleteArray_TArtCalibSi);
      instance.SetDestructor(&destruct_TArtCalibSi);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtCalibSi*)
   {
      return GenerateInitInstanceLocal((::TArtCalibSi*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtCalibSi*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr TArtTKEPara::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtTKEPara::Class_Name()
{
   return "TArtTKEPara";
}

//______________________________________________________________________________
const char *TArtTKEPara::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTKEPara*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtTKEPara::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTKEPara*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtTKEPara::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTKEPara*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtTKEPara::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTKEPara*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtBigRIPSParameters::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtBigRIPSParameters::Class_Name()
{
   return "TArtBigRIPSParameters";
}

//______________________________________________________________________________
const char *TArtBigRIPSParameters::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtBigRIPSParameters*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtBigRIPSParameters::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtBigRIPSParameters*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtBigRIPSParameters::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtBigRIPSParameters*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtBigRIPSParameters::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtBigRIPSParameters*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtTKE::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtTKE::Class_Name()
{
   return "TArtTKE";
}

//______________________________________________________________________________
const char *TArtTKE::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTKE*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtTKE::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTKE*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtTKE::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTKE*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtTKE::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTKE*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtCalibTKE::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtCalibTKE::Class_Name()
{
   return "TArtCalibTKE";
}

//______________________________________________________________________________
const char *TArtCalibTKE::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibTKE*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtCalibTKE::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibTKE*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtCalibTKE::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibTKE*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtCalibTKE::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibTKE*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtIC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtIC::Class_Name()
{
   return "TArtIC";
}

//______________________________________________________________________________
const char *TArtIC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtIC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtIC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtIC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtIC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtIC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtIC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtIC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtFocalPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtFocalPlane::Class_Name()
{
   return "TArtFocalPlane";
}

//______________________________________________________________________________
const char *TArtFocalPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtFocalPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtFocalPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtFocalPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtFocalPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtFocalPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtFocalPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtFocalPlane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtRIPS::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtRIPS::Class_Name()
{
   return "TArtRIPS";
}

//______________________________________________________________________________
const char *TArtRIPS::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRIPS*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtRIPS::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRIPS*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtRIPS::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRIPS*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtRIPS::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRIPS*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtRecoRIPS::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtRecoRIPS::Class_Name()
{
   return "TArtRecoRIPS";
}

//______________________________________________________________________________
const char *TArtRecoRIPS::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoRIPS*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtRecoRIPS::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoRIPS*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtRecoRIPS::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoRIPS*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtRecoRIPS::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoRIPS*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtCalibPPAC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtCalibPPAC::Class_Name()
{
   return "TArtCalibPPAC";
}

//______________________________________________________________________________
const char *TArtCalibPPAC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibPPAC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtCalibPPAC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibPPAC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtCalibPPAC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibPPAC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtCalibPPAC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibPPAC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtCalibPlastic::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtCalibPlastic::Class_Name()
{
   return "TArtCalibPlastic";
}

//______________________________________________________________________________
const char *TArtCalibPlastic::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibPlastic*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtCalibPlastic::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibPlastic*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtCalibPlastic::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibPlastic*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtCalibPlastic::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibPlastic*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtCalibIC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtCalibIC::Class_Name()
{
   return "TArtCalibIC";
}

//______________________________________________________________________________
const char *TArtCalibIC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibIC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtCalibIC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibIC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtCalibIC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibIC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtCalibIC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibIC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtCalibGe::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtCalibGe::Class_Name()
{
   return "TArtCalibGe";
}

//______________________________________________________________________________
const char *TArtCalibGe::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibGe*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtCalibGe::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibGe*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtCalibGe::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibGe*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtCalibGe::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibGe*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtCalibFocalPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtCalibFocalPlane::Class_Name()
{
   return "TArtCalibFocalPlane";
}

//______________________________________________________________________________
const char *TArtCalibFocalPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibFocalPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtCalibFocalPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibFocalPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtCalibFocalPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibFocalPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtCalibFocalPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibFocalPlane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtCalibPID::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtCalibPID::Class_Name()
{
   return "TArtCalibPID";
}

//______________________________________________________________________________
const char *TArtCalibPID::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibPID*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtCalibPID::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibPID*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtCalibPID::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibPID*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtCalibPID::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibPID*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtTOF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtTOF::Class_Name()
{
   return "TArtTOF";
}

//______________________________________________________________________________
const char *TArtTOF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTOF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtTOF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTOF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtTOF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTOF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtTOF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTOF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtBeam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtBeam::Class_Name()
{
   return "TArtBeam";
}

//______________________________________________________________________________
const char *TArtBeam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtBeam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtBeam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtBeam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtBeam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtBeam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtBeam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtBeam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtRecoTOF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtRecoTOF::Class_Name()
{
   return "TArtRecoTOF";
}

//______________________________________________________________________________
const char *TArtRecoTOF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoTOF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtRecoTOF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoTOF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtRecoTOF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoTOF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtRecoTOF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoTOF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtRecoBeam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtRecoBeam::Class_Name()
{
   return "TArtRecoBeam";
}

//______________________________________________________________________________
const char *TArtRecoBeam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoBeam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtRecoBeam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoBeam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtRecoBeam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoBeam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtRecoBeam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoBeam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtRecoPID::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtRecoPID::Class_Name()
{
   return "TArtRecoPID";
}

//______________________________________________________________________________
const char *TArtRecoPID::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoPID*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtRecoPID::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoPID*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtRecoPID::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoPID*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtRecoPID::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRecoPID*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtFocalPlanePara::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtFocalPlanePara::Class_Name()
{
   return "TArtFocalPlanePara";
}

//______________________________________________________________________________
const char *TArtFocalPlanePara::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtFocalPlanePara*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtFocalPlanePara::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtFocalPlanePara*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtFocalPlanePara::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtFocalPlanePara*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtFocalPlanePara::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtFocalPlanePara*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtGePara::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtGePara::Class_Name()
{
   return "TArtGePara";
}

//______________________________________________________________________________
const char *TArtGePara::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtGePara*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtGePara::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtGePara*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtGePara::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtGePara*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtGePara::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtGePara*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtGe::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtGe::Class_Name()
{
   return "TArtGe";
}

//______________________________________________________________________________
const char *TArtGe::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtGe*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtGe::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtGe*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtGe::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtGe*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtGe::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtGe*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtPPACPara::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtPPACPara::Class_Name()
{
   return "TArtPPACPara";
}

//______________________________________________________________________________
const char *TArtPPACPara::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPPACPara*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtPPACPara::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPPACPara*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtPPACPara::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPPACPara*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtPPACPara::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPPACPara*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtPPAC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtPPAC::Class_Name()
{
   return "TArtPPAC";
}

//______________________________________________________________________________
const char *TArtPPAC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPPAC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtPPAC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPPAC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtPPAC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPPAC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtPPAC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPPAC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtSi::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtSi::Class_Name()
{
   return "TArtSi";
}

//______________________________________________________________________________
const char *TArtSi::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtSi*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtSi::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtSi*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtSi::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtSi*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtSi::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtSi*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtPlasticPara::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtPlasticPara::Class_Name()
{
   return "TArtPlasticPara";
}

//______________________________________________________________________________
const char *TArtPlasticPara::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPlasticPara*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtPlasticPara::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPlasticPara*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtPlasticPara::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPlasticPara*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtPlasticPara::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPlasticPara*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtICPara::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtICPara::Class_Name()
{
   return "TArtICPara";
}

//______________________________________________________________________________
const char *TArtICPara::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtICPara*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtICPara::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtICPara*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtICPara::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtICPara*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtICPara::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtICPara*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtSiPara::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtSiPara::Class_Name()
{
   return "TArtSiPara";
}

//______________________________________________________________________________
const char *TArtSiPara::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtSiPara*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtSiPara::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtSiPara*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtSiPara::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtSiPara*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtSiPara::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtSiPara*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtRIPSPara::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtRIPSPara::Class_Name()
{
   return "TArtRIPSPara";
}

//______________________________________________________________________________
const char *TArtRIPSPara::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRIPSPara*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtRIPSPara::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRIPSPara*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtRIPSPara::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRIPSPara*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtRIPSPara::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtRIPSPara*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtTOFPara::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtTOFPara::Class_Name()
{
   return "TArtTOFPara";
}

//______________________________________________________________________________
const char *TArtTOFPara::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTOFPara*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtTOFPara::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTOFPara*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtTOFPara::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTOFPara*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtTOFPara::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtTOFPara*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtBeamPara::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtBeamPara::Class_Name()
{
   return "TArtBeamPara";
}

//______________________________________________________________________________
const char *TArtBeamPara::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtBeamPara*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtBeamPara::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtBeamPara*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtBeamPara::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtBeamPara*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtBeamPara::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtBeamPara*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtPlastic::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtPlastic::Class_Name()
{
   return "TArtPlastic";
}

//______________________________________________________________________________
const char *TArtPlastic::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPlastic*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtPlastic::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPlastic*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtPlastic::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPlastic*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtPlastic::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtPlastic*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtCalibCoin::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtCalibCoin::Class_Name()
{
   return "TArtCalibCoin";
}

//______________________________________________________________________________
const char *TArtCalibCoin::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibCoin*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtCalibCoin::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibCoin*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtCalibCoin::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibCoin*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtCalibCoin::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibCoin*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtCalibSi::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtCalibSi::Class_Name()
{
   return "TArtCalibSi";
}

//______________________________________________________________________________
const char *TArtCalibSi::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibSi*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtCalibSi::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibSi*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtCalibSi::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibSi*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtCalibSi::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibSi*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void TArtRecoPID::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtRecoPID.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtRecoPID::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtRecoPID::Class(),this);
   }
}

//______________________________________________________________________________
void TArtRecoPID::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtRecoPID.
      TClass *R__cl = ::TArtRecoPID::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRecoRIPS", &fRecoRIPS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRecoTOF", &fRecoTOF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRecoBeam", &fRecoBeam);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtRecoPID(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtRecoPID : new ::TArtRecoPID;
   }
   static void *newArray_TArtRecoPID(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtRecoPID[nElements] : new ::TArtRecoPID[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtRecoPID(void *p) {
      delete ((::TArtRecoPID*)p);
   }
   static void deleteArray_TArtRecoPID(void *p) {
      delete [] ((::TArtRecoPID*)p);
   }
   static void destruct_TArtRecoPID(void *p) {
      typedef ::TArtRecoPID current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtRecoPID

//______________________________________________________________________________
void TArtCalibPID::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtCalibPID.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtCalibPID::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtCalibPID::Class(),this);
   }
}

//______________________________________________________________________________
void TArtCalibPID::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtCalibPID.
      TClass *R__cl = ::TArtCalibPID::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibPPAC", &fCalibPPAC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibIC", &fCalibIC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibGe", &fCalibGe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibPlastic", &fCalibPlastic);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibFocalPlane", &fCalibFocalPlane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sman", &sman);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtCalibPID(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibPID : new ::TArtCalibPID;
   }
   static void *newArray_TArtCalibPID(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibPID[nElements] : new ::TArtCalibPID[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtCalibPID(void *p) {
      delete ((::TArtCalibPID*)p);
   }
   static void deleteArray_TArtCalibPID(void *p) {
      delete [] ((::TArtCalibPID*)p);
   }
   static void destruct_TArtCalibPID(void *p) {
      typedef ::TArtCalibPID current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtCalibPID

//______________________________________________________________________________
void TArtCalibGe::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtCalibGe.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtCalibGe::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtCalibGe::Class(),this);
   }
}

//______________________________________________________________________________
void TArtCalibGe::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtCalibGe.
      TClass *R__cl = ::TArtCalibGe::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeArray", &fGeArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeParaArray", (void*)&fGeParaArray);
      R__insp.InspectMember("vector<TArtGePara*>", (void*)&fGeParaArray, "fGeParaArray.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sman", &sman);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtCalibGe(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibGe : new ::TArtCalibGe;
   }
   static void *newArray_TArtCalibGe(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibGe[nElements] : new ::TArtCalibGe[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtCalibGe(void *p) {
      delete ((::TArtCalibGe*)p);
   }
   static void deleteArray_TArtCalibGe(void *p) {
      delete [] ((::TArtCalibGe*)p);
   }
   static void destruct_TArtCalibGe(void *p) {
      typedef ::TArtCalibGe current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtCalibGe

//______________________________________________________________________________
void TArtGe::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtGe.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtGe::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtGe::Class(),this);
   }
}

//______________________________________________________________________________
void TArtGe::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtGe.
      TClass *R__cl = ::TArtGe::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC", &fADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTDC", &fTDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy", &fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      TArtDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtGe(void *p) {
      return  p ? new(p) ::TArtGe : new ::TArtGe;
   }
   static void *newArray_TArtGe(Long_t nElements, void *p) {
      return p ? new(p) ::TArtGe[nElements] : new ::TArtGe[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtGe(void *p) {
      delete ((::TArtGe*)p);
   }
   static void deleteArray_TArtGe(void *p) {
      delete [] ((::TArtGe*)p);
   }
   static void destruct_TArtGe(void *p) {
      typedef ::TArtGe current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtGe

//______________________________________________________________________________
void TArtGePara::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtGePara.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtGePara::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtGePara::Class(),this);
   }
}

//______________________________________________________________________________
void TArtGePara::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtGePara.
      TClass *R__cl = ::TArtGePara::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detname", &detname);
      R__insp.InspectMember(detname, "detname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpl", &fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_offset", &e_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_slope", &e_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_offset", &t_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_slope", &t_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_adc", &map_adc);
      R__insp.InspectMember(map_adc, "map_adc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_tdc", &map_tdc);
      R__insp.InspectMember(map_tdc, "map_tdc.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtGePara(void *p) {
      return  p ? new(p) ::TArtGePara : new ::TArtGePara;
   }
   static void *newArray_TArtGePara(Long_t nElements, void *p) {
      return p ? new(p) ::TArtGePara[nElements] : new ::TArtGePara[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtGePara(void *p) {
      delete ((::TArtGePara*)p);
   }
   static void deleteArray_TArtGePara(void *p) {
      delete [] ((::TArtGePara*)p);
   }
   static void destruct_TArtGePara(void *p) {
      typedef ::TArtGePara current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtGePara

//______________________________________________________________________________
void TArtCalibSi::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtCalibSi.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtCalibSi::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtCalibSi::Class(),this);
   }
}

//______________________________________________________________________________
void TArtCalibSi::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtCalibSi.
      TClass *R__cl = ::TArtCalibSi::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSiArray", &fSiArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSiParaArray", (void*)&fSiParaArray);
      R__insp.InspectMember("vector<TArtSiPara*>", (void*)&fSiParaArray, "fSiParaArray.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sman", &sman);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtCalibSi(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibSi : new ::TArtCalibSi;
   }
   static void *newArray_TArtCalibSi(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibSi[nElements] : new ::TArtCalibSi[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtCalibSi(void *p) {
      delete ((::TArtCalibSi*)p);
   }
   static void deleteArray_TArtCalibSi(void *p) {
      delete [] ((::TArtCalibSi*)p);
   }
   static void destruct_TArtCalibSi(void *p) {
      typedef ::TArtCalibSi current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtCalibSi

//______________________________________________________________________________
void TArtSi::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtSi.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtSi::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtSi::Class(),this);
   }
}

//______________________________________________________________________________
void TArtSi::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtSi.
      TClass *R__cl = ::TArtSi::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zcoef[3]", zcoef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ionpair", &ionpair);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC", &fADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTDC", &fTDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy", &fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      TArtDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtSi(void *p) {
      return  p ? new(p) ::TArtSi : new ::TArtSi;
   }
   static void *newArray_TArtSi(Long_t nElements, void *p) {
      return p ? new(p) ::TArtSi[nElements] : new ::TArtSi[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtSi(void *p) {
      delete ((::TArtSi*)p);
   }
   static void deleteArray_TArtSi(void *p) {
      delete [] ((::TArtSi*)p);
   }
   static void destruct_TArtSi(void *p) {
      typedef ::TArtSi current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtSi

//______________________________________________________________________________
void TArtSiPara::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtSiPara.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtSiPara::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtSiPara::Class(),this);
   }
}

//______________________________________________________________________________
void TArtSiPara::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtSiPara.
      TClass *R__cl = ::TArtSiPara::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detname", &detname);
      R__insp.InspectMember(detname, "detname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpl", &fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pedestal", &pedestal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ch2mev", &ch2mev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zcoef[3]", zcoef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ionpair", &ionpair);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_offset", &t_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ch2ns", &ch2ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_adc", &map_adc);
      R__insp.InspectMember(map_adc, "map_adc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_tdc", &map_tdc);
      R__insp.InspectMember(map_tdc, "map_tdc.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtSiPara(void *p) {
      return  p ? new(p) ::TArtSiPara : new ::TArtSiPara;
   }
   static void *newArray_TArtSiPara(Long_t nElements, void *p) {
      return p ? new(p) ::TArtSiPara[nElements] : new ::TArtSiPara[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtSiPara(void *p) {
      delete ((::TArtSiPara*)p);
   }
   static void deleteArray_TArtSiPara(void *p) {
      delete [] ((::TArtSiPara*)p);
   }
   static void destruct_TArtSiPara(void *p) {
      typedef ::TArtSiPara current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtSiPara

//______________________________________________________________________________
void TArtCalibTKE::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtCalibTKE.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtCalibTKE::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtCalibTKE::Class(),this);
   }
}

//______________________________________________________________________________
void TArtCalibTKE::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtCalibTKE.
      TClass *R__cl = ::TArtCalibTKE::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTKEArray", &fTKEArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTKEParaArray", (void*)&fTKEParaArray);
      R__insp.InspectMember("vector<TArtTKEPara*>", (void*)&fTKEParaArray, "fTKEParaArray.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sman", &sman);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtCalibTKE(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibTKE : new ::TArtCalibTKE;
   }
   static void *newArray_TArtCalibTKE(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibTKE[nElements] : new ::TArtCalibTKE[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtCalibTKE(void *p) {
      delete ((::TArtCalibTKE*)p);
   }
   static void deleteArray_TArtCalibTKE(void *p) {
      delete [] ((::TArtCalibTKE*)p);
   }
   static void destruct_TArtCalibTKE(void *p) {
      typedef ::TArtCalibTKE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtCalibTKE

//______________________________________________________________________________
void TArtTKE::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtTKE.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtTKE::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtTKE::Class(),this);
   }
}

//______________________________________________________________________________
void TArtTKE::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtTKE.
      TClass *R__cl = ::TArtTKE::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numadc", &numadc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC", &fADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTDC", &fTDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy", &fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTiming", &fTiming);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADCArray[1]", fADCArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTDCArray[1]", fTDCArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergyArray[1]", fEnergyArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimingArray[1]", fTimingArray);
      TArtDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtTKE(void *p) {
      return  p ? new(p) ::TArtTKE : new ::TArtTKE;
   }
   static void *newArray_TArtTKE(Long_t nElements, void *p) {
      return p ? new(p) ::TArtTKE[nElements] : new ::TArtTKE[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtTKE(void *p) {
      delete ((::TArtTKE*)p);
   }
   static void deleteArray_TArtTKE(void *p) {
      delete [] ((::TArtTKE*)p);
   }
   static void destruct_TArtTKE(void *p) {
      typedef ::TArtTKE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtTKE

//______________________________________________________________________________
void TArtTKEPara::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtTKEPara.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtTKEPara::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtTKEPara::Class(),this);
   }
}

//______________________________________________________________________________
void TArtTKEPara::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtTKEPara.
      TClass *R__cl = ::TArtTKEPara::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detname", &detname);
      R__insp.InspectMember(detname, "detname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpl", &fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numadc", &numadc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_ped", &e_ped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_ch2mev", &e_ch2mev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_offset", &t_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_ch2nsec", &t_ch2nsec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_adc", &map_adc);
      R__insp.InspectMember(map_adc, "map_adc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_tdc", &map_tdc);
      R__insp.InspectMember(map_tdc, "map_tdc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_pedarray[1]", e_pedarray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_ch2mevarray[1]", e_ch2mevarray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_offsetarray[1]", t_offsetarray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_ch2nsecarray[1]", t_ch2nsecarray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_adcarray[1]", map_adcarray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_tdcarray[1]", map_tdcarray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chmap", (void*)&chmap);
      R__insp.InspectMember("map<TArtRIDFMap,int>", (void*)&chmap, "chmap.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtTKEPara(void *p) {
      return  p ? new(p) ::TArtTKEPara : new ::TArtTKEPara;
   }
   static void *newArray_TArtTKEPara(Long_t nElements, void *p) {
      return p ? new(p) ::TArtTKEPara[nElements] : new ::TArtTKEPara[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtTKEPara(void *p) {
      delete ((::TArtTKEPara*)p);
   }
   static void deleteArray_TArtTKEPara(void *p) {
      delete [] ((::TArtTKEPara*)p);
   }
   static void destruct_TArtTKEPara(void *p) {
      typedef ::TArtTKEPara current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtTKEPara

//______________________________________________________________________________
void TArtCalibIC::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtCalibIC.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtCalibIC::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtCalibIC::Class(),this);
   }
}

//______________________________________________________________________________
void TArtCalibIC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtCalibIC.
      TClass *R__cl = ::TArtCalibIC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fICArray", &fICArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fICParaArray", (void*)&fICParaArray);
      R__insp.InspectMember("vector<TArtICPara*>", (void*)&fICParaArray, "fICParaArray.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sman", &sman);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtCalibIC(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibIC : new ::TArtCalibIC;
   }
   static void *newArray_TArtCalibIC(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibIC[nElements] : new ::TArtCalibIC[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtCalibIC(void *p) {
      delete ((::TArtCalibIC*)p);
   }
   static void deleteArray_TArtCalibIC(void *p) {
      delete [] ((::TArtCalibIC*)p);
   }
   static void destruct_TArtCalibIC(void *p) {
      typedef ::TArtCalibIC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtCalibIC

//______________________________________________________________________________
void TArtIC::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtIC.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtIC::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtIC::Class(),this);
   }
}

//______________________________________________________________________________
void TArtIC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtIC.
      TClass *R__cl = ::TArtIC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zcoef[2]", zcoef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ionpair", &ionpair);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nhitchannel", &nhitchannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC[12]", fADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedADC[12]", fPedADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy[12]", fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedADCSqSum", &fPedADCSqSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedADCAvSum", &fPedADCAvSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalMeVSqSum", &fCalMeVSqSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalMeVAvSum", &fCalMeVAvSum);
      TArtDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtIC(void *p) {
      return  p ? new(p) ::TArtIC : new ::TArtIC;
   }
   static void *newArray_TArtIC(Long_t nElements, void *p) {
      return p ? new(p) ::TArtIC[nElements] : new ::TArtIC[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtIC(void *p) {
      delete ((::TArtIC*)p);
   }
   static void deleteArray_TArtIC(void *p) {
      delete [] ((::TArtIC*)p);
   }
   static void destruct_TArtIC(void *p) {
      typedef ::TArtIC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtIC

//______________________________________________________________________________
void TArtICPara::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtICPara.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtICPara::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtICPara::Class(),this);
   }
}

//______________________________________________________________________________
void TArtICPara::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtICPara.
      TClass *R__cl = ::TArtICPara::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detname", &detname);
      R__insp.InspectMember(detname, "detname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpl", &fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ch2mev[2]", ch2mev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zcoef[3]", zcoef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ionpair", &ionpair);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pedestal[12]", pedestal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map[12]", map);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chmap", (void*)&chmap);
      R__insp.InspectMember("map<TArtRIDFMap,int>", (void*)&chmap, "chmap.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtICPara(void *p) {
      return  p ? new(p) ::TArtICPara : new ::TArtICPara;
   }
   static void *newArray_TArtICPara(Long_t nElements, void *p) {
      return p ? new(p) ::TArtICPara[nElements] : new ::TArtICPara[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtICPara(void *p) {
      delete ((::TArtICPara*)p);
   }
   static void deleteArray_TArtICPara(void *p) {
      delete [] ((::TArtICPara*)p);
   }
   static void destruct_TArtICPara(void *p) {
      typedef ::TArtICPara current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtICPara

//______________________________________________________________________________
void TArtCalibPlastic::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtCalibPlastic.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtCalibPlastic::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtCalibPlastic::Class(),this);
   }
}

//______________________________________________________________________________
void TArtCalibPlastic::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtCalibPlastic.
      TClass *R__cl = ::TArtCalibPlastic::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPlasticArray", &fPlasticArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPlasticParaArray", (void*)&fPlasticParaArray);
      R__insp.InspectMember("vector<TArtPlasticPara*>", (void*)&fPlasticParaArray, "fPlasticParaArray.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sman", &sman);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtCalibPlastic(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibPlastic : new ::TArtCalibPlastic;
   }
   static void *newArray_TArtCalibPlastic(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibPlastic[nElements] : new ::TArtCalibPlastic[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtCalibPlastic(void *p) {
      delete ((::TArtCalibPlastic*)p);
   }
   static void deleteArray_TArtCalibPlastic(void *p) {
      delete [] ((::TArtCalibPlastic*)p);
   }
   static void destruct_TArtCalibPlastic(void *p) {
      typedef ::TArtCalibPlastic current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtCalibPlastic

//______________________________________________________________________________
void TArtPlastic::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtPlastic.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtPlastic::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtPlastic::Class(),this);
   }
}

//______________________________________________________________________________
void TArtPlastic::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtPlastic.
      TClass *R__cl = ::TArtPlastic::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zposition", &zposition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zoffset", &zoffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTLRaw", &fTLRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRRaw", &fTRRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQLRaw", &fQLRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQRRaw", &fQRRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTAveCal", &fTAveCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTLCal", &fTLCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRCal", &fTRCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTLSlw", &fTLSlw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRSlw", &fTRSlw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTAveSlw", &fTAveSlw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTAveSlwOff", &fTAveSlwOff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQLPed", &fQLPed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQRPed", &fQRPed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQAvePed", &fQAvePed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTDiff", &fTDiff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXpos", &fXpos);
      TArtDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtPlastic(void *p) {
      return  p ? new(p) ::TArtPlastic : new ::TArtPlastic;
   }
   static void *newArray_TArtPlastic(Long_t nElements, void *p) {
      return p ? new(p) ::TArtPlastic[nElements] : new ::TArtPlastic[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtPlastic(void *p) {
      delete ((::TArtPlastic*)p);
   }
   static void deleteArray_TArtPlastic(void *p) {
      delete [] ((::TArtPlastic*)p);
   }
   static void destruct_TArtPlastic(void *p) {
      typedef ::TArtPlastic current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtPlastic

//______________________________________________________________________________
void TArtPlasticPara::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtPlasticPara.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtPlasticPara::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtPlasticPara::Class(),this);
   }
}

//______________________________________________________________________________
void TArtPlasticPara::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtPlasticPara.
      TClass *R__cl = ::TArtPlasticPara::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detname", &detname);
      R__insp.InspectMember(detname, "detname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpl", &fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tcal_left", &tcal_left);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tcal_right", &tcal_right);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qped_left", &qped_left);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qped_right", &qped_right);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tslew_left_a", &tslew_left_a);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tslew_left_b", &tslew_left_b);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tslew_left_c", &tslew_left_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tslew_right_a", &tslew_right_a);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tslew_right_b", &tslew_right_b);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tslew_right_c", &tslew_right_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdc_underflow", &tdc_underflow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdc_overflow", &tdc_overflow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zoffset", &zoffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "toffset", &toffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xcal0", &xcal0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xcal1", &xcal1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xcal2", &xcal2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_tleft", &map_tleft);
      R__insp.InspectMember(map_tleft, "map_tleft.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_tright", &map_tright);
      R__insp.InspectMember(map_tright, "map_tright.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_qleft", &map_qleft);
      R__insp.InspectMember(map_qleft, "map_qleft.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_qright", &map_qright);
      R__insp.InspectMember(map_qright, "map_qright.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtPlasticPara(void *p) {
      return  p ? new(p) ::TArtPlasticPara : new ::TArtPlasticPara;
   }
   static void *newArray_TArtPlasticPara(Long_t nElements, void *p) {
      return p ? new(p) ::TArtPlasticPara[nElements] : new ::TArtPlasticPara[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtPlasticPara(void *p) {
      delete ((::TArtPlasticPara*)p);
   }
   static void deleteArray_TArtPlasticPara(void *p) {
      delete [] ((::TArtPlasticPara*)p);
   }
   static void destruct_TArtPlasticPara(void *p) {
      typedef ::TArtPlasticPara current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtPlasticPara

//______________________________________________________________________________
void TArtCalibPPAC::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtCalibPPAC.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtCalibPPAC::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtCalibPPAC::Class(),this);
   }
}

//______________________________________________________________________________
void TArtCalibPPAC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtCalibPPAC.
      TClass *R__cl = ::TArtCalibPPAC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPPACArray", &fPPACArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPPACParaArray", (void*)&fPPACParaArray);
      R__insp.InspectMember("vector<TArtPPACPara*>", (void*)&fPPACParaArray, "fPPACParaArray.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sman", &sman);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtCalibPPAC(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibPPAC : new ::TArtCalibPPAC;
   }
   static void *newArray_TArtCalibPPAC(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibPPAC[nElements] : new ::TArtCalibPPAC[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtCalibPPAC(void *p) {
      delete ((::TArtCalibPPAC*)p);
   }
   static void deleteArray_TArtCalibPPAC(void *p) {
      delete [] ((::TArtCalibPPAC*)p);
   }
   static void destruct_TArtCalibPPAC(void *p) {
      typedef ::TArtCalibPPAC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtCalibPPAC

//______________________________________________________________________________
void TArtPPAC::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtPPAC.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtPPAC::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtPPAC::Class(),this);
   }
}

//______________________________________________________________________________
void TArtPPAC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtPPAC.
      TClass *R__cl = ::TArtPPAC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xzpos", &xzpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yzpos", &yzpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTX1Raw", &fTX1Raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTX2Raw", &fTX2Raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTY1Raw", &fTY1Raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTY2Raw", &fTY2Raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTARaw", &fTARaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQX1Raw", &fQX1Raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQX2Raw", &fQX2Raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQY1Raw", &fQY1Raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQY2Raw", &fQY2Raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQARaw", &fQARaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTX1", &fTX1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTX2", &fTX2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTY1", &fTY1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTY2", &fTY2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTA", &fTA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTSumX", &fTSumX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTSumY", &fTSumY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTDiffX", &fTDiffX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTDiffY", &fTDiffY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFiredX", &fFiredX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFiredY", &fFiredY);
      TArtDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtPPAC(void *p) {
      return  p ? new(p) ::TArtPPAC : new ::TArtPPAC;
   }
   static void *newArray_TArtPPAC(Long_t nElements, void *p) {
      return p ? new(p) ::TArtPPAC[nElements] : new ::TArtPPAC[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtPPAC(void *p) {
      delete ((::TArtPPAC*)p);
   }
   static void deleteArray_TArtPPAC(void *p) {
      delete [] ((::TArtPPAC*)p);
   }
   static void destruct_TArtPPAC(void *p) {
      typedef ::TArtPPAC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtPPAC

//______________________________________________________________________________
void TArtPPACPara::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtPPACPara.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtPPACPara::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtPPACPara::Class(),this);
   }
}

//______________________________________________________________________________
void TArtPPACPara::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtPPACPara.
      TClass *R__cl = ::TArtPPACPara::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detname", &detname);
      R__insp.InspectMember(detname, "detname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpl", &fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ch2ns_a", &ch2ns_a);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ch2ns_x1", &ch2ns_x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ch2ns_y1", &ch2ns_y1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ch2ns_x2", &ch2ns_x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ch2ns_y2", &ch2ns_y2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfactor", &xfactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yfactor", &yfactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xoffset", &xoffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yoffset", &yoffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xns_off", &xns_off);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yns_off", &yns_off);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xpos_off", &xpos_off);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ypos_off", &ypos_off);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xzpos", &xzpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yzpos", &yzpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdc_underflow", &tdc_underflow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdc_overflow", &tdc_overflow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "txsum_min", &txsum_min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "txsum_max", &txsum_max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tysum_min", &tysum_min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tysum_max", &tysum_max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_tx1", &map_tx1);
      R__insp.InspectMember(map_tx1, "map_tx1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_tx2", &map_tx2);
      R__insp.InspectMember(map_tx2, "map_tx2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_ty1", &map_ty1);
      R__insp.InspectMember(map_ty1, "map_ty1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_ty2", &map_ty2);
      R__insp.InspectMember(map_ty2, "map_ty2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_ta", &map_ta);
      R__insp.InspectMember(map_ta, "map_ta.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_qx1", &map_qx1);
      R__insp.InspectMember(map_qx1, "map_qx1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_qx2", &map_qx2);
      R__insp.InspectMember(map_qx2, "map_qx2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_qy1", &map_qy1);
      R__insp.InspectMember(map_qy1, "map_qy1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_qy2", &map_qy2);
      R__insp.InspectMember(map_qy2, "map_qy2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_qa", &map_qa);
      R__insp.InspectMember(map_qa, "map_qa.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtPPACPara(void *p) {
      return  p ? new(p) ::TArtPPACPara : new ::TArtPPACPara;
   }
   static void *newArray_TArtPPACPara(Long_t nElements, void *p) {
      return p ? new(p) ::TArtPPACPara[nElements] : new ::TArtPPACPara[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtPPACPara(void *p) {
      delete ((::TArtPPACPara*)p);
   }
   static void deleteArray_TArtPPACPara(void *p) {
      delete [] ((::TArtPPACPara*)p);
   }
   static void destruct_TArtPPACPara(void *p) {
      typedef ::TArtPPACPara current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtPPACPara

//______________________________________________________________________________
void TArtCalibCoin::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtCalibCoin.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtCalibCoin::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtCalibCoin::Class(),this);
   }
}

//______________________________________________________________________________
void TArtCalibCoin::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtCalibCoin.
      TClass *R__cl = ::TArtCalibCoin::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sman", &sman);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "val", &val);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtCalibCoin(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibCoin : new ::TArtCalibCoin;
   }
   static void *newArray_TArtCalibCoin(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibCoin[nElements] : new ::TArtCalibCoin[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtCalibCoin(void *p) {
      delete ((::TArtCalibCoin*)p);
   }
   static void deleteArray_TArtCalibCoin(void *p) {
      delete [] ((::TArtCalibCoin*)p);
   }
   static void destruct_TArtCalibCoin(void *p) {
      typedef ::TArtCalibCoin current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtCalibCoin

//______________________________________________________________________________
void TArtBigRIPSParameters::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtBigRIPSParameters.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtBigRIPSParameters::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtBigRIPSParameters::Class(),this);
   }
}

//______________________________________________________________________________
void TArtBigRIPSParameters::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtBigRIPSParameters.
      TClass *R__cl = ::TArtBigRIPSParameters::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppac_pmap", (void*)&ppac_pmap);
      R__insp.InspectMember("map<TArtRIDFMap,TArtPPACPara*>", (void*)&ppac_pmap, "ppac_pmap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pla_pmap", (void*)&pla_pmap);
      R__insp.InspectMember("map<TArtRIDFMap,TArtPlasticPara*>", (void*)&pla_pmap, "pla_pmap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pla_name_pmap", (void*)&pla_name_pmap);
      R__insp.InspectMember("map<TString,TArtPlasticPara*>", (void*)&pla_name_pmap, "pla_name_pmap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof_pmap", (void*)&tof_pmap);
      R__insp.InspectMember("map<TString,TArtTOFPara*>", (void*)&tof_pmap, "tof_pmap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ic_pmap", (void*)&ic_pmap);
      R__insp.InspectMember("map<TArtRIDFMap,TArtICPara*>", (void*)&ic_pmap, "ic_pmap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ge_pmap", (void*)&ge_pmap);
      R__insp.InspectMember("map<TArtRIDFMap,TArtGePara*>", (void*)&ge_pmap, "ge_pmap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "si_pmap", (void*)&si_pmap);
      R__insp.InspectMember("map<TArtRIDFMap,TArtSiPara*>", (void*)&si_pmap, "si_pmap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tke_pmap", (void*)&tke_pmap);
      R__insp.InspectMember("map<TArtRIDFMap,TArtTKEPara*>", (void*)&tke_pmap, "tke_pmap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpl_pmap", (void*)&fpl_pmap);
      R__insp.InspectMember("map<int,TArtFocalPlanePara*>", (void*)&fpl_pmap, "fpl_pmap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*listOfPPACPara", &listOfPPACPara);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*listOfPlasticPara", &listOfPlasticPara);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*listOfICPara", &listOfICPara);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*listOfGePara", &listOfGePara);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*listOfSiPara", &listOfSiPara);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*listOfTKEPara", &listOfTKEPara);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*listOfFocalPlanePara", &listOfFocalPlanePara);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*listOfRIPSPara", &listOfRIPSPara);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*listOfTOFPara", &listOfTOFPara);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*listOfBeamPara", &listOfBeamPara);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dipoles", (void*)&dipoles);
      R__insp.InspectMember("vector<Dipole>", (void*)&dipoles, "dipoles.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtBigRIPSParameters(void *p) {
      return  p ? new(p) ::TArtBigRIPSParameters : new ::TArtBigRIPSParameters;
   }
   static void *newArray_TArtBigRIPSParameters(Long_t nElements, void *p) {
      return p ? new(p) ::TArtBigRIPSParameters[nElements] : new ::TArtBigRIPSParameters[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtBigRIPSParameters(void *p) {
      delete ((::TArtBigRIPSParameters*)p);
   }
   static void deleteArray_TArtBigRIPSParameters(void *p) {
      delete [] ((::TArtBigRIPSParameters*)p);
   }
   static void destruct_TArtBigRIPSParameters(void *p) {
      typedef ::TArtBigRIPSParameters current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtBigRIPSParameters

//______________________________________________________________________________
void TArtCalibFocalPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtCalibFocalPlane.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtCalibFocalPlane::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtCalibFocalPlane::Class(),this);
   }
}

//______________________________________________________________________________
void TArtCalibFocalPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtCalibFocalPlane.
      TClass *R__cl = ::TArtCalibFocalPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFocalPlaneArray", &fFocalPlaneArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPPACArrayBuffer", (void*)&fPPACArrayBuffer);
      R__insp.InspectMember("vector<std::vector<TArtPPAC*>*>", (void*)&fPPACArrayBuffer, "fPPACArrayBuffer.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sman", &sman);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtCalibFocalPlane(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibFocalPlane : new ::TArtCalibFocalPlane;
   }
   static void *newArray_TArtCalibFocalPlane(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibFocalPlane[nElements] : new ::TArtCalibFocalPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtCalibFocalPlane(void *p) {
      delete ((::TArtCalibFocalPlane*)p);
   }
   static void deleteArray_TArtCalibFocalPlane(void *p) {
      delete [] ((::TArtCalibFocalPlane*)p);
   }
   static void destruct_TArtCalibFocalPlane(void *p) {
      typedef ::TArtCalibFocalPlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtCalibFocalPlane

//______________________________________________________________________________
void TArtFocalPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtFocalPlane.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtFocalPlane::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtFocalPlane::Class(),this);
   }
}

//______________________________________________________________________________
void TArtFocalPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtFocalPlane.
      TClass *R__cl = ::TArtFocalPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "opt_vector", &opt_vector);
      R__insp.InspectMember(opt_vector, "opt_vector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "X", &X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "A", &A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Y", &Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "B", &B);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nfired_ppacx", &nfired_ppacx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nfired_ppacy", &nfired_ppacy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zpos", &zpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zpos_offset", &zpos_offset);
      TArtDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtFocalPlane(void *p) {
      return  p ? new(p) ::TArtFocalPlane : new ::TArtFocalPlane;
   }
   static void *newArray_TArtFocalPlane(Long_t nElements, void *p) {
      return p ? new(p) ::TArtFocalPlane[nElements] : new ::TArtFocalPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtFocalPlane(void *p) {
      delete ((::TArtFocalPlane*)p);
   }
   static void deleteArray_TArtFocalPlane(void *p) {
      delete [] ((::TArtFocalPlane*)p);
   }
   static void destruct_TArtFocalPlane(void *p) {
      typedef ::TArtFocalPlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtFocalPlane

//______________________________________________________________________________
void TArtFocalPlanePara::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtFocalPlanePara.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtFocalPlanePara::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtFocalPlanePara::Class(),this);
   }
}

//______________________________________________________________________________
void TArtFocalPlanePara::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtFocalPlanePara.
      TClass *R__cl = ::TArtFocalPlanePara::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpl", &fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zpos", &zpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zpos_offset", &zpos_offset);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtFocalPlanePara(void *p) {
      return  p ? new(p) ::TArtFocalPlanePara : new ::TArtFocalPlanePara;
   }
   static void *newArray_TArtFocalPlanePara(Long_t nElements, void *p) {
      return p ? new(p) ::TArtFocalPlanePara[nElements] : new ::TArtFocalPlanePara[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtFocalPlanePara(void *p) {
      delete ((::TArtFocalPlanePara*)p);
   }
   static void deleteArray_TArtFocalPlanePara(void *p) {
      delete [] ((::TArtFocalPlanePara*)p);
   }
   static void destruct_TArtFocalPlanePara(void *p) {
      typedef ::TArtFocalPlanePara current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtFocalPlanePara

//______________________________________________________________________________
void TArtRecoRIPS::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtRecoRIPS.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtRecoRIPS::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtRecoRIPS::Class(),this);
   }
}

//______________________________________________________________________________
void TArtRecoRIPS::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtRecoRIPS.
      TClass *R__cl = ::TArtRecoRIPS::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSetDipole", &isSetDipole);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRIPSArray", &fRIPSArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sman", &sman);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpstreamFplArrayBuffer", (void*)&fUpstreamFplArrayBuffer);
      R__insp.InspectMember("vector<TArtFocalPlane*>", (void*)&fUpstreamFplArrayBuffer, "fUpstreamFplArrayBuffer.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDownstreamFplArrayBuffer", (void*)&fDownstreamFplArrayBuffer);
      R__insp.InspectMember("vector<TArtFocalPlane*>", (void*)&fDownstreamFplArrayBuffer, "fDownstreamFplArrayBuffer.", false);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtRecoRIPS(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtRecoRIPS : new ::TArtRecoRIPS;
   }
   static void *newArray_TArtRecoRIPS(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtRecoRIPS[nElements] : new ::TArtRecoRIPS[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtRecoRIPS(void *p) {
      delete ((::TArtRecoRIPS*)p);
   }
   static void deleteArray_TArtRecoRIPS(void *p) {
      delete [] ((::TArtRecoRIPS*)p);
   }
   static void destruct_TArtRecoRIPS(void *p) {
      typedef ::TArtRecoRIPS current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtRecoRIPS

//______________________________________________________________________________
void TArtRIPS::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtRIPS.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtRIPS::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtRIPS::Class(),this);
   }
}

//______________________________________________________________________________
void TArtRIPS::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtRIPS.
      TClass *R__cl = ::TArtRIPS::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "upstream_fpl", &upstream_fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "downstream_fpl", &downstream_fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "center_brho", &center_brho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "brho", &brho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "length", &length);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matrix", &matrix);
      R__insp.InspectMember(matrix, "matrix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "delta", &delta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "angle", &angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dipolename", &dipolename);
      R__insp.InspectMember(dipolename, "dipolename.");
      TArtDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtRIPS(void *p) {
      return  p ? new(p) ::TArtRIPS : new ::TArtRIPS;
   }
   static void *newArray_TArtRIPS(Long_t nElements, void *p) {
      return p ? new(p) ::TArtRIPS[nElements] : new ::TArtRIPS[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtRIPS(void *p) {
      delete ((::TArtRIPS*)p);
   }
   static void deleteArray_TArtRIPS(void *p) {
      delete [] ((::TArtRIPS*)p);
   }
   static void destruct_TArtRIPS(void *p) {
      typedef ::TArtRIPS current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtRIPS

//______________________________________________________________________________
void TArtRIPSPara::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtRIPSPara.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtRIPSPara::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtRIPSPara::Class(),this);
   }
}

//______________________________________________________________________________
void TArtRIPSPara::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtRIPSPara.
      TClass *R__cl = ::TArtRIPSPara::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detname", &detname);
      R__insp.InspectMember(detname, "detname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dipole_name", &dipole_name);
      R__insp.InspectMember(dipole_name, "dipole_name.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "up_fpl", &up_fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "down_fpl", &down_fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "brho", &brho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matrix", &matrix);
      R__insp.InspectMember(matrix, "matrix.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtRIPSPara(void *p) {
      return  p ? new(p) ::TArtRIPSPara : new ::TArtRIPSPara;
   }
   static void *newArray_TArtRIPSPara(Long_t nElements, void *p) {
      return p ? new(p) ::TArtRIPSPara[nElements] : new ::TArtRIPSPara[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtRIPSPara(void *p) {
      delete ((::TArtRIPSPara*)p);
   }
   static void deleteArray_TArtRIPSPara(void *p) {
      delete [] ((::TArtRIPSPara*)p);
   }
   static void destruct_TArtRIPSPara(void *p) {
      typedef ::TArtRIPSPara current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtRIPSPara

//______________________________________________________________________________
void TArtRecoTOF::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtRecoTOF.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtRecoTOF::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtRecoTOF::Class(),this);
   }
}

//______________________________________________________________________________
void TArtRecoTOF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtRecoTOF.
      TClass *R__cl = ::TArtRecoTOF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTOFArray", &fTOFArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pla_array", &pla_array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sman", &sman);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpstreamPlaArrayBuffer", (void*)&fUpstreamPlaArrayBuffer);
      R__insp.InspectMember("vector<TArtPlastic*>", (void*)&fUpstreamPlaArrayBuffer, "fUpstreamPlaArrayBuffer.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDownstreamPlaArrayBuffer", (void*)&fDownstreamPlaArrayBuffer);
      R__insp.InspectMember("vector<TArtPlastic*>", (void*)&fDownstreamPlaArrayBuffer, "fDownstreamPlaArrayBuffer.", false);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtRecoTOF(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtRecoTOF : new ::TArtRecoTOF;
   }
   static void *newArray_TArtRecoTOF(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtRecoTOF[nElements] : new ::TArtRecoTOF[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtRecoTOF(void *p) {
      delete ((::TArtRecoTOF*)p);
   }
   static void deleteArray_TArtRecoTOF(void *p) {
      delete [] ((::TArtRecoTOF*)p);
   }
   static void destruct_TArtRecoTOF(void *p) {
      typedef ::TArtRecoTOF current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtRecoTOF

//______________________________________________________________________________
void TArtTOF::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtTOF.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtTOF::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtTOF::Class(),this);
   }
}

//______________________________________________________________________________
void TArtTOF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtTOF.
      TClass *R__cl = ::TArtTOF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof", &tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clight", &clight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "length", &length);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ulength", &ulength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dlength", &dlength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "upstream_plname", &upstream_plname);
      R__insp.InspectMember(upstream_plname, "upstream_plname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "downstream_plname", &downstream_plname);
      R__insp.InspectMember(downstream_plname, "downstream_plname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "upstream_plfpl", &upstream_plfpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "downstream_plfpl", &downstream_plfpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time_offset", &time_offset);
      TArtDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtTOF(void *p) {
      return  p ? new(p) ::TArtTOF : new ::TArtTOF;
   }
   static void *newArray_TArtTOF(Long_t nElements, void *p) {
      return p ? new(p) ::TArtTOF[nElements] : new ::TArtTOF[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtTOF(void *p) {
      delete ((::TArtTOF*)p);
   }
   static void deleteArray_TArtTOF(void *p) {
      delete [] ((::TArtTOF*)p);
   }
   static void destruct_TArtTOF(void *p) {
      typedef ::TArtTOF current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtTOF

//______________________________________________________________________________
void TArtTOFPara::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtTOFPara.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtTOFPara::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtTOFPara::Class(),this);
   }
}

//______________________________________________________________________________
void TArtTOFPara::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtTOFPara.
      TClass *R__cl = ::TArtTOFPara::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detname", &detname);
      R__insp.InspectMember(detname, "detname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "upstream_plname", &upstream_plname);
      R__insp.InspectMember(upstream_plname, "upstream_plname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "downstream_plname", &downstream_plname);
      R__insp.InspectMember(downstream_plname, "downstream_plname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset", &offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "middle_fpl", &middle_fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "upstream_fpl", &upstream_fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "downstream_fpl", &downstream_fpl);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtTOFPara(void *p) {
      return  p ? new(p) ::TArtTOFPara : new ::TArtTOFPara;
   }
   static void *newArray_TArtTOFPara(Long_t nElements, void *p) {
      return p ? new(p) ::TArtTOFPara[nElements] : new ::TArtTOFPara[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtTOFPara(void *p) {
      delete ((::TArtTOFPara*)p);
   }
   static void deleteArray_TArtTOFPara(void *p) {
      delete [] ((::TArtTOFPara*)p);
   }
   static void destruct_TArtTOFPara(void *p) {
      typedef ::TArtTOFPara current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtTOFPara

//______________________________________________________________________________
void TArtRecoBeam::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtRecoBeam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtRecoBeam::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtRecoBeam::Class(),this);
   }
}

//______________________________________________________________________________
void TArtRecoBeam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtRecoBeam.
      TClass *R__cl = ::TArtRecoBeam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBeamArray", &fBeamArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sman", &sman);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clight", &clight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mnucleon", &mnucleon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rips_array", &rips_array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tof_array", &tof_array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ic_array", &ic_array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpstreamRIPSArrayBuffer", (void*)&fUpstreamRIPSArrayBuffer);
      R__insp.InspectMember("vector<TArtRIPS*>", (void*)&fUpstreamRIPSArrayBuffer, "fUpstreamRIPSArrayBuffer.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDownstreamRIPSArrayBuffer", (void*)&fDownstreamRIPSArrayBuffer);
      R__insp.InspectMember("vector<TArtRIPS*>", (void*)&fDownstreamRIPSArrayBuffer, "fDownstreamRIPSArrayBuffer.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFArrayBuffer", (void*)&fTOFArrayBuffer);
      R__insp.InspectMember("vector<TArtTOF*>", (void*)&fTOFArrayBuffer, "fTOFArrayBuffer.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fICArrayBuffer", (void*)&fICArrayBuffer);
      R__insp.InspectMember("vector<TArtIC*>", (void*)&fICArrayBuffer, "fICArrayBuffer.", false);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtRecoBeam(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtRecoBeam : new ::TArtRecoBeam;
   }
   static void *newArray_TArtRecoBeam(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtRecoBeam[nElements] : new ::TArtRecoBeam[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtRecoBeam(void *p) {
      delete ((::TArtRecoBeam*)p);
   }
   static void deleteArray_TArtRecoBeam(void *p) {
      delete [] ((::TArtRecoBeam*)p);
   }
   static void destruct_TArtRecoBeam(void *p) {
      typedef ::TArtRecoBeam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtRecoBeam

//______________________________________________________________________________
void TArtBeam::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtBeam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtBeam::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtBeam::Class(),this);
   }
}

//______________________________________________________________________________
void TArtBeam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtBeam.
      TClass *R__cl = ::TArtBeam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "brho", &brho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aoq", &aoq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zet", &zet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta", &beta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clight", &clight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mnucleon", &mnucleon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrips", &nrips);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ripsname[2]", ripsname);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofname", &tofname);
      R__insp.InspectMember(tofname, "tofname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "icname", &icname);
      R__insp.InspectMember(icname, "icname.");
      TArtDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtBeam(void *p) {
      return  p ? new(p) ::TArtBeam : new ::TArtBeam;
   }
   static void *newArray_TArtBeam(Long_t nElements, void *p) {
      return p ? new(p) ::TArtBeam[nElements] : new ::TArtBeam[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtBeam(void *p) {
      delete ((::TArtBeam*)p);
   }
   static void deleteArray_TArtBeam(void *p) {
      delete [] ((::TArtBeam*)p);
   }
   static void destruct_TArtBeam(void *p) {
      typedef ::TArtBeam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtBeam

//______________________________________________________________________________
void TArtBeamPara::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtBeamPara.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtBeamPara::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtBeamPara::Class(),this);
   }
}

//______________________________________________________________________________
void TArtBeamPara::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtBeamPara.
      TClass *R__cl = ::TArtBeamPara::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrips", &nrips);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detname", &detname);
      R__insp.InspectMember(detname, "detname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "upstream_rips_name", &upstream_rips_name);
      R__insp.InspectMember(upstream_rips_name, "upstream_rips_name.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "downstream_rips_name", &downstream_rips_name);
      R__insp.InspectMember(downstream_rips_name, "downstream_rips_name.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof_name", &tof_name);
      R__insp.InspectMember(tof_name, "tof_name.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltae_name", &deltae_name);
      R__insp.InspectMember(deltae_name, "deltae_name.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtBeamPara(void *p) {
      return  p ? new(p) ::TArtBeamPara : new ::TArtBeamPara;
   }
   static void *newArray_TArtBeamPara(Long_t nElements, void *p) {
      return p ? new(p) ::TArtBeamPara[nElements] : new ::TArtBeamPara[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtBeamPara(void *p) {
      delete ((::TArtBeamPara*)p);
   }
   static void deleteArray_TArtBeamPara(void *p) {
      delete [] ((::TArtBeamPara*)p);
   }
   static void destruct_TArtBeamPara(void *p) {
      typedef ::TArtBeamPara current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtBeamPara

namespace ROOTDict {
   void maplETArtRIDFMapcOTArtGeParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETArtRIDFMapcOTArtGeParamUgR_Dictionary();
   static void *new_maplETArtRIDFMapcOTArtGeParamUgR(void *p = 0);
   static void *newArray_maplETArtRIDFMapcOTArtGeParamUgR(Long_t size, void *p);
   static void delete_maplETArtRIDFMapcOTArtGeParamUgR(void *p);
   static void deleteArray_maplETArtRIDFMapcOTArtGeParamUgR(void *p);
   static void destruct_maplETArtRIDFMapcOTArtGeParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TArtRIDFMap,TArtGePara*>*)
   {
      map<TArtRIDFMap,TArtGePara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TArtRIDFMap,TArtGePara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TArtRIDFMap,TArtGePara*>", -2, "prec_stl/map", 63,
                  typeid(map<TArtRIDFMap,TArtGePara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETArtRIDFMapcOTArtGeParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TArtRIDFMap,TArtGePara*>) );
      instance.SetNew(&new_maplETArtRIDFMapcOTArtGeParamUgR);
      instance.SetNewArray(&newArray_maplETArtRIDFMapcOTArtGeParamUgR);
      instance.SetDelete(&delete_maplETArtRIDFMapcOTArtGeParamUgR);
      instance.SetDeleteArray(&deleteArray_maplETArtRIDFMapcOTArtGeParamUgR);
      instance.SetDestructor(&destruct_maplETArtRIDFMapcOTArtGeParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TArtRIDFMap,TArtGePara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtGePara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETArtRIDFMapcOTArtGeParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtGePara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETArtRIDFMapcOTArtGeParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtGePara*> : new map<TArtRIDFMap,TArtGePara*>;
   }
   static void *newArray_maplETArtRIDFMapcOTArtGeParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtGePara*>[nElements] : new map<TArtRIDFMap,TArtGePara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETArtRIDFMapcOTArtGeParamUgR(void *p) {
      delete ((map<TArtRIDFMap,TArtGePara*>*)p);
   }
   static void deleteArray_maplETArtRIDFMapcOTArtGeParamUgR(void *p) {
      delete [] ((map<TArtRIDFMap,TArtGePara*>*)p);
   }
   static void destruct_maplETArtRIDFMapcOTArtGeParamUgR(void *p) {
      typedef map<TArtRIDFMap,TArtGePara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TArtRIDFMap,TArtGePara*>

namespace ROOTDict {
   void maplETArtRIDFMapcOTArtICParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETArtRIDFMapcOTArtICParamUgR_Dictionary();
   static void *new_maplETArtRIDFMapcOTArtICParamUgR(void *p = 0);
   static void *newArray_maplETArtRIDFMapcOTArtICParamUgR(Long_t size, void *p);
   static void delete_maplETArtRIDFMapcOTArtICParamUgR(void *p);
   static void deleteArray_maplETArtRIDFMapcOTArtICParamUgR(void *p);
   static void destruct_maplETArtRIDFMapcOTArtICParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TArtRIDFMap,TArtICPara*>*)
   {
      map<TArtRIDFMap,TArtICPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TArtRIDFMap,TArtICPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TArtRIDFMap,TArtICPara*>", -2, "prec_stl/map", 63,
                  typeid(map<TArtRIDFMap,TArtICPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETArtRIDFMapcOTArtICParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TArtRIDFMap,TArtICPara*>) );
      instance.SetNew(&new_maplETArtRIDFMapcOTArtICParamUgR);
      instance.SetNewArray(&newArray_maplETArtRIDFMapcOTArtICParamUgR);
      instance.SetDelete(&delete_maplETArtRIDFMapcOTArtICParamUgR);
      instance.SetDeleteArray(&deleteArray_maplETArtRIDFMapcOTArtICParamUgR);
      instance.SetDestructor(&destruct_maplETArtRIDFMapcOTArtICParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TArtRIDFMap,TArtICPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtICPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETArtRIDFMapcOTArtICParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtICPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETArtRIDFMapcOTArtICParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtICPara*> : new map<TArtRIDFMap,TArtICPara*>;
   }
   static void *newArray_maplETArtRIDFMapcOTArtICParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtICPara*>[nElements] : new map<TArtRIDFMap,TArtICPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETArtRIDFMapcOTArtICParamUgR(void *p) {
      delete ((map<TArtRIDFMap,TArtICPara*>*)p);
   }
   static void deleteArray_maplETArtRIDFMapcOTArtICParamUgR(void *p) {
      delete [] ((map<TArtRIDFMap,TArtICPara*>*)p);
   }
   static void destruct_maplETArtRIDFMapcOTArtICParamUgR(void *p) {
      typedef map<TArtRIDFMap,TArtICPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TArtRIDFMap,TArtICPara*>

namespace ROOTDict {
   void maplETArtRIDFMapcOTArtPPACParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETArtRIDFMapcOTArtPPACParamUgR_Dictionary();
   static void *new_maplETArtRIDFMapcOTArtPPACParamUgR(void *p = 0);
   static void *newArray_maplETArtRIDFMapcOTArtPPACParamUgR(Long_t size, void *p);
   static void delete_maplETArtRIDFMapcOTArtPPACParamUgR(void *p);
   static void deleteArray_maplETArtRIDFMapcOTArtPPACParamUgR(void *p);
   static void destruct_maplETArtRIDFMapcOTArtPPACParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TArtRIDFMap,TArtPPACPara*>*)
   {
      map<TArtRIDFMap,TArtPPACPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TArtRIDFMap,TArtPPACPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TArtRIDFMap,TArtPPACPara*>", -2, "prec_stl/map", 63,
                  typeid(map<TArtRIDFMap,TArtPPACPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETArtRIDFMapcOTArtPPACParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TArtRIDFMap,TArtPPACPara*>) );
      instance.SetNew(&new_maplETArtRIDFMapcOTArtPPACParamUgR);
      instance.SetNewArray(&newArray_maplETArtRIDFMapcOTArtPPACParamUgR);
      instance.SetDelete(&delete_maplETArtRIDFMapcOTArtPPACParamUgR);
      instance.SetDeleteArray(&deleteArray_maplETArtRIDFMapcOTArtPPACParamUgR);
      instance.SetDestructor(&destruct_maplETArtRIDFMapcOTArtPPACParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TArtRIDFMap,TArtPPACPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtPPACPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETArtRIDFMapcOTArtPPACParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtPPACPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETArtRIDFMapcOTArtPPACParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtPPACPara*> : new map<TArtRIDFMap,TArtPPACPara*>;
   }
   static void *newArray_maplETArtRIDFMapcOTArtPPACParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtPPACPara*>[nElements] : new map<TArtRIDFMap,TArtPPACPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETArtRIDFMapcOTArtPPACParamUgR(void *p) {
      delete ((map<TArtRIDFMap,TArtPPACPara*>*)p);
   }
   static void deleteArray_maplETArtRIDFMapcOTArtPPACParamUgR(void *p) {
      delete [] ((map<TArtRIDFMap,TArtPPACPara*>*)p);
   }
   static void destruct_maplETArtRIDFMapcOTArtPPACParamUgR(void *p) {
      typedef map<TArtRIDFMap,TArtPPACPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TArtRIDFMap,TArtPPACPara*>

namespace ROOTDict {
   void maplETArtRIDFMapcOTArtPlasticParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETArtRIDFMapcOTArtPlasticParamUgR_Dictionary();
   static void *new_maplETArtRIDFMapcOTArtPlasticParamUgR(void *p = 0);
   static void *newArray_maplETArtRIDFMapcOTArtPlasticParamUgR(Long_t size, void *p);
   static void delete_maplETArtRIDFMapcOTArtPlasticParamUgR(void *p);
   static void deleteArray_maplETArtRIDFMapcOTArtPlasticParamUgR(void *p);
   static void destruct_maplETArtRIDFMapcOTArtPlasticParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TArtRIDFMap,TArtPlasticPara*>*)
   {
      map<TArtRIDFMap,TArtPlasticPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TArtRIDFMap,TArtPlasticPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TArtRIDFMap,TArtPlasticPara*>", -2, "prec_stl/map", 63,
                  typeid(map<TArtRIDFMap,TArtPlasticPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETArtRIDFMapcOTArtPlasticParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TArtRIDFMap,TArtPlasticPara*>) );
      instance.SetNew(&new_maplETArtRIDFMapcOTArtPlasticParamUgR);
      instance.SetNewArray(&newArray_maplETArtRIDFMapcOTArtPlasticParamUgR);
      instance.SetDelete(&delete_maplETArtRIDFMapcOTArtPlasticParamUgR);
      instance.SetDeleteArray(&deleteArray_maplETArtRIDFMapcOTArtPlasticParamUgR);
      instance.SetDestructor(&destruct_maplETArtRIDFMapcOTArtPlasticParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TArtRIDFMap,TArtPlasticPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtPlasticPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETArtRIDFMapcOTArtPlasticParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtPlasticPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETArtRIDFMapcOTArtPlasticParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtPlasticPara*> : new map<TArtRIDFMap,TArtPlasticPara*>;
   }
   static void *newArray_maplETArtRIDFMapcOTArtPlasticParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtPlasticPara*>[nElements] : new map<TArtRIDFMap,TArtPlasticPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETArtRIDFMapcOTArtPlasticParamUgR(void *p) {
      delete ((map<TArtRIDFMap,TArtPlasticPara*>*)p);
   }
   static void deleteArray_maplETArtRIDFMapcOTArtPlasticParamUgR(void *p) {
      delete [] ((map<TArtRIDFMap,TArtPlasticPara*>*)p);
   }
   static void destruct_maplETArtRIDFMapcOTArtPlasticParamUgR(void *p) {
      typedef map<TArtRIDFMap,TArtPlasticPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TArtRIDFMap,TArtPlasticPara*>

namespace ROOTDict {
   void maplETArtRIDFMapcOTArtSiParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETArtRIDFMapcOTArtSiParamUgR_Dictionary();
   static void *new_maplETArtRIDFMapcOTArtSiParamUgR(void *p = 0);
   static void *newArray_maplETArtRIDFMapcOTArtSiParamUgR(Long_t size, void *p);
   static void delete_maplETArtRIDFMapcOTArtSiParamUgR(void *p);
   static void deleteArray_maplETArtRIDFMapcOTArtSiParamUgR(void *p);
   static void destruct_maplETArtRIDFMapcOTArtSiParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TArtRIDFMap,TArtSiPara*>*)
   {
      map<TArtRIDFMap,TArtSiPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TArtRIDFMap,TArtSiPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TArtRIDFMap,TArtSiPara*>", -2, "prec_stl/map", 63,
                  typeid(map<TArtRIDFMap,TArtSiPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETArtRIDFMapcOTArtSiParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TArtRIDFMap,TArtSiPara*>) );
      instance.SetNew(&new_maplETArtRIDFMapcOTArtSiParamUgR);
      instance.SetNewArray(&newArray_maplETArtRIDFMapcOTArtSiParamUgR);
      instance.SetDelete(&delete_maplETArtRIDFMapcOTArtSiParamUgR);
      instance.SetDeleteArray(&deleteArray_maplETArtRIDFMapcOTArtSiParamUgR);
      instance.SetDestructor(&destruct_maplETArtRIDFMapcOTArtSiParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TArtRIDFMap,TArtSiPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtSiPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETArtRIDFMapcOTArtSiParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtSiPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETArtRIDFMapcOTArtSiParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtSiPara*> : new map<TArtRIDFMap,TArtSiPara*>;
   }
   static void *newArray_maplETArtRIDFMapcOTArtSiParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtSiPara*>[nElements] : new map<TArtRIDFMap,TArtSiPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETArtRIDFMapcOTArtSiParamUgR(void *p) {
      delete ((map<TArtRIDFMap,TArtSiPara*>*)p);
   }
   static void deleteArray_maplETArtRIDFMapcOTArtSiParamUgR(void *p) {
      delete [] ((map<TArtRIDFMap,TArtSiPara*>*)p);
   }
   static void destruct_maplETArtRIDFMapcOTArtSiParamUgR(void *p) {
      typedef map<TArtRIDFMap,TArtSiPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TArtRIDFMap,TArtSiPara*>

namespace ROOTDict {
   void maplETArtRIDFMapcOTArtTKEParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETArtRIDFMapcOTArtTKEParamUgR_Dictionary();
   static void *new_maplETArtRIDFMapcOTArtTKEParamUgR(void *p = 0);
   static void *newArray_maplETArtRIDFMapcOTArtTKEParamUgR(Long_t size, void *p);
   static void delete_maplETArtRIDFMapcOTArtTKEParamUgR(void *p);
   static void deleteArray_maplETArtRIDFMapcOTArtTKEParamUgR(void *p);
   static void destruct_maplETArtRIDFMapcOTArtTKEParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TArtRIDFMap,TArtTKEPara*>*)
   {
      map<TArtRIDFMap,TArtTKEPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TArtRIDFMap,TArtTKEPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TArtRIDFMap,TArtTKEPara*>", -2, "prec_stl/map", 63,
                  typeid(map<TArtRIDFMap,TArtTKEPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETArtRIDFMapcOTArtTKEParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TArtRIDFMap,TArtTKEPara*>) );
      instance.SetNew(&new_maplETArtRIDFMapcOTArtTKEParamUgR);
      instance.SetNewArray(&newArray_maplETArtRIDFMapcOTArtTKEParamUgR);
      instance.SetDelete(&delete_maplETArtRIDFMapcOTArtTKEParamUgR);
      instance.SetDeleteArray(&deleteArray_maplETArtRIDFMapcOTArtTKEParamUgR);
      instance.SetDestructor(&destruct_maplETArtRIDFMapcOTArtTKEParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TArtRIDFMap,TArtTKEPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtTKEPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETArtRIDFMapcOTArtTKEParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtTKEPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETArtRIDFMapcOTArtTKEParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtTKEPara*> : new map<TArtRIDFMap,TArtTKEPara*>;
   }
   static void *newArray_maplETArtRIDFMapcOTArtTKEParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtTKEPara*>[nElements] : new map<TArtRIDFMap,TArtTKEPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETArtRIDFMapcOTArtTKEParamUgR(void *p) {
      delete ((map<TArtRIDFMap,TArtTKEPara*>*)p);
   }
   static void deleteArray_maplETArtRIDFMapcOTArtTKEParamUgR(void *p) {
      delete [] ((map<TArtRIDFMap,TArtTKEPara*>*)p);
   }
   static void destruct_maplETArtRIDFMapcOTArtTKEParamUgR(void *p) {
      typedef map<TArtRIDFMap,TArtTKEPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TArtRIDFMap,TArtTKEPara*>

namespace ROOTDict {
   void maplETArtRIDFMapcOintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETArtRIDFMapcOintgR_Dictionary();
   static void *new_maplETArtRIDFMapcOintgR(void *p = 0);
   static void *newArray_maplETArtRIDFMapcOintgR(Long_t size, void *p);
   static void delete_maplETArtRIDFMapcOintgR(void *p);
   static void deleteArray_maplETArtRIDFMapcOintgR(void *p);
   static void destruct_maplETArtRIDFMapcOintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TArtRIDFMap,int>*)
   {
      map<TArtRIDFMap,int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TArtRIDFMap,int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TArtRIDFMap,int>", -2, "prec_stl/map", 63,
                  typeid(map<TArtRIDFMap,int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETArtRIDFMapcOintgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TArtRIDFMap,int>) );
      instance.SetNew(&new_maplETArtRIDFMapcOintgR);
      instance.SetNewArray(&newArray_maplETArtRIDFMapcOintgR);
      instance.SetDelete(&delete_maplETArtRIDFMapcOintgR);
      instance.SetDeleteArray(&deleteArray_maplETArtRIDFMapcOintgR);
      instance.SetDestructor(&destruct_maplETArtRIDFMapcOintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TArtRIDFMap,int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TArtRIDFMap,int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETArtRIDFMapcOintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TArtRIDFMap,int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETArtRIDFMapcOintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,int> : new map<TArtRIDFMap,int>;
   }
   static void *newArray_maplETArtRIDFMapcOintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,int>[nElements] : new map<TArtRIDFMap,int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETArtRIDFMapcOintgR(void *p) {
      delete ((map<TArtRIDFMap,int>*)p);
   }
   static void deleteArray_maplETArtRIDFMapcOintgR(void *p) {
      delete [] ((map<TArtRIDFMap,int>*)p);
   }
   static void destruct_maplETArtRIDFMapcOintgR(void *p) {
      typedef map<TArtRIDFMap,int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TArtRIDFMap,int>

namespace ROOTDict {
   void maplETStringcOTArtPlasticParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTArtPlasticParamUgR_Dictionary();
   static void *new_maplETStringcOTArtPlasticParamUgR(void *p = 0);
   static void *newArray_maplETStringcOTArtPlasticParamUgR(Long_t size, void *p);
   static void delete_maplETStringcOTArtPlasticParamUgR(void *p);
   static void deleteArray_maplETStringcOTArtPlasticParamUgR(void *p);
   static void destruct_maplETStringcOTArtPlasticParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TArtPlasticPara*>*)
   {
      map<TString,TArtPlasticPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TArtPlasticPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TArtPlasticPara*>", -2, "prec_stl/map", 63,
                  typeid(map<TString,TArtPlasticPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTArtPlasticParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TArtPlasticPara*>) );
      instance.SetNew(&new_maplETStringcOTArtPlasticParamUgR);
      instance.SetNewArray(&newArray_maplETStringcOTArtPlasticParamUgR);
      instance.SetDelete(&delete_maplETStringcOTArtPlasticParamUgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTArtPlasticParamUgR);
      instance.SetDestructor(&destruct_maplETStringcOTArtPlasticParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,TArtPlasticPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TArtPlasticPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTArtPlasticParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,TArtPlasticPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOTArtPlasticParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TArtPlasticPara*> : new map<TString,TArtPlasticPara*>;
   }
   static void *newArray_maplETStringcOTArtPlasticParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TArtPlasticPara*>[nElements] : new map<TString,TArtPlasticPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTArtPlasticParamUgR(void *p) {
      delete ((map<TString,TArtPlasticPara*>*)p);
   }
   static void deleteArray_maplETStringcOTArtPlasticParamUgR(void *p) {
      delete [] ((map<TString,TArtPlasticPara*>*)p);
   }
   static void destruct_maplETStringcOTArtPlasticParamUgR(void *p) {
      typedef map<TString,TArtPlasticPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,TArtPlasticPara*>

namespace ROOTDict {
   void maplETStringcOTArtTOFParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTArtTOFParamUgR_Dictionary();
   static void *new_maplETStringcOTArtTOFParamUgR(void *p = 0);
   static void *newArray_maplETStringcOTArtTOFParamUgR(Long_t size, void *p);
   static void delete_maplETStringcOTArtTOFParamUgR(void *p);
   static void deleteArray_maplETStringcOTArtTOFParamUgR(void *p);
   static void destruct_maplETStringcOTArtTOFParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TArtTOFPara*>*)
   {
      map<TString,TArtTOFPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TArtTOFPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TArtTOFPara*>", -2, "prec_stl/map", 63,
                  typeid(map<TString,TArtTOFPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTArtTOFParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TArtTOFPara*>) );
      instance.SetNew(&new_maplETStringcOTArtTOFParamUgR);
      instance.SetNewArray(&newArray_maplETStringcOTArtTOFParamUgR);
      instance.SetDelete(&delete_maplETStringcOTArtTOFParamUgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTArtTOFParamUgR);
      instance.SetDestructor(&destruct_maplETStringcOTArtTOFParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,TArtTOFPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TArtTOFPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTArtTOFParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,TArtTOFPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOTArtTOFParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TArtTOFPara*> : new map<TString,TArtTOFPara*>;
   }
   static void *newArray_maplETStringcOTArtTOFParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TArtTOFPara*>[nElements] : new map<TString,TArtTOFPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTArtTOFParamUgR(void *p) {
      delete ((map<TString,TArtTOFPara*>*)p);
   }
   static void deleteArray_maplETStringcOTArtTOFParamUgR(void *p) {
      delete [] ((map<TString,TArtTOFPara*>*)p);
   }
   static void destruct_maplETStringcOTArtTOFParamUgR(void *p) {
      typedef map<TString,TArtTOFPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,TArtTOFPara*>

namespace ROOTDict {
   void maplEintcOTArtFocalPlaneParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOTArtFocalPlaneParamUgR_Dictionary();
   static void *new_maplEintcOTArtFocalPlaneParamUgR(void *p = 0);
   static void *newArray_maplEintcOTArtFocalPlaneParamUgR(Long_t size, void *p);
   static void delete_maplEintcOTArtFocalPlaneParamUgR(void *p);
   static void deleteArray_maplEintcOTArtFocalPlaneParamUgR(void *p);
   static void destruct_maplEintcOTArtFocalPlaneParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<int,TArtFocalPlanePara*>*)
   {
      map<int,TArtFocalPlanePara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,TArtFocalPlanePara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,TArtFocalPlanePara*>", -2, "prec_stl/map", 63,
                  typeid(map<int,TArtFocalPlanePara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEintcOTArtFocalPlaneParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,TArtFocalPlanePara*>) );
      instance.SetNew(&new_maplEintcOTArtFocalPlaneParamUgR);
      instance.SetNewArray(&newArray_maplEintcOTArtFocalPlaneParamUgR);
      instance.SetDelete(&delete_maplEintcOTArtFocalPlaneParamUgR);
      instance.SetDeleteArray(&deleteArray_maplEintcOTArtFocalPlaneParamUgR);
      instance.SetDestructor(&destruct_maplEintcOTArtFocalPlaneParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<int,TArtFocalPlanePara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,TArtFocalPlanePara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOTArtFocalPlaneParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<int,TArtFocalPlanePara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEintcOTArtFocalPlaneParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,TArtFocalPlanePara*> : new map<int,TArtFocalPlanePara*>;
   }
   static void *newArray_maplEintcOTArtFocalPlaneParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,TArtFocalPlanePara*>[nElements] : new map<int,TArtFocalPlanePara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOTArtFocalPlaneParamUgR(void *p) {
      delete ((map<int,TArtFocalPlanePara*>*)p);
   }
   static void deleteArray_maplEintcOTArtFocalPlaneParamUgR(void *p) {
      delete [] ((map<int,TArtFocalPlanePara*>*)p);
   }
   static void destruct_maplEintcOTArtFocalPlaneParamUgR(void *p) {
      typedef map<int,TArtFocalPlanePara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<int,TArtFocalPlanePara*>

namespace ROOTDict {
   void vectorlETArtBigRIPSParameterscLcLDipolegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtBigRIPSParameterscLcLDipolegR_Dictionary();
   static void *new_vectorlETArtBigRIPSParameterscLcLDipolegR(void *p = 0);
   static void *newArray_vectorlETArtBigRIPSParameterscLcLDipolegR(Long_t size, void *p);
   static void delete_vectorlETArtBigRIPSParameterscLcLDipolegR(void *p);
   static void deleteArray_vectorlETArtBigRIPSParameterscLcLDipolegR(void *p);
   static void destruct_vectorlETArtBigRIPSParameterscLcLDipolegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtBigRIPSParameters::Dipole>*)
   {
      vector<TArtBigRIPSParameters::Dipole> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtBigRIPSParameters::Dipole>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtBigRIPSParameters::Dipole>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtBigRIPSParameters::Dipole>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtBigRIPSParameterscLcLDipolegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtBigRIPSParameters::Dipole>) );
      instance.SetNew(&new_vectorlETArtBigRIPSParameterscLcLDipolegR);
      instance.SetNewArray(&newArray_vectorlETArtBigRIPSParameterscLcLDipolegR);
      instance.SetDelete(&delete_vectorlETArtBigRIPSParameterscLcLDipolegR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtBigRIPSParameterscLcLDipolegR);
      instance.SetDestructor(&destruct_vectorlETArtBigRIPSParameterscLcLDipolegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtBigRIPSParameters::Dipole> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtBigRIPSParameters::Dipole>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtBigRIPSParameterscLcLDipolegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtBigRIPSParameters::Dipole>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtBigRIPSParameterscLcLDipolegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtBigRIPSParameters::Dipole> : new vector<TArtBigRIPSParameters::Dipole>;
   }
   static void *newArray_vectorlETArtBigRIPSParameterscLcLDipolegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtBigRIPSParameters::Dipole>[nElements] : new vector<TArtBigRIPSParameters::Dipole>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtBigRIPSParameterscLcLDipolegR(void *p) {
      delete ((vector<TArtBigRIPSParameters::Dipole>*)p);
   }
   static void deleteArray_vectorlETArtBigRIPSParameterscLcLDipolegR(void *p) {
      delete [] ((vector<TArtBigRIPSParameters::Dipole>*)p);
   }
   static void destruct_vectorlETArtBigRIPSParameterscLcLDipolegR(void *p) {
      typedef vector<TArtBigRIPSParameters::Dipole> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtBigRIPSParameters::Dipole>

namespace ROOTDict {
   void vectorlETArtFocalPlanemUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtFocalPlanemUgR_Dictionary();
   static void *new_vectorlETArtFocalPlanemUgR(void *p = 0);
   static void *newArray_vectorlETArtFocalPlanemUgR(Long_t size, void *p);
   static void delete_vectorlETArtFocalPlanemUgR(void *p);
   static void deleteArray_vectorlETArtFocalPlanemUgR(void *p);
   static void destruct_vectorlETArtFocalPlanemUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtFocalPlane*>*)
   {
      vector<TArtFocalPlane*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtFocalPlane*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtFocalPlane*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtFocalPlane*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtFocalPlanemUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtFocalPlane*>) );
      instance.SetNew(&new_vectorlETArtFocalPlanemUgR);
      instance.SetNewArray(&newArray_vectorlETArtFocalPlanemUgR);
      instance.SetDelete(&delete_vectorlETArtFocalPlanemUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtFocalPlanemUgR);
      instance.SetDestructor(&destruct_vectorlETArtFocalPlanemUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtFocalPlane*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtFocalPlane*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtFocalPlanemUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtFocalPlane*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtFocalPlanemUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtFocalPlane*> : new vector<TArtFocalPlane*>;
   }
   static void *newArray_vectorlETArtFocalPlanemUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtFocalPlane*>[nElements] : new vector<TArtFocalPlane*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtFocalPlanemUgR(void *p) {
      delete ((vector<TArtFocalPlane*>*)p);
   }
   static void deleteArray_vectorlETArtFocalPlanemUgR(void *p) {
      delete [] ((vector<TArtFocalPlane*>*)p);
   }
   static void destruct_vectorlETArtFocalPlanemUgR(void *p) {
      typedef vector<TArtFocalPlane*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtFocalPlane*>

namespace ROOTDict {
   void vectorlETArtGeParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtGeParamUgR_Dictionary();
   static void *new_vectorlETArtGeParamUgR(void *p = 0);
   static void *newArray_vectorlETArtGeParamUgR(Long_t size, void *p);
   static void delete_vectorlETArtGeParamUgR(void *p);
   static void deleteArray_vectorlETArtGeParamUgR(void *p);
   static void destruct_vectorlETArtGeParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtGePara*>*)
   {
      vector<TArtGePara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtGePara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtGePara*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtGePara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtGeParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtGePara*>) );
      instance.SetNew(&new_vectorlETArtGeParamUgR);
      instance.SetNewArray(&newArray_vectorlETArtGeParamUgR);
      instance.SetDelete(&delete_vectorlETArtGeParamUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtGeParamUgR);
      instance.SetDestructor(&destruct_vectorlETArtGeParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtGePara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtGePara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtGeParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtGePara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtGeParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtGePara*> : new vector<TArtGePara*>;
   }
   static void *newArray_vectorlETArtGeParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtGePara*>[nElements] : new vector<TArtGePara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtGeParamUgR(void *p) {
      delete ((vector<TArtGePara*>*)p);
   }
   static void deleteArray_vectorlETArtGeParamUgR(void *p) {
      delete [] ((vector<TArtGePara*>*)p);
   }
   static void destruct_vectorlETArtGeParamUgR(void *p) {
      typedef vector<TArtGePara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtGePara*>

namespace ROOTDict {
   void vectorlETArtICmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtICmUgR_Dictionary();
   static void *new_vectorlETArtICmUgR(void *p = 0);
   static void *newArray_vectorlETArtICmUgR(Long_t size, void *p);
   static void delete_vectorlETArtICmUgR(void *p);
   static void deleteArray_vectorlETArtICmUgR(void *p);
   static void destruct_vectorlETArtICmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtIC*>*)
   {
      vector<TArtIC*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtIC*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtIC*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtIC*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtICmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtIC*>) );
      instance.SetNew(&new_vectorlETArtICmUgR);
      instance.SetNewArray(&newArray_vectorlETArtICmUgR);
      instance.SetDelete(&delete_vectorlETArtICmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtICmUgR);
      instance.SetDestructor(&destruct_vectorlETArtICmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtIC*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtIC*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtICmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtIC*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtICmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtIC*> : new vector<TArtIC*>;
   }
   static void *newArray_vectorlETArtICmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtIC*>[nElements] : new vector<TArtIC*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtICmUgR(void *p) {
      delete ((vector<TArtIC*>*)p);
   }
   static void deleteArray_vectorlETArtICmUgR(void *p) {
      delete [] ((vector<TArtIC*>*)p);
   }
   static void destruct_vectorlETArtICmUgR(void *p) {
      typedef vector<TArtIC*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtIC*>

namespace ROOTDict {
   void vectorlETArtICParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtICParamUgR_Dictionary();
   static void *new_vectorlETArtICParamUgR(void *p = 0);
   static void *newArray_vectorlETArtICParamUgR(Long_t size, void *p);
   static void delete_vectorlETArtICParamUgR(void *p);
   static void deleteArray_vectorlETArtICParamUgR(void *p);
   static void destruct_vectorlETArtICParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtICPara*>*)
   {
      vector<TArtICPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtICPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtICPara*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtICPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtICParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtICPara*>) );
      instance.SetNew(&new_vectorlETArtICParamUgR);
      instance.SetNewArray(&newArray_vectorlETArtICParamUgR);
      instance.SetDelete(&delete_vectorlETArtICParamUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtICParamUgR);
      instance.SetDestructor(&destruct_vectorlETArtICParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtICPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtICPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtICParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtICPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtICParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtICPara*> : new vector<TArtICPara*>;
   }
   static void *newArray_vectorlETArtICParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtICPara*>[nElements] : new vector<TArtICPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtICParamUgR(void *p) {
      delete ((vector<TArtICPara*>*)p);
   }
   static void deleteArray_vectorlETArtICParamUgR(void *p) {
      delete [] ((vector<TArtICPara*>*)p);
   }
   static void destruct_vectorlETArtICParamUgR(void *p) {
      typedef vector<TArtICPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtICPara*>

namespace ROOTDict {
   void vectorlETArtPPACmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtPPACmUgR_Dictionary();
   static void *new_vectorlETArtPPACmUgR(void *p = 0);
   static void *newArray_vectorlETArtPPACmUgR(Long_t size, void *p);
   static void delete_vectorlETArtPPACmUgR(void *p);
   static void deleteArray_vectorlETArtPPACmUgR(void *p);
   static void destruct_vectorlETArtPPACmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtPPAC*>*)
   {
      vector<TArtPPAC*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtPPAC*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtPPAC*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtPPAC*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtPPACmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtPPAC*>) );
      instance.SetNew(&new_vectorlETArtPPACmUgR);
      instance.SetNewArray(&newArray_vectorlETArtPPACmUgR);
      instance.SetDelete(&delete_vectorlETArtPPACmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtPPACmUgR);
      instance.SetDestructor(&destruct_vectorlETArtPPACmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtPPAC*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtPPAC*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtPPACmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtPPAC*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtPPACmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtPPAC*> : new vector<TArtPPAC*>;
   }
   static void *newArray_vectorlETArtPPACmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtPPAC*>[nElements] : new vector<TArtPPAC*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtPPACmUgR(void *p) {
      delete ((vector<TArtPPAC*>*)p);
   }
   static void deleteArray_vectorlETArtPPACmUgR(void *p) {
      delete [] ((vector<TArtPPAC*>*)p);
   }
   static void destruct_vectorlETArtPPACmUgR(void *p) {
      typedef vector<TArtPPAC*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtPPAC*>

namespace ROOTDict {
   void vectorlETArtPPACParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtPPACParamUgR_Dictionary();
   static void *new_vectorlETArtPPACParamUgR(void *p = 0);
   static void *newArray_vectorlETArtPPACParamUgR(Long_t size, void *p);
   static void delete_vectorlETArtPPACParamUgR(void *p);
   static void deleteArray_vectorlETArtPPACParamUgR(void *p);
   static void destruct_vectorlETArtPPACParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtPPACPara*>*)
   {
      vector<TArtPPACPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtPPACPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtPPACPara*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtPPACPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtPPACParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtPPACPara*>) );
      instance.SetNew(&new_vectorlETArtPPACParamUgR);
      instance.SetNewArray(&newArray_vectorlETArtPPACParamUgR);
      instance.SetDelete(&delete_vectorlETArtPPACParamUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtPPACParamUgR);
      instance.SetDestructor(&destruct_vectorlETArtPPACParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtPPACPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtPPACPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtPPACParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtPPACPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtPPACParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtPPACPara*> : new vector<TArtPPACPara*>;
   }
   static void *newArray_vectorlETArtPPACParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtPPACPara*>[nElements] : new vector<TArtPPACPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtPPACParamUgR(void *p) {
      delete ((vector<TArtPPACPara*>*)p);
   }
   static void deleteArray_vectorlETArtPPACParamUgR(void *p) {
      delete [] ((vector<TArtPPACPara*>*)p);
   }
   static void destruct_vectorlETArtPPACParamUgR(void *p) {
      typedef vector<TArtPPACPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtPPACPara*>

namespace ROOTDict {
   void vectorlETArtPlasticmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtPlasticmUgR_Dictionary();
   static void *new_vectorlETArtPlasticmUgR(void *p = 0);
   static void *newArray_vectorlETArtPlasticmUgR(Long_t size, void *p);
   static void delete_vectorlETArtPlasticmUgR(void *p);
   static void deleteArray_vectorlETArtPlasticmUgR(void *p);
   static void destruct_vectorlETArtPlasticmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtPlastic*>*)
   {
      vector<TArtPlastic*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtPlastic*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtPlastic*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtPlastic*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtPlasticmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtPlastic*>) );
      instance.SetNew(&new_vectorlETArtPlasticmUgR);
      instance.SetNewArray(&newArray_vectorlETArtPlasticmUgR);
      instance.SetDelete(&delete_vectorlETArtPlasticmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtPlasticmUgR);
      instance.SetDestructor(&destruct_vectorlETArtPlasticmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtPlastic*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtPlastic*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtPlasticmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtPlastic*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtPlasticmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtPlastic*> : new vector<TArtPlastic*>;
   }
   static void *newArray_vectorlETArtPlasticmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtPlastic*>[nElements] : new vector<TArtPlastic*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtPlasticmUgR(void *p) {
      delete ((vector<TArtPlastic*>*)p);
   }
   static void deleteArray_vectorlETArtPlasticmUgR(void *p) {
      delete [] ((vector<TArtPlastic*>*)p);
   }
   static void destruct_vectorlETArtPlasticmUgR(void *p) {
      typedef vector<TArtPlastic*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtPlastic*>

namespace ROOTDict {
   void vectorlETArtPlasticParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtPlasticParamUgR_Dictionary();
   static void *new_vectorlETArtPlasticParamUgR(void *p = 0);
   static void *newArray_vectorlETArtPlasticParamUgR(Long_t size, void *p);
   static void delete_vectorlETArtPlasticParamUgR(void *p);
   static void deleteArray_vectorlETArtPlasticParamUgR(void *p);
   static void destruct_vectorlETArtPlasticParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtPlasticPara*>*)
   {
      vector<TArtPlasticPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtPlasticPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtPlasticPara*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtPlasticPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtPlasticParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtPlasticPara*>) );
      instance.SetNew(&new_vectorlETArtPlasticParamUgR);
      instance.SetNewArray(&newArray_vectorlETArtPlasticParamUgR);
      instance.SetDelete(&delete_vectorlETArtPlasticParamUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtPlasticParamUgR);
      instance.SetDestructor(&destruct_vectorlETArtPlasticParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtPlasticPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtPlasticPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtPlasticParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtPlasticPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtPlasticParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtPlasticPara*> : new vector<TArtPlasticPara*>;
   }
   static void *newArray_vectorlETArtPlasticParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtPlasticPara*>[nElements] : new vector<TArtPlasticPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtPlasticParamUgR(void *p) {
      delete ((vector<TArtPlasticPara*>*)p);
   }
   static void deleteArray_vectorlETArtPlasticParamUgR(void *p) {
      delete [] ((vector<TArtPlasticPara*>*)p);
   }
   static void destruct_vectorlETArtPlasticParamUgR(void *p) {
      typedef vector<TArtPlasticPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtPlasticPara*>

namespace ROOTDict {
   void vectorlETArtRIPSmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtRIPSmUgR_Dictionary();
   static void *new_vectorlETArtRIPSmUgR(void *p = 0);
   static void *newArray_vectorlETArtRIPSmUgR(Long_t size, void *p);
   static void delete_vectorlETArtRIPSmUgR(void *p);
   static void deleteArray_vectorlETArtRIPSmUgR(void *p);
   static void destruct_vectorlETArtRIPSmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtRIPS*>*)
   {
      vector<TArtRIPS*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtRIPS*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtRIPS*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtRIPS*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtRIPSmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtRIPS*>) );
      instance.SetNew(&new_vectorlETArtRIPSmUgR);
      instance.SetNewArray(&newArray_vectorlETArtRIPSmUgR);
      instance.SetDelete(&delete_vectorlETArtRIPSmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtRIPSmUgR);
      instance.SetDestructor(&destruct_vectorlETArtRIPSmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtRIPS*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtRIPS*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtRIPSmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtRIPS*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtRIPSmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtRIPS*> : new vector<TArtRIPS*>;
   }
   static void *newArray_vectorlETArtRIPSmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtRIPS*>[nElements] : new vector<TArtRIPS*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtRIPSmUgR(void *p) {
      delete ((vector<TArtRIPS*>*)p);
   }
   static void deleteArray_vectorlETArtRIPSmUgR(void *p) {
      delete [] ((vector<TArtRIPS*>*)p);
   }
   static void destruct_vectorlETArtRIPSmUgR(void *p) {
      typedef vector<TArtRIPS*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtRIPS*>

namespace ROOTDict {
   void vectorlETArtSiParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtSiParamUgR_Dictionary();
   static void *new_vectorlETArtSiParamUgR(void *p = 0);
   static void *newArray_vectorlETArtSiParamUgR(Long_t size, void *p);
   static void delete_vectorlETArtSiParamUgR(void *p);
   static void deleteArray_vectorlETArtSiParamUgR(void *p);
   static void destruct_vectorlETArtSiParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtSiPara*>*)
   {
      vector<TArtSiPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtSiPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtSiPara*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtSiPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtSiParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtSiPara*>) );
      instance.SetNew(&new_vectorlETArtSiParamUgR);
      instance.SetNewArray(&newArray_vectorlETArtSiParamUgR);
      instance.SetDelete(&delete_vectorlETArtSiParamUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtSiParamUgR);
      instance.SetDestructor(&destruct_vectorlETArtSiParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtSiPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtSiPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtSiParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtSiPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtSiParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtSiPara*> : new vector<TArtSiPara*>;
   }
   static void *newArray_vectorlETArtSiParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtSiPara*>[nElements] : new vector<TArtSiPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtSiParamUgR(void *p) {
      delete ((vector<TArtSiPara*>*)p);
   }
   static void deleteArray_vectorlETArtSiParamUgR(void *p) {
      delete [] ((vector<TArtSiPara*>*)p);
   }
   static void destruct_vectorlETArtSiParamUgR(void *p) {
      typedef vector<TArtSiPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtSiPara*>

namespace ROOTDict {
   void vectorlETArtTKEParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtTKEParamUgR_Dictionary();
   static void *new_vectorlETArtTKEParamUgR(void *p = 0);
   static void *newArray_vectorlETArtTKEParamUgR(Long_t size, void *p);
   static void delete_vectorlETArtTKEParamUgR(void *p);
   static void deleteArray_vectorlETArtTKEParamUgR(void *p);
   static void destruct_vectorlETArtTKEParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtTKEPara*>*)
   {
      vector<TArtTKEPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtTKEPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtTKEPara*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtTKEPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtTKEParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtTKEPara*>) );
      instance.SetNew(&new_vectorlETArtTKEParamUgR);
      instance.SetNewArray(&newArray_vectorlETArtTKEParamUgR);
      instance.SetDelete(&delete_vectorlETArtTKEParamUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtTKEParamUgR);
      instance.SetDestructor(&destruct_vectorlETArtTKEParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtTKEPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtTKEPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtTKEParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtTKEPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtTKEParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtTKEPara*> : new vector<TArtTKEPara*>;
   }
   static void *newArray_vectorlETArtTKEParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtTKEPara*>[nElements] : new vector<TArtTKEPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtTKEParamUgR(void *p) {
      delete ((vector<TArtTKEPara*>*)p);
   }
   static void deleteArray_vectorlETArtTKEParamUgR(void *p) {
      delete [] ((vector<TArtTKEPara*>*)p);
   }
   static void destruct_vectorlETArtTKEParamUgR(void *p) {
      typedef vector<TArtTKEPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtTKEPara*>

namespace ROOTDict {
   void vectorlETArtTOFmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtTOFmUgR_Dictionary();
   static void *new_vectorlETArtTOFmUgR(void *p = 0);
   static void *newArray_vectorlETArtTOFmUgR(Long_t size, void *p);
   static void delete_vectorlETArtTOFmUgR(void *p);
   static void deleteArray_vectorlETArtTOFmUgR(void *p);
   static void destruct_vectorlETArtTOFmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtTOF*>*)
   {
      vector<TArtTOF*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtTOF*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtTOF*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtTOF*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtTOFmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtTOF*>) );
      instance.SetNew(&new_vectorlETArtTOFmUgR);
      instance.SetNewArray(&newArray_vectorlETArtTOFmUgR);
      instance.SetDelete(&delete_vectorlETArtTOFmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtTOFmUgR);
      instance.SetDestructor(&destruct_vectorlETArtTOFmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtTOF*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtTOF*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtTOFmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtTOF*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtTOFmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtTOF*> : new vector<TArtTOF*>;
   }
   static void *newArray_vectorlETArtTOFmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtTOF*>[nElements] : new vector<TArtTOF*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtTOFmUgR(void *p) {
      delete ((vector<TArtTOF*>*)p);
   }
   static void deleteArray_vectorlETArtTOFmUgR(void *p) {
      delete [] ((vector<TArtTOF*>*)p);
   }
   static void destruct_vectorlETArtTOFmUgR(void *p) {
      typedef vector<TArtTOF*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtTOF*>

namespace ROOTDict {
   void vectorlEvectorlETArtPPACmUgRmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlETArtPPACmUgRmUgR_Dictionary();
   static void *new_vectorlEvectorlETArtPPACmUgRmUgR(void *p = 0);
   static void *newArray_vectorlEvectorlETArtPPACmUgRmUgR(Long_t size, void *p);
   static void delete_vectorlEvectorlETArtPPACmUgRmUgR(void *p);
   static void deleteArray_vectorlEvectorlETArtPPACmUgRmUgR(void *p);
   static void destruct_vectorlEvectorlETArtPPACmUgRmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<TArtPPAC*>*>*)
   {
      vector<vector<TArtPPAC*>*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<TArtPPAC*>*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<TArtPPAC*>*>", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<TArtPPAC*>*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlETArtPPACmUgRmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<TArtPPAC*>*>) );
      instance.SetNew(&new_vectorlEvectorlETArtPPACmUgRmUgR);
      instance.SetNewArray(&newArray_vectorlEvectorlETArtPPACmUgRmUgR);
      instance.SetDelete(&delete_vectorlEvectorlETArtPPACmUgRmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlETArtPPACmUgRmUgR);
      instance.SetDestructor(&destruct_vectorlEvectorlETArtPPACmUgRmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<TArtPPAC*>*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<TArtPPAC*>*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlETArtPPACmUgRmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<TArtPPAC*>*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlETArtPPACmUgRmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<TArtPPAC*>*> : new vector<vector<TArtPPAC*>*>;
   }
   static void *newArray_vectorlEvectorlETArtPPACmUgRmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<TArtPPAC*>*>[nElements] : new vector<vector<TArtPPAC*>*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlETArtPPACmUgRmUgR(void *p) {
      delete ((vector<vector<TArtPPAC*>*>*)p);
   }
   static void deleteArray_vectorlEvectorlETArtPPACmUgRmUgR(void *p) {
      delete [] ((vector<vector<TArtPPAC*>*>*)p);
   }
   static void destruct_vectorlEvectorlETArtPPACmUgRmUgR(void *p) {
      typedef vector<vector<TArtPPAC*>*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<TArtPPAC*>*>

/********************************************************
* anabrips_dict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableanabrips_dict();

extern "C" void G__set_cpp_environmentanabrips_dict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("include/TArtCalibTKE.hh");
  G__add_compiledheader("include/TArtOptMatrix.hh");
  G__add_compiledheader("include/TArtIC.hh");
  G__add_compiledheader("include/TArtFocalPlane.hh");
  G__add_compiledheader("include/TArtRecoRIPS.hh");
  G__add_compiledheader("include/TArtCalibPID.hh");
  G__add_compiledheader("include/TArtRecoPID.hh");
  G__add_compiledheader("include/TArtFocalPlanePara.hh");
  G__add_compiledheader("include/TArtCalibGe.hh");
  G__add_compiledheader("include/TArtCalibPPAC.hh");
  G__add_compiledheader("include/TArtSi.hh");
  G__add_compiledheader("include/TArtBigRIPSParameters.hh");
  G__add_compiledheader("include/TArtRIPS.hh");
  G__add_compiledheader("include/TArtICPara.hh");
  G__add_compiledheader("include/TArtCalibIC.hh");
  G__add_compiledheader("include/TArtSiPara.hh");
  G__add_compiledheader("include/TArtCalibFocalPlane.hh");
  G__add_compiledheader("include/TArtPlasticPara.hh");
  G__add_compiledheader("include/TArtCalibPlastic.hh");
  G__add_compiledheader("include/TArtTOF.hh");
  G__add_compiledheader("include/TArtRecoBeam.hh");
  G__add_compiledheader("include/TArtGePara.hh");
  G__add_compiledheader("include/TArtPPACPara.hh");
  G__add_compiledheader("include/TArtRIPSPara.hh");
  G__add_compiledheader("include/TArtTKEPara.hh");
  G__add_compiledheader("include/TArtPPAC.hh");
  G__add_compiledheader("include/TArtTKE.hh");
  G__add_compiledheader("include/TArtRecoTOF.hh");
  G__add_compiledheader("include/TArtGe.hh");
  G__add_compiledheader("include/TArtBeam.hh");
  G__add_compiledheader("include/TArtCalibCoin.hh");
  G__add_compiledheader("include/TArtBeamPara.hh");
  G__add_compiledheader("include/TArtTOFPara.hh");
  G__add_compiledheader("include/TArtCalibSi.hh");
  G__add_compiledheader("include/TArtPlastic.hh");
  G__cpp_reset_tagtableanabrips_dict();
}
#include <new>
extern "C" int G__cpp_dllrevanabrips_dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TArtTKEPara */
static int G__anabrips_dict_218_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTKEPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTKEPara[n];
     } else {
       p = new((void*) gvp) TArtTKEPara[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTKEPara;
     } else {
       p = new((void*) gvp) TArtTKEPara;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTKEPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtTKEPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) TArtTKEPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTKEPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtTKEPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) TArtTKEPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTKEPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtTKEPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) TArtTKEPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTKEPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtTKEPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]));
   } else {
     p = new((void*) gvp) TArtTKEPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKEPara*) G__getstructoffset())->SetParameters(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKEPara*) G__getstructoffset())->SetParameters(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKEPara*) G__getstructoffset())->SetMap(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKEPara*) G__getstructoffset())->SetMap(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKEPara*) G__getstructoffset())->SetMap((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKEPara*) G__getstructoffset())->SetMap((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtTKEPara*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtTKEPara*) G__getstructoffset())->GetDetectorName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtTKEPara*) G__getstructoffset())->GetFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtTKEPara*) G__getstructoffset())->GetECh2MeV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtTKEPara*) G__getstructoffset())->GetEPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtTKEPara*) G__getstructoffset())->GetECh2MeV((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtTKEPara*) G__getstructoffset())->GetEPedestal((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtTKEPara*) G__getstructoffset())->GetTCh2nsec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtTKEPara*) G__getstructoffset())->GetTOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtTKEPara*) G__getstructoffset())->GetTCh2nsec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtTKEPara*) G__getstructoffset())->GetTOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtTKEPara*) G__getstructoffset())->GetNumADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtTKEPara*) G__getstructoffset())->GetADCMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtTKEPara*) G__getstructoffset())->GetADCMap((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtTKEPara*) G__getstructoffset())->FindCh((TArtRIDFMap*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtTKEPara*) G__getstructoffset())->GetTDCMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtTKEPara*) G__getstructoffset())->GetTDCMap((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtTKEPara::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtTKEPara::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtTKEPara::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtTKEPara::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKEPara*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtTKEPara::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtTKEPara::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtTKEPara::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_218_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtTKEPara::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_218_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtTKEPara* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtTKEPara(*(TArtTKEPara*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtTKEPara G__TTArtTKEPara;
static int G__anabrips_dict_218_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtTKEPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtTKEPara*) (soff+(sizeof(TArtTKEPara)*i)))->~G__TTArtTKEPara();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtTKEPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtTKEPara*) (soff))->~G__TTArtTKEPara();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_218_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTKEPara* dest = (TArtTKEPara*) G__getstructoffset();
   *dest = *(TArtTKEPara*) libp->para[0].ref;
   const TArtTKEPara& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtBigRIPSParameters */
static int G__anabrips_dict_219_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtBigRIPSParameters* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtBigRIPSParameters((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TArtBigRIPSParameters((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtBigRIPSParameters((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TArtBigRIPSParameters((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtBigRIPSParameters[n];
       } else {
         p = new((void*) gvp) TArtBigRIPSParameters[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtBigRIPSParameters;
       } else {
         p = new((void*) gvp) TArtBigRIPSParameters;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) TArtBigRIPSParameters::Instance((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) TArtBigRIPSParameters::Instance((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) TArtBigRIPSParameters::Instance());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtBigRIPSParameters::Delete();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->LoadParameter((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBigRIPSParameters*) G__getstructoffset())->PrintListOfPPACPara();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBigRIPSParameters*) G__getstructoffset())->PrintListOfPlasticPara();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBigRIPSParameters*) G__getstructoffset())->PrintListOfICPara();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBigRIPSParameters*) G__getstructoffset())->PrintListOfGePara();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBigRIPSParameters*) G__getstructoffset())->PrintListOfSiPara();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBigRIPSParameters*) G__getstructoffset())->PrintListOfTKEPara();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBigRIPSParameters*) G__getstructoffset())->PrintListOfFocalPlanePara();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBigRIPSParameters*) G__getstructoffset())->AddRIPSPara((TArtRIPSPara*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBigRIPSParameters*) G__getstructoffset())->AddTOFPara((TArtTOFPara*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBigRIPSParameters*) G__getstructoffset())->AddBeamPara((TArtBeamPara*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetListOfPPACPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetListOfPlasticPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetListOfICPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetListOfGePara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetListOfSiPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetListOfTKEPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetListOfFocalPlanePara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetListOfRIPSPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetListOfTOFPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetListOfBeamPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetNumPPACPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetNumPlasticPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetNumICPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetNumGePara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetNumSiPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetNumTKEPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetNumFocalPlanePara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetNumRIPSPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetNumTOFPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->GetNumBeamPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->FindPPACPara((TArtRIDFMap*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->FindPlasticPara((TArtRIDFMap*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->FindPlasticPara((TString*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->FindICPara((TArtRIDFMap*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->FindGePara((TArtRIDFMap*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->FindSiPara((TArtRIDFMap*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->FindTKEPara((TArtRIDFMap*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->FindFocalPlanePara((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBigRIPSParameters*) G__getstructoffset())->SetFocusPosOffset((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtBigRIPSParameters*) G__getstructoffset())->GetDipoleBrho((TString*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TArtBigRIPSParameters*) G__getstructoffset())->LoadDipoleBrho());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtBigRIPSParameters::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtBigRIPSParameters::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtBigRIPSParameters::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtBigRIPSParameters::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBigRIPSParameters*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtBigRIPSParameters::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtBigRIPSParameters::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtBigRIPSParameters::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_219_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtBigRIPSParameters::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_219_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtBigRIPSParameters* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtBigRIPSParameters(*(TArtBigRIPSParameters*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtBigRIPSParameters G__TTArtBigRIPSParameters;
static int G__anabrips_dict_219_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtBigRIPSParameters*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtBigRIPSParameters*) (soff+(sizeof(TArtBigRIPSParameters)*i)))->~G__TTArtBigRIPSParameters();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtBigRIPSParameters*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtBigRIPSParameters*) (soff))->~G__TTArtBigRIPSParameters();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_219_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtBigRIPSParameters* dest = (TArtBigRIPSParameters*) G__getstructoffset();
   *dest = *(TArtBigRIPSParameters*) libp->para[0].ref;
   const TArtBigRIPSParameters& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtTKE */
static int G__anabrips_dict_220_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTKE* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTKE[n];
     } else {
       p = new((void*) gvp) TArtTKE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTKE;
     } else {
       p = new((void*) gvp) TArtTKE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKE*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKE*) G__getstructoffset())->SetNumADC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtTKE*) G__getstructoffset())->GetNumADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKE*) G__getstructoffset())->SetRawADC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKE*) G__getstructoffset())->SetRawTDC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKE*) G__getstructoffset())->SetRawADC((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKE*) G__getstructoffset())->SetRawTDC((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtTKE*) G__getstructoffset())->GetRawADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtTKE*) G__getstructoffset())->GetRawTDC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtTKE*) G__getstructoffset())->GetRawADC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtTKE*) G__getstructoffset())->GetRawTDC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKE*) G__getstructoffset())->SetEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKE*) G__getstructoffset())->SetTiming((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKE*) G__getstructoffset())->SetEnergy((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKE*) G__getstructoffset())->SetTiming((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtTKE*) G__getstructoffset())->GetEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtTKE*) G__getstructoffset())->GetTiming());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtTKE*) G__getstructoffset())->GetEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtTKE*) G__getstructoffset())->GetTiming((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtTKE::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtTKE::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtTKE::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtTKE::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTKE*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtTKE::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtTKE::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtTKE::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_220_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtTKE::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_220_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtTKE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtTKE(*(TArtTKE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtTKE G__TTArtTKE;
static int G__anabrips_dict_220_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtTKE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtTKE*) (soff+(sizeof(TArtTKE)*i)))->~G__TTArtTKE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtTKE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtTKE*) (soff))->~G__TTArtTKE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_220_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTKE* dest = (TArtTKE*) G__getstructoffset();
   *dest = *(TArtTKE*) libp->para[0].ref;
   const TArtTKE& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtCalibTKE */
static int G__anabrips_dict_222_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibTKE* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtCalibTKE(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) TArtCalibTKE(*((const TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibTKE[n];
       } else {
         p = new((void*) gvp) TArtCalibTKE[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibTKE;
       } else {
         p = new((void*) gvp) TArtCalibTKE;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibTKE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibTKE*) G__getstructoffset())->LoadData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibTKE*) G__getstructoffset())->LoadData((TArtRawSegmentObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibTKE*) G__getstructoffset())->GetTKEArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtCalibTKE*) G__getstructoffset())->GetNumTKE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibTKE*) G__getstructoffset())->GetTKE((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibTKE*) G__getstructoffset())->GetTKEPara((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibTKE*) G__getstructoffset())->FindTKE((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtCalibTKE::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibTKE::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtCalibTKE::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtCalibTKE::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibTKE*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibTKE::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibTKE::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibTKE::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_222_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibTKE::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_222_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtCalibTKE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtCalibTKE(*(TArtCalibTKE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibTKE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtCalibTKE G__TTArtCalibTKE;
static int G__anabrips_dict_222_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtCalibTKE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtCalibTKE*) (soff+(sizeof(TArtCalibTKE)*i)))->~G__TTArtCalibTKE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtCalibTKE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtCalibTKE*) (soff))->~G__TTArtCalibTKE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_222_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibTKE* dest = (TArtCalibTKE*) G__getstructoffset();
   *dest = *(TArtCalibTKE*) libp->para[0].ref;
   const TArtCalibTKE& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtIC */
static int G__anabrips_dict_263_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtIC* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtIC[n];
     } else {
       p = new((void*) gvp) TArtIC[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtIC;
     } else {
       p = new((void*) gvp) TArtIC;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtIC*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtIC*) G__getstructoffset())->SetIonPair((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtIC*) G__getstructoffset())->SetZCoef((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtIC*) G__getstructoffset())->GetIonPair());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtIC*) G__getstructoffset())->GetZCoef((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtIC*) G__getstructoffset())->SetRawADC((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtIC*) G__getstructoffset())->SetPedADC((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtIC*) G__getstructoffset())->SetPedADCSqSum((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtIC*) G__getstructoffset())->SetPedADCAvSum((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtIC*) G__getstructoffset())->GetRawADC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtIC*) G__getstructoffset())->GetPedADC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtIC*) G__getstructoffset())->GetPedADCSqSum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtIC*) G__getstructoffset())->GetPedADCAvSum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtIC*) G__getstructoffset())->SetNumHit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtIC*) G__getstructoffset())->SetEnergy((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtIC*) G__getstructoffset())->SetEnergySqSum((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtIC*) G__getstructoffset())->SetEnergyAvSum((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtIC*) G__getstructoffset())->GetNumHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtIC*) G__getstructoffset())->GetEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtIC*) G__getstructoffset())->GetEnergySqSum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtIC*) G__getstructoffset())->GetEnergyAvSum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtIC*) G__getstructoffset())->GetZet((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtIC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtIC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtIC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtIC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtIC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtIC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtIC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtIC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_263_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtIC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_263_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtIC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtIC(*(TArtIC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtIC G__TTArtIC;
static int G__anabrips_dict_263_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtIC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtIC*) (soff+(sizeof(TArtIC)*i)))->~G__TTArtIC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtIC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtIC*) (soff))->~G__TTArtIC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_263_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtIC* dest = (TArtIC*) G__getstructoffset();
   *dest = *(TArtIC*) libp->para[0].ref;
   const TArtIC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtFocalPlane */
static int G__anabrips_dict_294_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtFocalPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtFocalPlane[n];
     } else {
       p = new((void*) gvp) TArtFocalPlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtFocalPlane;
     } else {
       p = new((void*) gvp) TArtFocalPlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtFocalPlane*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtFocalPlane*) G__getstructoffset())->SetStdZpos((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtFocalPlane*) G__getstructoffset())->SetZoffset((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtFocalPlane*) G__getstructoffset())->GetStdZpos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtFocalPlane*) G__getstructoffset())->GetZoffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtFocalPlane*) G__getstructoffset())->SetOptVector((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtFocalPlane*) G__getstructoffset())->GetOptVector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((TArtFocalPlane*) G__getstructoffset())->GetX((Double_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((TArtFocalPlane*) G__getstructoffset())->GetX());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((TArtFocalPlane*) G__getstructoffset())->GetY((Double_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((TArtFocalPlane*) G__getstructoffset())->GetY());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtFocalPlane*) G__getstructoffset())->CopyPos();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtFocalPlane*) G__getstructoffset())->SetNumFiredPPACX((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtFocalPlane*) G__getstructoffset())->SetNumFiredPPACY((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtFocalPlane*) G__getstructoffset())->GetNumFiredPPACX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtFocalPlane*) G__getstructoffset())->GetNumFiredPPACY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtFocalPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtFocalPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtFocalPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtFocalPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtFocalPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtFocalPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtFocalPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtFocalPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_294_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtFocalPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_294_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtFocalPlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtFocalPlane(*(TArtFocalPlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtFocalPlane G__TTArtFocalPlane;
static int G__anabrips_dict_294_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtFocalPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtFocalPlane*) (soff+(sizeof(TArtFocalPlane)*i)))->~G__TTArtFocalPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtFocalPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtFocalPlane*) (soff))->~G__TTArtFocalPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_294_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtFocalPlane* dest = (TArtFocalPlane*) G__getstructoffset();
   *dest = *(TArtFocalPlane*) libp->para[0].ref;
   const TArtFocalPlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtRIPS */
static int G__anabrips_dict_297_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRIPS* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtRIPS[n];
     } else {
       p = new((void*) gvp) TArtRIPS[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtRIPS;
     } else {
       p = new((void*) gvp) TArtRIPS;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPS*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPS*) G__getstructoffset())->SetDelta((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPS*) G__getstructoffset())->SetAngle((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtRIPS*) G__getstructoffset())->GetDelta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtRIPS*) G__getstructoffset())->GetAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPS*) G__getstructoffset())->SetMatrix(*((TMatrixD*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRIPS*) G__getstructoffset())->GetMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPS*) G__getstructoffset())->SetCenterBrho((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPS*) G__getstructoffset())->SetBrho((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPS*) G__getstructoffset())->SetLength((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPS*) G__getstructoffset())->SetUpstreamFpl((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPS*) G__getstructoffset())->SetDownstreamFpl((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtRIPS*) G__getstructoffset())->GetCenterBrho());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtRIPS*) G__getstructoffset())->GetBrho());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtRIPS*) G__getstructoffset())->GetLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtRIPS*) G__getstructoffset())->GetUpstreamFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtRIPS*) G__getstructoffset())->GetDownstreamFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPS*) G__getstructoffset())->SetDipoleName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRIPS*) G__getstructoffset())->GetDipoleName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtRIPS::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRIPS::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtRIPS::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtRIPS::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPS*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRIPS::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtRIPS::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRIPS::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_297_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtRIPS::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_297_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtRIPS* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtRIPS(*(TArtRIPS*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtRIPS G__TTArtRIPS;
static int G__anabrips_dict_297_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtRIPS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtRIPS*) (soff+(sizeof(TArtRIPS)*i)))->~G__TTArtRIPS();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtRIPS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtRIPS*) (soff))->~G__TTArtRIPS();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_297_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRIPS* dest = (TArtRIPS*) G__getstructoffset();
   *dest = *(TArtRIPS*) libp->para[0].ref;
   const TArtRIPS& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtRecoRIPS */
static int G__anabrips_dict_298_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRecoRIPS* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtRecoRIPS(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) TArtRecoRIPS(*((const TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtRecoRIPS[n];
       } else {
         p = new((void*) gvp) TArtRecoRIPS[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtRecoRIPS;
       } else {
         p = new((void*) gvp) TArtRecoRIPS;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoRIPS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoRIPS*) G__getstructoffset())->DefineNewRIPS((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoRIPS*) G__getstructoffset())->DefineNewRIPS((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoRIPS*) G__getstructoffset())->DefineNewRIPS((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoRIPS*) G__getstructoffset())->DefineNewRIPS((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (TMatrixD*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoRIPS*) G__getstructoffset())->DefineNewRIPS((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (TMatrixD*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoRIPS*) G__getstructoffset())->DefineNewRIPS((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (TMatrixD*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoRIPS*) G__getstructoffset())->GetRIPSArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtRecoRIPS*) G__getstructoffset())->GetNumRIPS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoRIPS*) G__getstructoffset())->GetRIPS((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoRIPS*) G__getstructoffset())->FindRIPS((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtRecoRIPS::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRecoRIPS::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtRecoRIPS::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtRecoRIPS::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRecoRIPS*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRecoRIPS::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtRecoRIPS::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRecoRIPS::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_298_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtRecoRIPS::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_298_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtRecoRIPS* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtRecoRIPS(*(TArtRecoRIPS*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoRIPS));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtRecoRIPS G__TTArtRecoRIPS;
static int G__anabrips_dict_298_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtRecoRIPS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtRecoRIPS*) (soff+(sizeof(TArtRecoRIPS)*i)))->~G__TTArtRecoRIPS();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtRecoRIPS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtRecoRIPS*) (soff))->~G__TTArtRecoRIPS();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_298_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRecoRIPS* dest = (TArtRecoRIPS*) G__getstructoffset();
   *dest = *(TArtRecoRIPS*) libp->para[0].ref;
   const TArtRecoRIPS& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtCalibPPAC */
static int G__anabrips_dict_303_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibPPAC* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtCalibPPAC(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) TArtCalibPPAC(*((const TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibPPAC[n];
       } else {
         p = new((void*) gvp) TArtCalibPPAC[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibPPAC;
       } else {
         p = new((void*) gvp) TArtCalibPPAC;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPPAC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibPPAC*) G__getstructoffset())->LoadData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibPPAC*) G__getstructoffset())->LoadData((TArtRawSegmentObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibPPAC*) G__getstructoffset())->SetParameter((TArtBigRIPSParameters*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibPPAC*) G__getstructoffset())->SetParameter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPPAC*) G__getstructoffset())->GetPPACArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtCalibPPAC*) G__getstructoffset())->GetNumPPAC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPPAC*) G__getstructoffset())->GetPPAC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPPAC*) G__getstructoffset())->GetPPACPara((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPPAC*) G__getstructoffset())->FindPPAC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPPAC*) G__getstructoffset())->FindPPAC((TString*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPPAC*) G__getstructoffset())->FindPPAC((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtCalibPPAC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibPPAC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtCalibPPAC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtCalibPPAC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibPPAC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibPPAC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibPPAC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibPPAC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_303_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibPPAC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_303_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtCalibPPAC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtCalibPPAC(*(TArtCalibPPAC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPPAC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtCalibPPAC G__TTArtCalibPPAC;
static int G__anabrips_dict_303_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtCalibPPAC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtCalibPPAC*) (soff+(sizeof(TArtCalibPPAC)*i)))->~G__TTArtCalibPPAC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtCalibPPAC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtCalibPPAC*) (soff))->~G__TTArtCalibPPAC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_303_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibPPAC* dest = (TArtCalibPPAC*) G__getstructoffset();
   *dest = *(TArtCalibPPAC*) libp->para[0].ref;
   const TArtCalibPPAC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtCalibPlastic */
static int G__anabrips_dict_304_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibPlastic* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtCalibPlastic(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) TArtCalibPlastic(*((const TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibPlastic[n];
       } else {
         p = new((void*) gvp) TArtCalibPlastic[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibPlastic;
       } else {
         p = new((void*) gvp) TArtCalibPlastic;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPlastic));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibPlastic*) G__getstructoffset())->LoadData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibPlastic*) G__getstructoffset())->LoadData((TArtRawSegmentObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibPlastic*) G__getstructoffset())->NearSearch(*((vector<int>*) G__int(libp->para[0])), *((vector<int>*) G__int(libp->para[1]))
, *((vector<int>*) G__int(libp->para[2])), *((vector<int>*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPlastic*) G__getstructoffset())->GetPlasticArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtCalibPlastic*) G__getstructoffset())->GetNumPlastic());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPlastic*) G__getstructoffset())->GetPlastic((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPlastic*) G__getstructoffset())->GetPlasticPara((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPlastic*) G__getstructoffset())->FindPlastic((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPlastic*) G__getstructoffset())->FindPlastic((TString*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPlastic*) G__getstructoffset())->FindPlastic((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtCalibPlastic::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibPlastic::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtCalibPlastic::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtCalibPlastic::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibPlastic*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibPlastic::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibPlastic::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibPlastic::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_304_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibPlastic::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_304_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtCalibPlastic* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtCalibPlastic(*(TArtCalibPlastic*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPlastic));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtCalibPlastic G__TTArtCalibPlastic;
static int G__anabrips_dict_304_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtCalibPlastic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtCalibPlastic*) (soff+(sizeof(TArtCalibPlastic)*i)))->~G__TTArtCalibPlastic();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtCalibPlastic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtCalibPlastic*) (soff))->~G__TTArtCalibPlastic();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_304_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibPlastic* dest = (TArtCalibPlastic*) G__getstructoffset();
   *dest = *(TArtCalibPlastic*) libp->para[0].ref;
   const TArtCalibPlastic& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtCalibIC */
static int G__anabrips_dict_305_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibIC* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtCalibIC(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) TArtCalibIC(*((const TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibIC[n];
       } else {
         p = new((void*) gvp) TArtCalibIC[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibIC;
       } else {
         p = new((void*) gvp) TArtCalibIC;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibIC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibIC*) G__getstructoffset())->LoadData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibIC*) G__getstructoffset())->LoadData((TArtRawSegmentObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibIC*) G__getstructoffset())->GetICArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtCalibIC*) G__getstructoffset())->GetNumIC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibIC*) G__getstructoffset())->GetIC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibIC*) G__getstructoffset())->GetICPara((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibIC*) G__getstructoffset())->FindIC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibIC*) G__getstructoffset())->FindIC((TString*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibIC*) G__getstructoffset())->FindIC((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtCalibIC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibIC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtCalibIC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtCalibIC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibIC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibIC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibIC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibIC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_305_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibIC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_305_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtCalibIC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtCalibIC(*(TArtCalibIC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibIC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtCalibIC G__TTArtCalibIC;
static int G__anabrips_dict_305_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtCalibIC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtCalibIC*) (soff+(sizeof(TArtCalibIC)*i)))->~G__TTArtCalibIC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtCalibIC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtCalibIC*) (soff))->~G__TTArtCalibIC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_305_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibIC* dest = (TArtCalibIC*) G__getstructoffset();
   *dest = *(TArtCalibIC*) libp->para[0].ref;
   const TArtCalibIC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtCalibGe */
static int G__anabrips_dict_306_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibGe* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtCalibGe(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) TArtCalibGe(*((const TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibGe[n];
       } else {
         p = new((void*) gvp) TArtCalibGe[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibGe;
       } else {
         p = new((void*) gvp) TArtCalibGe;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibGe));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibGe*) G__getstructoffset())->LoadData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibGe*) G__getstructoffset())->LoadData((TArtRawSegmentObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibGe*) G__getstructoffset())->GetGeArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtCalibGe*) G__getstructoffset())->GetNumGe());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibGe*) G__getstructoffset())->GetGe((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibGe*) G__getstructoffset())->GetGePara((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibGe*) G__getstructoffset())->FindGe((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtCalibGe::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibGe::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtCalibGe::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtCalibGe::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibGe*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibGe::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibGe::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibGe::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_306_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibGe::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_306_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtCalibGe* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtCalibGe(*(TArtCalibGe*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibGe));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtCalibGe G__TTArtCalibGe;
static int G__anabrips_dict_306_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtCalibGe*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtCalibGe*) (soff+(sizeof(TArtCalibGe)*i)))->~G__TTArtCalibGe();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtCalibGe*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtCalibGe*) (soff))->~G__TTArtCalibGe();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_306_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibGe* dest = (TArtCalibGe*) G__getstructoffset();
   *dest = *(TArtCalibGe*) libp->para[0].ref;
   const TArtCalibGe& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtCalibFocalPlane */
static int G__anabrips_dict_307_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibFocalPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtCalibFocalPlane(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) TArtCalibFocalPlane(*((const TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibFocalPlane[n];
       } else {
         p = new((void*) gvp) TArtCalibFocalPlane[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibFocalPlane;
       } else {
         p = new((void*) gvp) TArtCalibFocalPlane;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibFocalPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_307_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibFocalPlane*) G__getstructoffset())->GetFocalPlaneArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_307_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtCalibFocalPlane*) G__getstructoffset())->GetNumFocalPlane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_307_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibFocalPlane*) G__getstructoffset())->GetFocalPlane((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_307_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibFocalPlane*) G__getstructoffset())->FindFocalPlane((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_307_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtCalibFocalPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_307_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibFocalPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_307_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtCalibFocalPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_307_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtCalibFocalPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_307_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibFocalPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_307_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibFocalPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_307_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibFocalPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_307_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibFocalPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_307_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibFocalPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_307_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtCalibFocalPlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtCalibFocalPlane(*(TArtCalibFocalPlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibFocalPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtCalibFocalPlane G__TTArtCalibFocalPlane;
static int G__anabrips_dict_307_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtCalibFocalPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtCalibFocalPlane*) (soff+(sizeof(TArtCalibFocalPlane)*i)))->~G__TTArtCalibFocalPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtCalibFocalPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtCalibFocalPlane*) (soff))->~G__TTArtCalibFocalPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_307_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibFocalPlane* dest = (TArtCalibFocalPlane*) G__getstructoffset();
   *dest = *(TArtCalibFocalPlane*) libp->para[0].ref;
   const TArtCalibFocalPlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtCalibPID */
static int G__anabrips_dict_308_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibPID* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtCalibPID[n];
     } else {
       p = new((void*) gvp) TArtCalibPID[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtCalibPID;
     } else {
       p = new((void*) gvp) TArtCalibPID;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibPID*) G__getstructoffset())->LoadData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibPID*) G__getstructoffset())->LoadData((TArtRawSegmentObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPID*) G__getstructoffset())->GetPPACArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPID*) G__getstructoffset())->GetPlasticArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPID*) G__getstructoffset())->GetICArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPID*) G__getstructoffset())->GetGeArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPID*) G__getstructoffset())->GetFocalPlaneArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPID*) G__getstructoffset())->GetCalibPPAC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPID*) G__getstructoffset())->GetCalibPlastic());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPID*) G__getstructoffset())->GetCalibIC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPID*) G__getstructoffset())->GetCalibGe());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibPID*) G__getstructoffset())->GetCalibFocalPlane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtCalibPID::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibPID::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtCalibPID::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtCalibPID::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibPID*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibPID::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibPID::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibPID::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_308_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibPID::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_308_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtCalibPID* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtCalibPID(*(TArtCalibPID*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPID));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtCalibPID G__TTArtCalibPID;
static int G__anabrips_dict_308_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtCalibPID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtCalibPID*) (soff+(sizeof(TArtCalibPID)*i)))->~G__TTArtCalibPID();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtCalibPID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtCalibPID*) (soff))->~G__TTArtCalibPID();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_308_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibPID* dest = (TArtCalibPID*) G__getstructoffset();
   *dest = *(TArtCalibPID*) libp->para[0].ref;
   const TArtCalibPID& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtTOF */
static int G__anabrips_dict_309_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTOF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOF[n];
     } else {
       p = new((void*) gvp) TArtTOF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOF;
     } else {
       p = new((void*) gvp) TArtTOF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOF*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOF*) G__getstructoffset())->SetTOF((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOF*) G__getstructoffset())->SetLength((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOF*) G__getstructoffset())->SetUpStreamLength((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOF*) G__getstructoffset())->SetDownStreamLength((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtTOF*) G__getstructoffset())->GetTOF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtTOF*) G__getstructoffset())->GetBeta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtTOF*) G__getstructoffset())->GetGamma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtTOF*) G__getstructoffset())->GetLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtTOF*) G__getstructoffset())->GetUpStreamLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtTOF*) G__getstructoffset())->GetDownStreamLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOF*) G__getstructoffset())->SetUpstreamPlaName((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOF*) G__getstructoffset())->SetUpstreamPlaFpl((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOF*) G__getstructoffset())->SetDownstreamPlaName((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOF*) G__getstructoffset())->SetDownstreamPlaFpl((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOF*) G__getstructoffset())->SetTimeOffset((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtTOF*) G__getstructoffset())->GetUpstreamPlaName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtTOF*) G__getstructoffset())->GetDownstreamPlaName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtTOF*) G__getstructoffset())->GetUpstreamPlaFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtTOF*) G__getstructoffset())->GetDownstreamPlaFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtTOF*) G__getstructoffset())->GetTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtTOF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtTOF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtTOF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtTOF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtTOF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtTOF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtTOF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_309_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtTOF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_309_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtTOF* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtTOF(*(TArtTOF*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtTOF G__TTArtTOF;
static int G__anabrips_dict_309_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtTOF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtTOF*) (soff+(sizeof(TArtTOF)*i)))->~G__TTArtTOF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtTOF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtTOF*) (soff))->~G__TTArtTOF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_309_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTOF* dest = (TArtTOF*) G__getstructoffset();
   *dest = *(TArtTOF*) libp->para[0].ref;
   const TArtTOF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtBeam */
static int G__anabrips_dict_310_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtBeam* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtBeam[n];
     } else {
       p = new((void*) gvp) TArtBeam[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtBeam;
     } else {
       p = new((void*) gvp) TArtBeam;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeam*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeam*) G__getstructoffset())->SetBrho((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtBeam*) G__getstructoffset())->GetBrho());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeam*) G__getstructoffset())->SetAoQ((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtBeam*) G__getstructoffset())->GetAoQ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeam*) G__getstructoffset())->SetZet((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtBeam*) G__getstructoffset())->GetZet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeam*) G__getstructoffset())->SetBeta((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtBeam*) G__getstructoffset())->GetBeta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeam*) G__getstructoffset())->SetNumRIPS((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeam*) G__getstructoffset())->SetRIPSName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeam*) G__getstructoffset())->SetUpstreamRIPSName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeam*) G__getstructoffset())->SetDownstreamRIPSName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeam*) G__getstructoffset())->SetTOFName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeam*) G__getstructoffset())->SetICName((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeam*) G__getstructoffset())->SetICName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtBeam*) G__getstructoffset())->GetNumRIPS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBeam*) G__getstructoffset())->GetRIPSName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBeam*) G__getstructoffset())->GetUpstreamRIPSName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBeam*) G__getstructoffset())->GetDownstreamRIPSName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBeam*) G__getstructoffset())->GetTOFName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBeam*) G__getstructoffset())->GetICName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtBeam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtBeam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtBeam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtBeam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtBeam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtBeam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtBeam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_310_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtBeam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_310_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtBeam* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtBeam(*(TArtBeam*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtBeam G__TTArtBeam;
static int G__anabrips_dict_310_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtBeam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtBeam*) (soff+(sizeof(TArtBeam)*i)))->~G__TTArtBeam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtBeam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtBeam*) (soff))->~G__TTArtBeam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_310_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtBeam* dest = (TArtBeam*) G__getstructoffset();
   *dest = *(TArtBeam*) libp->para[0].ref;
   const TArtBeam& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtRecoTOF */
static int G__anabrips_dict_311_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRecoTOF* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtRecoTOF(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) TArtRecoTOF(*((const TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtRecoTOF[n];
       } else {
         p = new((void*) gvp) TArtRecoTOF[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtRecoTOF;
       } else {
         p = new((void*) gvp) TArtRecoTOF;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoTOF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((TArtRecoTOF*) G__getstructoffset())->DefineNewTOF((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((TArtRecoTOF*) G__getstructoffset())->DefineNewTOF((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((TArtRecoTOF*) G__getstructoffset())->DefineNewTOF((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoTOF*) G__getstructoffset())->GetTOFArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtRecoTOF*) G__getstructoffset())->GetNumTOF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoTOF*) G__getstructoffset())->GetTOF((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoTOF*) G__getstructoffset())->FindTOF((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtRecoTOF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRecoTOF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtRecoTOF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtRecoTOF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRecoTOF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRecoTOF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtRecoTOF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRecoTOF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_311_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtRecoTOF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_311_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtRecoTOF* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtRecoTOF(*(TArtRecoTOF*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoTOF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtRecoTOF G__TTArtRecoTOF;
static int G__anabrips_dict_311_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtRecoTOF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtRecoTOF*) (soff+(sizeof(TArtRecoTOF)*i)))->~G__TTArtRecoTOF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtRecoTOF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtRecoTOF*) (soff))->~G__TTArtRecoTOF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_311_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRecoTOF* dest = (TArtRecoTOF*) G__getstructoffset();
   *dest = *(TArtRecoTOF*) libp->para[0].ref;
   const TArtRecoTOF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtRecoBeam */
static int G__anabrips_dict_312_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRecoBeam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtRecoBeam(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) TArtRecoBeam(*((const TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtRecoBeam[n];
       } else {
         p = new((void*) gvp) TArtRecoBeam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtRecoBeam;
       } else {
         p = new((void*) gvp) TArtRecoBeam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoBeam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoBeam*) G__getstructoffset())->DefineNewBeam((TArtTOF*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoBeam*) G__getstructoffset())->DefineNewBeam((TArtRIPS*) G__int(libp->para[0]), (TArtTOF*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoBeam*) G__getstructoffset())->DefineNewBeam((TArtRIPS*) G__int(libp->para[0]), (TArtRIPS*) G__int(libp->para[1])
, (TArtTOF*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoBeam*) G__getstructoffset())->GetBeamArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtRecoBeam*) G__getstructoffset())->GetNumBeam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoBeam*) G__getstructoffset())->GetBeam((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoBeam*) G__getstructoffset())->FindBeam((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (char*) G__int(libp->para[3])
, (char*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoBeam*) G__getstructoffset())->FindBeam(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (char*) G__int(libp->para[4]), (char*) G__int(libp->para[5])
, (char*) G__int(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtRecoBeam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRecoBeam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtRecoBeam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtRecoBeam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRecoBeam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRecoBeam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtRecoBeam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRecoBeam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_312_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtRecoBeam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_312_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtRecoBeam* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtRecoBeam(*(TArtRecoBeam*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoBeam));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtRecoBeam G__TTArtRecoBeam;
static int G__anabrips_dict_312_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtRecoBeam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtRecoBeam*) (soff+(sizeof(TArtRecoBeam)*i)))->~G__TTArtRecoBeam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtRecoBeam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtRecoBeam*) (soff))->~G__TTArtRecoBeam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_312_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRecoBeam* dest = (TArtRecoBeam*) G__getstructoffset();
   *dest = *(TArtRecoBeam*) libp->para[0].ref;
   const TArtRecoBeam& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtRecoPID */
static int G__anabrips_dict_313_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRecoPID* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtRecoPID[n];
     } else {
       p = new((void*) gvp) TArtRecoPID[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtRecoPID;
     } else {
       p = new((void*) gvp) TArtRecoPID;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoPID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoPID*) G__getstructoffset())->DefineNewRIPS((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoPID*) G__getstructoffset())->DefineNewRIPS((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((TArtRecoPID*) G__getstructoffset())->DefineNewTOF((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((TArtRecoPID*) G__getstructoffset())->DefineNewTOF((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((TArtRecoPID*) G__getstructoffset())->DefineNewTOF((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoPID*) G__getstructoffset())->DefineNewBeam((TArtRIPS*) G__int(libp->para[0]), (TArtTOF*) G__int(libp->para[1])
, (char*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoPID*) G__getstructoffset())->DefineNewBeam((TArtRIPS*) G__int(libp->para[0]), (TArtRIPS*) G__int(libp->para[1])
, (TArtTOF*) G__int(libp->para[2]), (char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoPID*) G__getstructoffset())->GetRIPSArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoPID*) G__getstructoffset())->GetTOFArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoPID*) G__getstructoffset())->GetBeamArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoPID*) G__getstructoffset())->GetRecoRIPS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoPID*) G__getstructoffset())->GetRecoTOF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRecoPID*) G__getstructoffset())->GetRecoBeam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtRecoPID::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRecoPID::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtRecoPID::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtRecoPID::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRecoPID*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRecoPID::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtRecoPID::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRecoPID::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_313_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtRecoPID::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_313_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtRecoPID* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtRecoPID(*(TArtRecoPID*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoPID));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtRecoPID G__TTArtRecoPID;
static int G__anabrips_dict_313_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtRecoPID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtRecoPID*) (soff+(sizeof(TArtRecoPID)*i)))->~G__TTArtRecoPID();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtRecoPID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtRecoPID*) (soff))->~G__TTArtRecoPID();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_313_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRecoPID* dest = (TArtRecoPID*) G__getstructoffset();
   *dest = *(TArtRecoPID*) libp->para[0].ref;
   const TArtRecoPID& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtFocalPlanePara */
static int G__anabrips_dict_314_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtFocalPlanePara* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtFocalPlanePara[n];
     } else {
       p = new((void*) gvp) TArtFocalPlanePara[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtFocalPlanePara;
     } else {
       p = new((void*) gvp) TArtFocalPlanePara;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtFocalPlanePara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtFocalPlanePara(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TArtFocalPlanePara(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtFocalPlanePara*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtFocalPlanePara*) G__getstructoffset())->GetFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtFocalPlanePara*) G__getstructoffset())->GetStdZpos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtFocalPlanePara*) G__getstructoffset())->GetZoffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtFocalPlanePara*) G__getstructoffset())->SetZoffset((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtFocalPlanePara::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtFocalPlanePara::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtFocalPlanePara::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtFocalPlanePara::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtFocalPlanePara*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtFocalPlanePara::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtFocalPlanePara::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtFocalPlanePara::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_314_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtFocalPlanePara::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_314_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtFocalPlanePara* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtFocalPlanePara(*(TArtFocalPlanePara*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtFocalPlanePara G__TTArtFocalPlanePara;
static int G__anabrips_dict_314_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtFocalPlanePara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtFocalPlanePara*) (soff+(sizeof(TArtFocalPlanePara)*i)))->~G__TTArtFocalPlanePara();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtFocalPlanePara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtFocalPlanePara*) (soff))->~G__TTArtFocalPlanePara();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_314_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtFocalPlanePara* dest = (TArtFocalPlanePara*) G__getstructoffset();
   *dest = *(TArtFocalPlanePara*) libp->para[0].ref;
   const TArtFocalPlanePara& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtGePara */
static int G__anabrips_dict_315_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtGePara* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtGePara[n];
     } else {
       p = new((void*) gvp) TArtGePara[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtGePara;
     } else {
       p = new((void*) gvp) TArtGePara;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtGePara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtGePara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) TArtGePara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtGePara*) G__getstructoffset())->SetParameters(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtGePara*) G__getstructoffset())->SetMap((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtGePara*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtGePara*) G__getstructoffset())->GetDetectorName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtGePara*) G__getstructoffset())->GetFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtGePara*) G__getstructoffset())->GetESlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtGePara*) G__getstructoffset())->GetEOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtGePara*) G__getstructoffset())->GetTSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtGePara*) G__getstructoffset())->GetTOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtGePara*) G__getstructoffset())->GetADCMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtGePara*) G__getstructoffset())->GetTDCMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtGePara::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtGePara::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtGePara::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtGePara::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtGePara*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtGePara::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtGePara::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtGePara::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_315_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtGePara::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_315_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtGePara* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtGePara(*(TArtGePara*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtGePara G__TTArtGePara;
static int G__anabrips_dict_315_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtGePara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtGePara*) (soff+(sizeof(TArtGePara)*i)))->~G__TTArtGePara();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtGePara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtGePara*) (soff))->~G__TTArtGePara();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_315_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtGePara* dest = (TArtGePara*) G__getstructoffset();
   *dest = *(TArtGePara*) libp->para[0].ref;
   const TArtGePara& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtGe */
static int G__anabrips_dict_316_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtGe* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtGe[n];
     } else {
       p = new((void*) gvp) TArtGe[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtGe;
     } else {
       p = new((void*) gvp) TArtGe;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtGe));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtGe*) G__getstructoffset())->SetRawADC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtGe*) G__getstructoffset())->SetRawTDC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtGe*) G__getstructoffset())->GetRawADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtGe*) G__getstructoffset())->GetRawTDC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtGe*) G__getstructoffset())->SetEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtGe*) G__getstructoffset())->SetTiming((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtGe*) G__getstructoffset())->GetEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtGe*) G__getstructoffset())->GetTiming());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtGe::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtGe::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtGe::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtGe::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtGe*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtGe::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtGe::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtGe::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_316_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtGe::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_316_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtGe* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtGe(*(TArtGe*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtGe));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtGe G__TTArtGe;
static int G__anabrips_dict_316_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtGe*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtGe*) (soff+(sizeof(TArtGe)*i)))->~G__TTArtGe();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtGe*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtGe*) (soff))->~G__TTArtGe();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_316_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtGe* dest = (TArtGe*) G__getstructoffset();
   *dest = *(TArtGe*) libp->para[0].ref;
   const TArtGe& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtPPACPara */
static int G__anabrips_dict_322_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtPPACPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtPPACPara[n];
     } else {
       p = new((void*) gvp) TArtPPACPara[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtPPACPara;
     } else {
       p = new((void*) gvp) TArtPPACPara;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtPPACPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 24
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtPPACPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Double_t) G__double(libp->para[18]), (Double_t) G__double(libp->para[19])
, (Double_t) G__double(libp->para[20]), (Double_t) G__double(libp->para[21])
, (Double_t) G__double(libp->para[22]), (Double_t) G__double(libp->para[23]));
   } else {
     p = new((void*) gvp) TArtPPACPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Double_t) G__double(libp->para[18]), (Double_t) G__double(libp->para[19])
, (Double_t) G__double(libp->para[20]), (Double_t) G__double(libp->para[21])
, (Double_t) G__double(libp->para[22]), (Double_t) G__double(libp->para[23]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPACPara*) G__getstructoffset())->SetPalameters(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Double_t) G__double(libp->para[18]), (Double_t) G__double(libp->para[19])
, (Double_t) G__double(libp->para[20]), (Double_t) G__double(libp->para[21])
, (Double_t) G__double(libp->para[22]), (Double_t) G__double(libp->para[23]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPACPara*) G__getstructoffset())->SetMap(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Int_t) G__int(libp->para[16]), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPACPara*) G__getstructoffset())->SetTx1Map((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPACPara*) G__getstructoffset())->SetTx2Map((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPACPara*) G__getstructoffset())->SetTy1Map((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPACPara*) G__getstructoffset())->SetTy2Map((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPACPara*) G__getstructoffset())->SetTaMap((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPACPara*) G__getstructoffset())->SetQx1Map((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPACPara*) G__getstructoffset())->SetQx2Map((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPACPara*) G__getstructoffset())->SetQy1Map((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPACPara*) G__getstructoffset())->SetQy2Map((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPACPara*) G__getstructoffset())->SetQaMap((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtPPACPara*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPPACPara*) G__getstructoffset())->GetDetectorName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtPPACPara*) G__getstructoffset())->GetFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetCh2NsX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetCh2NsX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetCh2NsY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetCh2NsY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetCh2NsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetXFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetYFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetXOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetYOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetXDTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetYDTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetXPosOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetYPosOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetXZPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetYZPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetTDCUnderflow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetTDCOverflow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetTXSumMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetTXSumMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetTYSumMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPPACPara*) G__getstructoffset())->GetTYSumMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPPACPara*) G__getstructoffset())->GetTX1Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPPACPara*) G__getstructoffset())->GetTX2Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPPACPara*) G__getstructoffset())->GetTY1Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPPACPara*) G__getstructoffset())->GetTY2Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPPACPara*) G__getstructoffset())->GetTAMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPPACPara*) G__getstructoffset())->GetQX1Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPPACPara*) G__getstructoffset())->GetQX2Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPPACPara*) G__getstructoffset())->GetQY1Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPPACPara*) G__getstructoffset())->GetQY2Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPPACPara*) G__getstructoffset())->GetQAMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtPPACPara::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtPPACPara::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtPPACPara::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtPPACPara::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPACPara*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtPPACPara::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtPPACPara::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtPPACPara::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_322_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtPPACPara::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_322_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtPPACPara* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtPPACPara(*(TArtPPACPara*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtPPACPara G__TTArtPPACPara;
static int G__anabrips_dict_322_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtPPACPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtPPACPara*) (soff+(sizeof(TArtPPACPara)*i)))->~G__TTArtPPACPara();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtPPACPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtPPACPara*) (soff))->~G__TTArtPPACPara();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_322_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtPPACPara* dest = (TArtPPACPara*) G__getstructoffset();
   *dest = *(TArtPPACPara*) libp->para[0].ref;
   const TArtPPACPara& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtPPAC */
static int G__anabrips_dict_323_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtPPAC* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtPPAC[n];
     } else {
       p = new((void*) gvp) TArtPPAC[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtPPAC;
     } else {
       p = new((void*) gvp) TArtPPAC;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetXZPos((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetYZPos((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPPAC*) G__getstructoffset())->GetXZPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPPAC*) G__getstructoffset())->GetYZPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTX1Raw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTX2Raw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTY1Raw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTY2Raw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTARaw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetQX1Raw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetQX2Raw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetQY1Raw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetQY2Raw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetQARaw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPPAC*) G__getstructoffset())->GetTX1Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPPAC*) G__getstructoffset())->GetTX2Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPPAC*) G__getstructoffset())->GetTY1Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPPAC*) G__getstructoffset())->GetTY2Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPPAC*) G__getstructoffset())->GetTARaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPPAC*) G__getstructoffset())->GetQX1Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPPAC*) G__getstructoffset())->GetQX2Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPPAC*) G__getstructoffset())->GetQY1Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPPAC*) G__getstructoffset())->GetQY2Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPPAC*) G__getstructoffset())->GetQARaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTX1((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTX2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTY1((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTY2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTA((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPPAC*) G__getstructoffset())->GetTX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPPAC*) G__getstructoffset())->GetTX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPPAC*) G__getstructoffset())->GetTY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPPAC*) G__getstructoffset())->GetTY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPPAC*) G__getstructoffset())->GetTA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTSumX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTSumY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPPAC*) G__getstructoffset())->GetTSumX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPPAC*) G__getstructoffset())->GetTSumY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTDiffX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetTDiffY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPPAC*) G__getstructoffset())->GetTDiffX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPPAC*) G__getstructoffset())->GetTDiffY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPPAC*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPPAC*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetFiredX((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->SetFiredY((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TArtPPAC*) G__getstructoffset())->IsFiredX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TArtPPAC*) G__getstructoffset())->IsFiredY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtPPAC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtPPAC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtPPAC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtPPAC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPPAC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtPPAC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtPPAC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtPPAC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_323_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtPPAC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_323_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtPPAC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtPPAC(*(TArtPPAC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtPPAC G__TTArtPPAC;
static int G__anabrips_dict_323_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtPPAC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtPPAC*) (soff+(sizeof(TArtPPAC)*i)))->~G__TTArtPPAC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtPPAC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtPPAC*) (soff))->~G__TTArtPPAC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_323_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtPPAC* dest = (TArtPPAC*) G__getstructoffset();
   *dest = *(TArtPPAC*) libp->para[0].ref;
   const TArtPPAC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtSi */
static int G__anabrips_dict_328_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtSi* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtSi[n];
     } else {
       p = new((void*) gvp) TArtSi[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtSi;
     } else {
       p = new((void*) gvp) TArtSi;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtSi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtSi*) G__getstructoffset())->SetIonPair((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtSi*) G__getstructoffset())->SetZCoef((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtSi*) G__getstructoffset())->SetRawADC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtSi*) G__getstructoffset())->SetRawTDC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtSi*) G__getstructoffset())->GetRawADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtSi*) G__getstructoffset())->GetRawTDC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtSi*) G__getstructoffset())->SetEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtSi*) G__getstructoffset())->SetTiming((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtSi*) G__getstructoffset())->GetEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtSi*) G__getstructoffset())->GetTiming());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtSi*) G__getstructoffset())->GetZet((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtSi::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtSi::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtSi::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtSi::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtSi*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtSi::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtSi::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtSi::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_328_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtSi::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_328_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtSi* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtSi(*(TArtSi*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtSi));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtSi G__TTArtSi;
static int G__anabrips_dict_328_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtSi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtSi*) (soff+(sizeof(TArtSi)*i)))->~G__TTArtSi();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtSi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtSi*) (soff))->~G__TTArtSi();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_328_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtSi* dest = (TArtSi*) G__getstructoffset();
   *dest = *(TArtSi*) libp->para[0].ref;
   const TArtSi& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtPlasticPara */
static int G__anabrips_dict_565_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtPlasticPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtPlasticPara[n];
     } else {
       p = new((void*) gvp) TArtPlasticPara[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtPlasticPara;
     } else {
       p = new((void*) gvp) TArtPlasticPara;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtPlasticPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 20
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtPlasticPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Double_t) G__double(libp->para[18]), (Double_t) G__double(libp->para[19]));
   } else {
     p = new((void*) gvp) TArtPlasticPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Double_t) G__double(libp->para[18]), (Double_t) G__double(libp->para[19]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlasticPara*) G__getstructoffset())->SetParameters(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Double_t) G__double(libp->para[18]), (Double_t) G__double(libp->para[19]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlasticPara*) G__getstructoffset())->SetMap(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtPlasticPara*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPlasticPara*) G__getstructoffset())->GetDetectorName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtPlasticPara*) G__getstructoffset())->GetFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetTCalLeft());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetTCalRight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetQPedLeft());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetQPedRight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetTLSlewA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetTLSlewB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetTLSlewC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetTRSlewA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetTRSlewB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetTRSlewC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetTDCUnderflow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetTDCOverflow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetZoffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetToffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetXCal0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetXCal1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtPlasticPara*) G__getstructoffset())->GetXCal2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPlasticPara*) G__getstructoffset())->GetTLMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPlasticPara*) G__getstructoffset())->GetTRMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPlasticPara*) G__getstructoffset())->GetQLMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtPlasticPara*) G__getstructoffset())->GetQRMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtPlasticPara::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtPlasticPara::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtPlasticPara::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtPlasticPara::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlasticPara*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtPlasticPara::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtPlasticPara::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtPlasticPara::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_565_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtPlasticPara::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_565_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtPlasticPara* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtPlasticPara(*(TArtPlasticPara*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtPlasticPara G__TTArtPlasticPara;
static int G__anabrips_dict_565_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtPlasticPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtPlasticPara*) (soff+(sizeof(TArtPlasticPara)*i)))->~G__TTArtPlasticPara();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtPlasticPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtPlasticPara*) (soff))->~G__TTArtPlasticPara();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_565_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtPlasticPara* dest = (TArtPlasticPara*) G__getstructoffset();
   *dest = *(TArtPlasticPara*) libp->para[0].ref;
   const TArtPlasticPara& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtICPara */
static int G__anabrips_dict_566_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtICPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtICPara[n];
     } else {
       p = new((void*) gvp) TArtICPara[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtICPara;
     } else {
       p = new((void*) gvp) TArtICPara;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtICPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 9
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtICPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
   } else {
     p = new((void*) gvp) TArtICPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtICPara*) G__getstructoffset())->SetParameters(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtICPara*) G__getstructoffset())->SetPedestal((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtICPara*) G__getstructoffset())->SetMap((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtICPara*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtICPara*) G__getstructoffset())->GetDetectorName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtICPara*) G__getstructoffset())->GetFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtICPara*) G__getstructoffset())->GetCh2MeV((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtICPara*) G__getstructoffset())->GetZCoef((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtICPara*) G__getstructoffset())->GetIonPair());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtICPara*) G__getstructoffset())->GetPedestal((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtICPara*) G__getstructoffset())->GetMap((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtICPara*) G__getstructoffset())->FindCh((TArtRIDFMap*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtICPara::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtICPara::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtICPara::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtICPara::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtICPara*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtICPara::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtICPara::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtICPara::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_566_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtICPara::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_566_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtICPara* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtICPara(*(TArtICPara*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtICPara G__TTArtICPara;
static int G__anabrips_dict_566_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtICPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtICPara*) (soff+(sizeof(TArtICPara)*i)))->~G__TTArtICPara();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtICPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtICPara*) (soff))->~G__TTArtICPara();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_566_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtICPara* dest = (TArtICPara*) G__getstructoffset();
   *dest = *(TArtICPara*) libp->para[0].ref;
   const TArtICPara& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtSiPara */
static int G__anabrips_dict_567_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtSiPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtSiPara[n];
     } else {
       p = new((void*) gvp) TArtSiPara[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtSiPara;
     } else {
       p = new((void*) gvp) TArtSiPara;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtSiPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 11
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtSiPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]));
   } else {
     p = new((void*) gvp) TArtSiPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtSiPara*) G__getstructoffset())->SetParameters(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtSiPara*) G__getstructoffset())->SetMap((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtSiPara*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtSiPara*) G__getstructoffset())->GetDetectorName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtSiPara*) G__getstructoffset())->GetFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtSiPara*) G__getstructoffset())->GetCh2MeV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtSiPara*) G__getstructoffset())->GetPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtSiPara*) G__getstructoffset())->GetCh2Ns());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtSiPara*) G__getstructoffset())->GetTOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtSiPara*) G__getstructoffset())->GetZCoef((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtSiPara*) G__getstructoffset())->GetIonPair());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtSiPara*) G__getstructoffset())->GetADCMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtSiPara*) G__getstructoffset())->GetTDCMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtSiPara::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtSiPara::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtSiPara::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtSiPara::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtSiPara*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtSiPara::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtSiPara::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtSiPara::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_567_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtSiPara::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_567_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtSiPara* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtSiPara(*(TArtSiPara*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtSiPara G__TTArtSiPara;
static int G__anabrips_dict_567_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtSiPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtSiPara*) (soff+(sizeof(TArtSiPara)*i)))->~G__TTArtSiPara();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtSiPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtSiPara*) (soff))->~G__TTArtSiPara();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_567_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtSiPara* dest = (TArtSiPara*) G__getstructoffset();
   *dest = *(TArtSiPara*) libp->para[0].ref;
   const TArtSiPara& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtRIPSPara */
static int G__anabrips_dict_568_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRIPSPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtRIPSPara[n];
     } else {
       p = new((void*) gvp) TArtRIPSPara[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtRIPSPara;
     } else {
       p = new((void*) gvp) TArtRIPSPara;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRIPSPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtRIPSPara(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (char*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TArtRIPSPara(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (char*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRIPSPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtRIPSPara(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (char*) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) TArtRIPSPara(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (char*) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRIPSPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtRIPSPara(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TArtRIPSPara(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPSPara*) G__getstructoffset())->SetUpstreamFpl((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPSPara*) G__getstructoffset())->SetDownstreamFpl((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPSPara*) G__getstructoffset())->SetBrho((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPSPara*) G__getstructoffset())->SetDipoleName((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPSPara*) G__getstructoffset())->SetMatrix((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtRIPSPara*) G__getstructoffset())->GetUpstreamFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtRIPSPara*) G__getstructoffset())->GetDownstreamFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRIPSPara*) G__getstructoffset())->GetDetectorName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRIPSPara*) G__getstructoffset())->GetDipoleName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtRIPSPara*) G__getstructoffset())->GetBrho());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtRIPSPara*) G__getstructoffset())->GetMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtRIPSPara::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRIPSPara::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtRIPSPara::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtRIPSPara::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtRIPSPara*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRIPSPara::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtRIPSPara::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtRIPSPara::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_568_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtRIPSPara::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_568_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtRIPSPara* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtRIPSPara(*(TArtRIPSPara*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtRIPSPara G__TTArtRIPSPara;
static int G__anabrips_dict_568_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtRIPSPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtRIPSPara*) (soff+(sizeof(TArtRIPSPara)*i)))->~G__TTArtRIPSPara();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtRIPSPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtRIPSPara*) (soff))->~G__TTArtRIPSPara();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_568_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtRIPSPara* dest = (TArtRIPSPara*) G__getstructoffset();
   *dest = *(TArtRIPSPara*) libp->para[0].ref;
   const TArtRIPSPara& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtTOFPara */
static int G__anabrips_dict_569_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTOFPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOFPara[n];
     } else {
       p = new((void*) gvp) TArtTOFPara[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOFPara;
     } else {
       p = new((void*) gvp) TArtTOFPara;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTOFPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOFPara(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) TArtTOFPara(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOFPara(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TArtTOFPara(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOFPara(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TArtTOFPara(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOFPara(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) TArtTOFPara(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOFPara(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TArtTOFPara(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTOFPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOFPara(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TArtTOFPara(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOFPara(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TArtTOFPara(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOFPara(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TArtTOFPara(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOFPara(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) TArtTOFPara(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtTOFPara((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TArtTOFPara((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOFPara*) G__getstructoffset())->SetUpstreamPlName((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOFPara*) G__getstructoffset())->SetDownstreamPlName((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOFPara*) G__getstructoffset())->SetOffset((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOFPara*) G__getstructoffset())->SetMiddleFpl((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOFPara*) G__getstructoffset())->SetUpstreamFpl((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOFPara*) G__getstructoffset())->SetDownstreamFpl((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtTOFPara*) G__getstructoffset())->GetDetectorName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtTOFPara*) G__getstructoffset())->GetUpstreamPlName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtTOFPara*) G__getstructoffset())->GetDownstreamPlName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtTOFPara*) G__getstructoffset())->GetOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtTOFPara*) G__getstructoffset())->GetMiddleFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtTOFPara*) G__getstructoffset())->GetUpstreamFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtTOFPara*) G__getstructoffset())->GetDownstreamFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtTOFPara::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtTOFPara::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtTOFPara::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtTOFPara::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtTOFPara*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtTOFPara::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtTOFPara::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtTOFPara::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_569_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtTOFPara::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_569_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtTOFPara* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtTOFPara(*(TArtTOFPara*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtTOFPara G__TTArtTOFPara;
static int G__anabrips_dict_569_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtTOFPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtTOFPara*) (soff+(sizeof(TArtTOFPara)*i)))->~G__TTArtTOFPara();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtTOFPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtTOFPara*) (soff))->~G__TTArtTOFPara();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_569_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtTOFPara* dest = (TArtTOFPara*) G__getstructoffset();
   *dest = *(TArtTOFPara*) libp->para[0].ref;
   const TArtTOFPara& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtBeamPara */
static int G__anabrips_dict_570_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtBeamPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtBeamPara[n];
     } else {
       p = new((void*) gvp) TArtBeamPara[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtBeamPara;
     } else {
       p = new((void*) gvp) TArtBeamPara;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtBeamPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtBeamPara(
(TArtRIPSPara*) G__int(libp->para[0]), (TArtRIPSPara*) G__int(libp->para[1])
, (TArtTOFPara*) G__int(libp->para[2]), (char*) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) TArtBeamPara(
(TArtRIPSPara*) G__int(libp->para[0]), (TArtRIPSPara*) G__int(libp->para[1])
, (TArtTOFPara*) G__int(libp->para[2]), (char*) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtBeamPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtBeamPara(
(TArtRIPSPara*) G__int(libp->para[0]), (TArtTOFPara*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TArtBeamPara(
(TArtRIPSPara*) G__int(libp->para[0]), (TArtTOFPara*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtBeamPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtBeamPara((TArtTOFPara*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TArtBeamPara((TArtTOFPara*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeamPara*) G__getstructoffset())->SetNumRIPS((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeamPara*) G__getstructoffset())->SetDetectorName((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeamPara*) G__getstructoffset())->SetUpstreamRIPSName((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeamPara*) G__getstructoffset())->SetDownstreamRIPSName((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeamPara*) G__getstructoffset())->SetTOFName((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeamPara*) G__getstructoffset())->SetDeltaEName((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtBeamPara*) G__getstructoffset())->GetNumRIPS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBeamPara*) G__getstructoffset())->GetDetectorName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBeamPara*) G__getstructoffset())->GetUpstreamRIPSName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBeamPara*) G__getstructoffset())->GetDownstreamRIPSName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBeamPara*) G__getstructoffset())->GetTOFName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtBeamPara*) G__getstructoffset())->GetDeltaEName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtBeamPara::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtBeamPara::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtBeamPara::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtBeamPara::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtBeamPara*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtBeamPara::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtBeamPara::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtBeamPara::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_570_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtBeamPara::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_570_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtBeamPara* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtBeamPara(*(TArtBeamPara*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtBeamPara G__TTArtBeamPara;
static int G__anabrips_dict_570_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtBeamPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtBeamPara*) (soff+(sizeof(TArtBeamPara)*i)))->~G__TTArtBeamPara();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtBeamPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtBeamPara*) (soff))->~G__TTArtBeamPara();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_570_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtBeamPara* dest = (TArtBeamPara*) G__getstructoffset();
   *dest = *(TArtBeamPara*) libp->para[0].ref;
   const TArtBeamPara& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtPlastic */
static int G__anabrips_dict_663_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtPlastic* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtPlastic[n];
     } else {
       p = new((void*) gvp) TArtPlastic[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtPlastic;
     } else {
       p = new((void*) gvp) TArtPlastic;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetZoffset((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetZposition((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetZoffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetZposition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetTLRaw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetTRRaw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetQLRaw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetQRRaw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetQLPed((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetQRPed((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetQAvePed((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPlastic*) G__getstructoffset())->GetTLRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPlastic*) G__getstructoffset())->GetTRRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPlastic*) G__getstructoffset())->GetQLRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPlastic*) G__getstructoffset())->GetQRRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetQAveRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetTAveCal((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetTLCal((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetTRCal((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetTLSlw((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetTRSlw((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetTAveSlw((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetTAveSlwOff((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetTDiff((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->SetXposition((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetTAveCal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetTLCal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetTRCal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetTLSlw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetTRSlw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetTAveSlw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetTAveSlwOff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetTDiff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetXposition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPlastic*) G__getstructoffset())->GetQLPed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtPlastic*) G__getstructoffset())->GetQRPed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtPlastic*) G__getstructoffset())->GetQAvePed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtPlastic::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtPlastic::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtPlastic::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtPlastic::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtPlastic*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtPlastic::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtPlastic::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtPlastic::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_663_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtPlastic::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_663_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtPlastic* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtPlastic(*(TArtPlastic*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtPlastic G__TTArtPlastic;
static int G__anabrips_dict_663_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtPlastic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtPlastic*) (soff+(sizeof(TArtPlastic)*i)))->~G__TTArtPlastic();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtPlastic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtPlastic*) (soff))->~G__TTArtPlastic();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_663_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtPlastic* dest = (TArtPlastic*) G__getstructoffset();
   *dest = *(TArtPlastic*) libp->para[0].ref;
   const TArtPlastic& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtCalibCoin */
static int G__anabrips_dict_688_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibCoin* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtCalibCoin(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) TArtCalibCoin(*((const TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibCoin[n];
       } else {
         p = new((void*) gvp) TArtCalibCoin[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibCoin;
       } else {
         p = new((void*) gvp) TArtCalibCoin;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibCoin));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_688_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibCoin*) G__getstructoffset())->LoadData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_688_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibCoin*) G__getstructoffset())->LoadData((TArtRawSegmentObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_688_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TArtCalibCoin*) G__getstructoffset())->IsChTrue((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_688_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtCalibCoin::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_688_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibCoin::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_688_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtCalibCoin::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_688_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtCalibCoin::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_688_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibCoin*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_688_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibCoin::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_688_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibCoin::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_688_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibCoin::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_688_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibCoin::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_688_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtCalibCoin* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtCalibCoin(*(TArtCalibCoin*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibCoin));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtCalibCoin G__TTArtCalibCoin;
static int G__anabrips_dict_688_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtCalibCoin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtCalibCoin*) (soff+(sizeof(TArtCalibCoin)*i)))->~G__TTArtCalibCoin();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtCalibCoin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtCalibCoin*) (soff))->~G__TTArtCalibCoin();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_688_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibCoin* dest = (TArtCalibCoin*) G__getstructoffset();
   *dest = *(TArtCalibCoin*) libp->para[0].ref;
   const TArtCalibCoin& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtCalibSi */
static int G__anabrips_dict_689_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibSi* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtCalibSi(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) TArtCalibSi(*((const TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibSi[n];
       } else {
         p = new((void*) gvp) TArtCalibSi[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibSi;
       } else {
         p = new((void*) gvp) TArtCalibSi;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibSi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibSi*) G__getstructoffset())->LoadData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibSi*) G__getstructoffset())->LoadData((TArtRawSegmentObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibSi*) G__getstructoffset())->GetSiArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtCalibSi*) G__getstructoffset())->GetNumSi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibSi*) G__getstructoffset())->GetSi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibSi*) G__getstructoffset())->GetSiPara((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibSi*) G__getstructoffset())->FindSi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtCalibSi::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibSi::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtCalibSi::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtCalibSi::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibSi*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibSi::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibSi::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibSi::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anabrips_dict_689_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibSi::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anabrips_dict_689_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtCalibSi* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtCalibSi(*(TArtCalibSi*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibSi));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtCalibSi G__TTArtCalibSi;
static int G__anabrips_dict_689_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtCalibSi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtCalibSi*) (soff+(sizeof(TArtCalibSi)*i)))->~G__TTArtCalibSi();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtCalibSi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtCalibSi*) (soff))->~G__TTArtCalibSi();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anabrips_dict_689_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibSi* dest = (TArtCalibSi*) G__getstructoffset();
   *dest = *(TArtCalibSi*) libp->para[0].ref;
   const TArtCalibSi& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TArtTKEPara */

/* TArtBigRIPSParameters */

/* TArtTKE */

/* TArtCalibTKE */

/* TArtIC */

/* TArtFocalPlane */

/* TArtRIPS */

/* TArtRecoRIPS */

/* TArtCalibPPAC */

/* TArtCalibPlastic */

/* TArtCalibIC */

/* TArtCalibGe */

/* TArtCalibFocalPlane */

/* TArtCalibPID */

/* TArtTOF */

/* TArtBeam */

/* TArtRecoTOF */

/* TArtRecoBeam */

/* TArtRecoPID */

/* TArtFocalPlanePara */

/* TArtGePara */

/* TArtGe */

/* TArtPPACPara */

/* TArtPPAC */

/* TArtSi */

/* TArtPlasticPara */

/* TArtICPara */

/* TArtSiPara */

/* TArtRIPSPara */

/* TArtTOFPara */

/* TArtBeamPara */

/* TArtPlastic */

/* TArtCalibCoin */

/* TArtCalibSi */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncanabrips_dict {
 public:
  G__Sizep2memfuncanabrips_dict(): p(&G__Sizep2memfuncanabrips_dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncanabrips_dict::*p)();
};

size_t G__get_sizep2memfuncanabrips_dict()
{
  G__Sizep2memfuncanabrips_dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceanabrips_dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara))) {
     TArtTKEPara *G__Lderived;
     G__Lderived=(TArtTKEPara*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara),G__get_linked_tagnum(&G__anabrips_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters))) {
     TArtBigRIPSParameters *G__Lderived;
     G__Lderived=(TArtBigRIPSParameters*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),G__get_linked_tagnum(&G__anabrips_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKE))) {
     TArtTKE *G__Lderived;
     G__Lderived=(TArtTKE*)0x1000;
     {
       TArtDataObject *G__Lpbase=(TArtDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKE),G__get_linked_tagnum(&G__anabrips_dictLN_TArtDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKE),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibTKE))) {
     TArtCalibTKE *G__Lderived;
     G__Lderived=(TArtCalibTKE*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibTKE),G__get_linked_tagnum(&G__anabrips_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtDataObject))) {
     TArtDataObject *G__Lderived;
     G__Lderived=(TArtDataObject*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtDataObject),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC))) {
     TArtIC *G__Lderived;
     G__Lderived=(TArtIC*)0x1000;
     {
       TArtDataObject *G__Lpbase=(TArtDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC),G__get_linked_tagnum(&G__anabrips_dictLN_TArtDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlane))) {
     TArtFocalPlane *G__Lderived;
     G__Lderived=(TArtFocalPlane*)0x1000;
     {
       TArtDataObject *G__Lpbase=(TArtDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlane),G__get_linked_tagnum(&G__anabrips_dictLN_TArtDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlane),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS))) {
     TArtRIPS *G__Lderived;
     G__Lderived=(TArtRIPS*)0x1000;
     {
       TArtDataObject *G__Lpbase=(TArtDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS),G__get_linked_tagnum(&G__anabrips_dictLN_TArtDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoRIPS))) {
     TArtRecoRIPS *G__Lderived;
     G__Lderived=(TArtRecoRIPS*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoRIPS),G__get_linked_tagnum(&G__anabrips_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPPAC))) {
     TArtCalibPPAC *G__Lderived;
     G__Lderived=(TArtCalibPPAC*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPPAC),G__get_linked_tagnum(&G__anabrips_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPlastic))) {
     TArtCalibPlastic *G__Lderived;
     G__Lderived=(TArtCalibPlastic*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPlastic),G__get_linked_tagnum(&G__anabrips_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibIC))) {
     TArtCalibIC *G__Lderived;
     G__Lderived=(TArtCalibIC*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibIC),G__get_linked_tagnum(&G__anabrips_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibGe))) {
     TArtCalibGe *G__Lderived;
     G__Lderived=(TArtCalibGe*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibGe),G__get_linked_tagnum(&G__anabrips_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibFocalPlane))) {
     TArtCalibFocalPlane *G__Lderived;
     G__Lderived=(TArtCalibFocalPlane*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibFocalPlane),G__get_linked_tagnum(&G__anabrips_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPID))) {
     TArtCalibPID *G__Lderived;
     G__Lderived=(TArtCalibPID*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPID),G__get_linked_tagnum(&G__anabrips_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF))) {
     TArtTOF *G__Lderived;
     G__Lderived=(TArtTOF*)0x1000;
     {
       TArtDataObject *G__Lpbase=(TArtDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF),G__get_linked_tagnum(&G__anabrips_dictLN_TArtDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam))) {
     TArtBeam *G__Lderived;
     G__Lderived=(TArtBeam*)0x1000;
     {
       TArtDataObject *G__Lpbase=(TArtDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam),G__get_linked_tagnum(&G__anabrips_dictLN_TArtDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoTOF))) {
     TArtRecoTOF *G__Lderived;
     G__Lderived=(TArtRecoTOF*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoTOF),G__get_linked_tagnum(&G__anabrips_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoBeam))) {
     TArtRecoBeam *G__Lderived;
     G__Lderived=(TArtRecoBeam*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoBeam),G__get_linked_tagnum(&G__anabrips_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoPID))) {
     TArtRecoPID *G__Lderived;
     G__Lderived=(TArtRecoPID*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoPID),G__get_linked_tagnum(&G__anabrips_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara))) {
     TArtFocalPlanePara *G__Lderived;
     G__Lderived=(TArtFocalPlanePara*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara),G__get_linked_tagnum(&G__anabrips_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara))) {
     TArtGePara *G__Lderived;
     G__Lderived=(TArtGePara*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara),G__get_linked_tagnum(&G__anabrips_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtGe))) {
     TArtGe *G__Lderived;
     G__Lderived=(TArtGe*)0x1000;
     {
       TArtDataObject *G__Lpbase=(TArtDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtGe),G__get_linked_tagnum(&G__anabrips_dictLN_TArtDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtGe),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara))) {
     TArtPPACPara *G__Lderived;
     G__Lderived=(TArtPPACPara*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara),G__get_linked_tagnum(&G__anabrips_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC))) {
     TArtPPAC *G__Lderived;
     G__Lderived=(TArtPPAC*)0x1000;
     {
       TArtDataObject *G__Lpbase=(TArtDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC),G__get_linked_tagnum(&G__anabrips_dictLN_TArtDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtSi))) {
     TArtSi *G__Lderived;
     G__Lderived=(TArtSi*)0x1000;
     {
       TArtDataObject *G__Lpbase=(TArtDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtSi),G__get_linked_tagnum(&G__anabrips_dictLN_TArtDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtSi),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara))) {
     TArtPlasticPara *G__Lderived;
     G__Lderived=(TArtPlasticPara*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara),G__get_linked_tagnum(&G__anabrips_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara))) {
     TArtICPara *G__Lderived;
     G__Lderived=(TArtICPara*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara),G__get_linked_tagnum(&G__anabrips_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara))) {
     TArtSiPara *G__Lderived;
     G__Lderived=(TArtSiPara*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara),G__get_linked_tagnum(&G__anabrips_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara))) {
     TArtRIPSPara *G__Lderived;
     G__Lderived=(TArtRIPSPara*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara),G__get_linked_tagnum(&G__anabrips_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara))) {
     TArtTOFPara *G__Lderived;
     G__Lderived=(TArtTOFPara*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara),G__get_linked_tagnum(&G__anabrips_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara))) {
     TArtBeamPara *G__Lderived;
     G__Lderived=(TArtBeamPara*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara),G__get_linked_tagnum(&G__anabrips_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic))) {
     TArtPlastic *G__Lderived;
     G__Lderived=(TArtPlastic*)0x1000;
     {
       TArtDataObject *G__Lpbase=(TArtDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic),G__get_linked_tagnum(&G__anabrips_dictLN_TArtDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic),G__get_linked_tagnum(&G__anabrips_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibCoin))) {
     TArtCalibCoin *G__Lderived;
     G__Lderived=(TArtCalibCoin*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibCoin),G__get_linked_tagnum(&G__anabrips_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibSi))) {
     TArtCalibSi *G__Lderived;
     G__Lderived=(TArtCalibSi*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibSi),G__get_linked_tagnum(&G__anabrips_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableanabrips_dict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__anabrips_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__anabrips_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__anabrips_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__anabrips_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtTKEPara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtTKEParamUcOallocatorlETArtTKEParamUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtTKEParamUcOallocatorlETArtTKEParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtTKEParamUcOallocatorlETArtTKEParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtTKEParamUcOallocatorlETArtTKEParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtTKEParamUcOallocatorlETArtTKEParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorD",117,G__get_linked_tagnum(&G__anabrips_dictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixD",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparse<Double_t>",117,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTSparselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtFocalPlane*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtFocalPlanemUcOallocatorlETArtFocalPlanemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtFocalPlanemUcOallocatorlETArtFocalPlanemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtFocalPlanemUcOallocatorlETArtFocalPlanemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtFocalPlanemUcOallocatorlETArtFocalPlanemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtFocalPlanemUcOallocatorlETArtFocalPlanemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtGePara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtGeParamUcOallocatorlETArtGeParamUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtGeParamUcOallocatorlETArtGeParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtGeParamUcOallocatorlETArtGeParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtGeParamUcOallocatorlETArtGeParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtGeParamUcOallocatorlETArtGeParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtPPACPara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPPACParamUcOallocatorlETArtPPACParamUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPPACParamUcOallocatorlETArtPPACParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPPACParamUcOallocatorlETArtPPACParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPPACParamUcOallocatorlETArtPPACParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPPACParamUcOallocatorlETArtPPACParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtPPACPara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtPPACParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtPPACParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtPPACPara*,less<TArtRIDFMap> >",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtPPACParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtPPACParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtPlasticPara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtPlasticParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtPlasticParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtPlasticPara*,less<TArtRIDFMap> >",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtPlasticParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtPlasticParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TArtPlasticPara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETStringcOTArtPlasticParamUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArtPlasticParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TArtPlasticPara*,less<TString> >",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETStringcOTArtPlasticParamUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArtPlasticParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TArtTOFPara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETStringcOTArtTOFParamUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArtTOFParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TArtTOFPara*,less<TString> >",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETStringcOTArtTOFParamUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArtTOFParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtICPara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtICParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtICParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtICPara*,less<TArtRIDFMap> >",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtICParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtICParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtGePara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtGeParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtGeParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtGePara*,less<TArtRIDFMap> >",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtGeParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtGeParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtSiPara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtSiParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtSiParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtSiPara*,less<TArtRIDFMap> >",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtSiParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtSiParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtTKEPara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtTKEParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtTKEParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtTKEPara*,less<TArtRIDFMap> >",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtTKEParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtTKEParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TArtFocalPlanePara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplEintcOTArtFocalPlaneParamUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTArtFocalPlaneParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TArtFocalPlanePara*,less<int> >",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplEintcOTArtFocalPlaneParamUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTArtFocalPlaneParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Dipole>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtBigRIPSParameterscLcLDipolecOallocatorlETArtBigRIPSParameterscLcLDipolegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtBigRIPSParameterscLcLDipolecOallocatorlETArtBigRIPSParameterscLcLDipolegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtBigRIPSParameterscLcLDipolecOallocatorlETArtBigRIPSParameterscLcLDipolegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtBigRIPSParameterscLcLDipolecOallocatorlETArtBigRIPSParameterscLcLDipolegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtBigRIPSParameterscLcLDipolecOallocatorlETArtBigRIPSParameterscLcLDipolegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtBigRIPSParameters::Dipole>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtBigRIPSParameterscLcLDipolecOallocatorlETArtBigRIPSParameterscLcLDipolegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,int>",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOintcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,int,less<TArtRIDFMap> >",117,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOintcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtICPara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtICParamUcOallocatorlETArtICParamUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtICParamUcOallocatorlETArtICParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtICParamUcOallocatorlETArtICParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtICParamUcOallocatorlETArtICParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtICParamUcOallocatorlETArtICParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtPPAC*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<TArtPPAC*>*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<TArtPPAC*>*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<TArtPPAC*,allocator<TArtPPAC*> >*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtPlasticPara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPlasticParamUcOallocatorlETArtPlasticParamUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPlasticParamUcOallocatorlETArtPlasticParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPlasticParamUcOallocatorlETArtPlasticParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPlasticParamUcOallocatorlETArtPlasticParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPlasticParamUcOallocatorlETArtPlasticParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtRIPS*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtRIPSmUcOallocatorlETArtRIPSmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtRIPSmUcOallocatorlETArtRIPSmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtRIPSmUcOallocatorlETArtRIPSmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtRIPSmUcOallocatorlETArtRIPSmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtRIPSmUcOallocatorlETArtRIPSmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtTOF*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtTOFmUcOallocatorlETArtTOFmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtTOFmUcOallocatorlETArtTOFmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtTOFmUcOallocatorlETArtTOFmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtTOFmUcOallocatorlETArtTOFmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtTOFmUcOallocatorlETArtTOFmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtIC*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtICmUcOallocatorlETArtICmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtICmUcOallocatorlETArtICmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtICmUcOallocatorlETArtICmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtICmUcOallocatorlETArtICmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtICmUcOallocatorlETArtICmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtPlastic*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPlasticmUcOallocatorlETArtPlasticmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPlasticmUcOallocatorlETArtPlasticmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPlasticmUcOallocatorlETArtPlasticmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPlasticmUcOallocatorlETArtPlasticmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPlasticmUcOallocatorlETArtPlasticmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtSiPara*>",117,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtSiParamUcOallocatorlETArtSiParamUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtSiParamUcOallocatorlETArtSiParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtSiParamUcOallocatorlETArtSiParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtSiParamUcOallocatorlETArtSiParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtSiParamUcOallocatorlETArtSiParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TArtTKEPara */
static void G__setup_memvarTArtTKEPara(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara));
   { TArtTKEPara *p; p=(TArtTKEPara*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"id=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,2,"detname=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numadc=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"e_ped=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"e_ch2mev=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"t_offset=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"t_ch2nsec=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,2,"map_adc=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,2,"map_tdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"e_pedarray[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"e_ch2mevarray[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"t_offsetarray[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"t_ch2nsecarray[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,2,"map_adcarray[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,2,"map_tdcarray[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOintcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOintgRsPgRsPgR),G__defined_typename("map<TArtRIDFMap,int>"),-1,2,"chmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtBigRIPSParameters */
static void G__setup_memvarTArtBigRIPSParameters(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters));
   { TArtBigRIPSParameters *p; p=(TArtBigRIPSParameters*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtPPACParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtPPACParamUgRsPgRsPgR),G__defined_typename("map<TArtRIDFMap,TArtPPACPara*>"),-1,2,"ppac_pmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtPlasticParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtPlasticParamUgRsPgRsPgR),G__defined_typename("map<TArtRIDFMap,TArtPlasticPara*>"),-1,2,"pla_pmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_maplETStringcOTArtPlasticParamUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArtPlasticParamUgRsPgRsPgR),G__defined_typename("map<TString,TArtPlasticPara*>"),-1,2,"pla_name_pmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_maplETStringcOTArtTOFParamUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArtTOFParamUgRsPgRsPgR),G__defined_typename("map<TString,TArtTOFPara*>"),-1,2,"tof_pmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtICParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtICParamUgRsPgRsPgR),G__defined_typename("map<TArtRIDFMap,TArtICPara*>"),-1,2,"ic_pmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtGeParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtGeParamUgRsPgRsPgR),G__defined_typename("map<TArtRIDFMap,TArtGePara*>"),-1,2,"ge_pmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtSiParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtSiParamUgRsPgRsPgR),G__defined_typename("map<TArtRIDFMap,TArtSiPara*>"),-1,2,"si_pmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtTKEParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtTKEParamUgRsPgRsPgR),G__defined_typename("map<TArtRIDFMap,TArtTKEPara*>"),-1,2,"tke_pmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_maplEintcOTArtFocalPlaneParamUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTArtFocalPlaneParamUgRsPgRsPgR),G__defined_typename("map<int,TArtFocalPlanePara*>"),-1,2,"fpl_pmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TList),-1,-1,2,"listOfPPACPara=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TList),-1,-1,2,"listOfPlasticPara=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TList),-1,-1,2,"listOfICPara=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TList),-1,-1,2,"listOfGePara=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TList),-1,-1,2,"listOfSiPara=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TList),-1,-1,2,"listOfTKEPara=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TList),-1,-1,2,"listOfFocalPlanePara=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TList),-1,-1,2,"listOfRIPSPara=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TList),-1,-1,2,"listOfTOFPara=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TList),-1,-1,2,"listOfBeamPara=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),-1,-2,2,"fBigRIPSParameters=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dipoles)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtBigRIPSParameterscLcLDipolecOallocatorlETArtBigRIPSParameterscLcLDipolegRsPgR),G__defined_typename("vector<Dipole>"),-1,1,"dipoles=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtTKE */
static void G__setup_memvarTArtTKE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKE));
   { TArtTKE *p; p=(TArtTKE*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"numadc=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fADC=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTDC=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTiming=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fADCArray[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTDCArray[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEnergyArray[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTimingArray[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtCalibTKE */
static void G__setup_memvarTArtCalibTKE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibTKE));
   { TArtCalibTKE *p; p=(TArtCalibTKE*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,4,"fTKEArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtTKEParamUcOallocatorlETArtTKEParamUgRsPgR),G__defined_typename("vector<TArtTKEPara*>"),-1,4,"fTKEParaArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),-1,-1,4,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtStoreManager),-1,-1,4,"sman=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtIC */
static void G__setup_memvarTArtIC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC));
   { TArtIC *p; p=(TArtIC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zcoef[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ionpair=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nhitchannel=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fADC[12]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPedADC[12]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEnergy[12]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPedADCSqSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPedADCAvSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCalMeVSqSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCalMeVAvSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtFocalPlane */
static void G__setup_memvarTArtFocalPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlane));
   { TArtFocalPlane *p; p=(TArtFocalPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,4,"opt_vector=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"X=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"A=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"Y=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"B=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nfired_ppacx=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nfired_ppacy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zpos=",0,"standard z-position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zpos_offset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtRIPS */
static void G__setup_memvarTArtRIPS(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS));
   { TArtRIPS *p; p=(TArtRIPS*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"upstream_fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"downstream_fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"center_brho=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"brho=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"length=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,4,"matrix=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"delta=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"angle=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"dipolename=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtRecoRIPS */
static void G__setup_memvarTArtRecoRIPS(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoRIPS));
   { TArtRecoRIPS *p; p=(TArtRecoRIPS*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isSetDipole=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,4,"fRIPSArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),-1,-1,4,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtStoreManager),-1,-1,4,"sman=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtFocalPlanemUcOallocatorlETArtFocalPlanemUgRsPgR),G__defined_typename("vector<TArtFocalPlane*>"),-1,4,"fUpstreamFplArrayBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtFocalPlanemUcOallocatorlETArtFocalPlanemUgRsPgR),G__defined_typename("vector<TArtFocalPlane*>"),-1,4,"fDownstreamFplArrayBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtCalibPPAC */
static void G__setup_memvarTArtCalibPPAC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPPAC));
   { TArtCalibPPAC *p; p=(TArtCalibPPAC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,4,"fPPACArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPPACParamUcOallocatorlETArtPPACParamUgRsPgR),G__defined_typename("vector<TArtPPACPara*>"),-1,4,"fPPACParaArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),-1,-1,4,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtStoreManager),-1,-1,4,"sman=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtCalibPlastic */
static void G__setup_memvarTArtCalibPlastic(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPlastic));
   { TArtCalibPlastic *p; p=(TArtCalibPlastic*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,2,"fPlasticArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPlasticParamUcOallocatorlETArtPlasticParamUgRsPgR),G__defined_typename("vector<TArtPlasticPara*>"),-1,2,"fPlasticParaArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),-1,-1,2,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtStoreManager),-1,-1,2,"sman=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtCalibIC */
static void G__setup_memvarTArtCalibIC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibIC));
   { TArtCalibIC *p; p=(TArtCalibIC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,2,"fICArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtICParamUcOallocatorlETArtICParamUgRsPgR),G__defined_typename("vector<TArtICPara*>"),-1,2,"fICParaArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),-1,-1,2,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtStoreManager),-1,-1,2,"sman=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtCalibGe */
static void G__setup_memvarTArtCalibGe(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibGe));
   { TArtCalibGe *p; p=(TArtCalibGe*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,4,"fGeArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtGeParamUcOallocatorlETArtGeParamUgRsPgR),G__defined_typename("vector<TArtGePara*>"),-1,4,"fGeParaArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),-1,-1,4,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtStoreManager),-1,-1,4,"sman=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtCalibFocalPlane */
static void G__setup_memvarTArtCalibFocalPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibFocalPlane));
   { TArtCalibFocalPlane *p; p=(TArtCalibFocalPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,4,"fFocalPlaneArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgR),G__defined_typename("vector<std::vector<TArtPPAC*>*>"),-1,4,"fPPACArrayBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),-1,-1,4,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtStoreManager),-1,-1,4,"sman=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtCalibPID */
static void G__setup_memvarTArtCalibPID(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPID));
   { TArtCalibPID *p; p=(TArtCalibPID*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPPAC),-1,-1,4,"fCalibPPAC=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibIC),-1,-1,4,"fCalibIC=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibGe),-1,-1,4,"fCalibGe=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPlastic),-1,-1,4,"fCalibPlastic=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibFocalPlane),-1,-1,4,"fCalibFocalPlane=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),-1,-1,4,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtStoreManager),-1,-1,4,"sman=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtTOF */
static void G__setup_memvarTArtTOF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF));
   { TArtTOF *p; p=(TArtTOF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tof=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"clight=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"length=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ulength=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"dlength=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"upstream_plname=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"downstream_plname=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"upstream_plfpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"downstream_plfpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"time_offset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtBeam */
static void G__setup_memvarTArtBeam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam));
   { TArtBeam *p; p=(TArtBeam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"brho=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"aoq=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zet=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"beta=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"clight=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"mnucleon=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nrips=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"ripsname[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"tofname=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"icname=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtRecoTOF */
static void G__setup_memvarTArtRecoTOF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoTOF));
   { TArtRecoTOF *p; p=(TArtRecoTOF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,2,"fTOFArray=",0,"out");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,2,"pla_array=",0,"in");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtStoreManager),-1,-1,2,"sman=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),-1,-1,4,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPlasticmUcOallocatorlETArtPlasticmUgRsPgR),G__defined_typename("vector<TArtPlastic*>"),-1,4,"fUpstreamPlaArrayBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtPlasticmUcOallocatorlETArtPlasticmUgRsPgR),G__defined_typename("vector<TArtPlastic*>"),-1,4,"fDownstreamPlaArrayBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtRecoBeam */
static void G__setup_memvarTArtRecoBeam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoBeam));
   { TArtRecoBeam *p; p=(TArtRecoBeam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,4,"fBeamArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),-1,-1,4,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtStoreManager),-1,-1,4,"sman=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"clight=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"mnucleon=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,4,"rips_array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,4,"tof_array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,4,"ic_array=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtRIPSmUcOallocatorlETArtRIPSmUgRsPgR),G__defined_typename("vector<TArtRIPS*>"),-1,4,"fUpstreamRIPSArrayBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtRIPSmUcOallocatorlETArtRIPSmUgRsPgR),G__defined_typename("vector<TArtRIPS*>"),-1,4,"fDownstreamRIPSArrayBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtTOFmUcOallocatorlETArtTOFmUgRsPgR),G__defined_typename("vector<TArtTOF*>"),-1,4,"fTOFArrayBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtICmUcOallocatorlETArtICmUgRsPgR),G__defined_typename("vector<TArtIC*>"),-1,4,"fICArrayBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtRecoPID */
static void G__setup_memvarTArtRecoPID(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoPID));
   { TArtRecoPID *p; p=(TArtRecoPID*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoRIPS),-1,-1,4,"fRecoRIPS=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoTOF),-1,-1,4,"fRecoTOF=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoBeam),-1,-1,4,"fRecoBeam=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtFocalPlanePara */
static void G__setup_memvarTArtFocalPlanePara(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara));
   { TArtFocalPlanePara *p; p=(TArtFocalPlanePara*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"id=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zpos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zpos_offset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtGePara */
static void G__setup_memvarTArtGePara(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara));
   { TArtGePara *p; p=(TArtGePara*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"id=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"detname=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"e_offset=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"e_slope=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"t_offset=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"t_slope=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_adc=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_tdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtGe */
static void G__setup_memvarTArtGe(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtGe));
   { TArtGe *p; p=(TArtGe*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fADC=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTDC=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtPPACPara */
static void G__setup_memvarTArtPPACPara(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara));
   { TArtPPACPara *p; p=(TArtPPACPara*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"id=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"detname=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ch2ns_a=",0,"TDC calibration factor for a");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ch2ns_x1=",0,"TDC calibration factor for x1");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ch2ns_y1=",0,"TDC calibration factor for y1");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ch2ns_x2=",0,"TDC calibration factor for x2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ch2ns_y2=",0,"TDC calibration factor for y2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"xfactor=",0,"ns->mm calibration factor depending on delay line");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"yfactor=",0,"ns->mm calibration factor depending on delay line");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"xoffset=",0,"geometrical offset of x-plane in x-dir. inside of PPAC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"yoffset=",0,"geometrical offset of y-plane in y-dir. inside of PPAC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"xns_off=",0,"timing offset of x-plane coming from differenct of left hand and right hand side cable length");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"yns_off=",0,"timing offset of y-plane coming from differenct of left hand and right hand side cable length");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"xpos_off=",0,"geometrical offset of x-plane in x-dir.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ypos_off=",0,"geometrical offset of y-plane in y-dir.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"xzpos=",0,"z-position offset for x-plane wrt fpl position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"yzpos=",0,"z-position offset for y-plane wrt fpl position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tdc_underflow=",0,"tdc under flow value");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tdc_overflow=",0,"tdc over flow value");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"txsum_min=",0,"cut for timing sum. disabled if min>=max ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"txsum_max=",0,"cut for timing sum. disabled if min>=max ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tysum_min=",0,"cut for timing sum. disabled if min>=max ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tysum_max=",0,"cut for timing sum. disabled if min>=max ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_tx1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_tx2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_ty1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_ty2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_ta=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_qx1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_qx2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_qy1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_qy2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_qa=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtPPAC */
static void G__setup_memvarTArtPPAC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC));
   { TArtPPAC *p; p=(TArtPPAC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"xzpos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"yzpos=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTX1Raw=",0,"timing raw data ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTX2Raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTY1Raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTY2Raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTARaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fQX1Raw=",0,"charge raw data, which are not used for reconstruction.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fQX2Raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fQY1Raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fQY2Raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fQARaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTX1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTX2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTY1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTY2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTA=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTSumX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTSumY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTDiffX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTDiffY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fFiredX=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fFiredY=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtSi */
static void G__setup_memvarTArtSi(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtSi));
   { TArtSi *p; p=(TArtSi*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zcoef[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ionpair=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fADC=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTDC=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtPlasticPara */
static void G__setup_memvarTArtPlasticPara(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara));
   { TArtPlasticPara *p; p=(TArtPlasticPara*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"id=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"detname=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tcal_left=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tcal_right=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"qped_left=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"qped_right=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tslew_left_a=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tslew_left_b=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tslew_left_c=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tslew_right_a=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tslew_right_b=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tslew_right_c=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tdc_underflow=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tdc_overflow=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zoffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"toffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"xcal0=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"xcal1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"xcal2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_tleft=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_tright=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_qleft=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_qright=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtICPara */
static void G__setup_memvarTArtICPara(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara));
   { TArtICPara *p; p=(TArtICPara*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"id=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"detname=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ch2mev[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zcoef[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ionpair=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"pedestal[12]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map[12]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_maplETArtRIDFMapcOintcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOintgRsPgRsPgR),G__defined_typename("map<TArtRIDFMap,int>"),-1,4,"chmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtSiPara */
static void G__setup_memvarTArtSiPara(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara));
   { TArtSiPara *p; p=(TArtSiPara*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"id=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"detname=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"pedestal=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ch2mev=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zcoef[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ionpair=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"t_offset=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ch2ns=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_adc=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap),-1,-1,4,"map_tdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtRIPSPara */
static void G__setup_memvarTArtRIPSPara(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara));
   { TArtRIPSPara *p; p=(TArtRIPSPara*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"detname=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"dipole_name=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"up_fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"down_fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"brho=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,4,"matrix=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtTOFPara */
static void G__setup_memvarTArtTOFPara(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara));
   { TArtTOFPara *p; p=(TArtTOFPara*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"detname=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"upstream_plname=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"downstream_plname=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"offset=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"middle_fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"upstream_fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"downstream_fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtBeamPara */
static void G__setup_memvarTArtBeamPara(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara));
   { TArtBeamPara *p; p=(TArtBeamPara*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nrips=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"detname=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"upstream_rips_name=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"downstream_rips_name=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"tof_name=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TString),-1,-1,4,"deltae_name=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtPlastic */
static void G__setup_memvarTArtPlastic(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic));
   { TArtPlastic *p; p=(TArtPlastic*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zposition=",0,"global position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zoffset=",0,"offset in a fpl");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTLRaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTRRaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fQLRaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fQRRaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTAveCal=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTLCal=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTRCal=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTLSlw=",0,"after slewing correction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTRSlw=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTAveSlw=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTAveSlwOff=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fQLPed=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fQRPed=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fQAvePed=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTDiff=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fXpos=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtCalibCoin */
static void G__setup_memvarTArtCalibCoin(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibCoin));
   { TArtCalibCoin *p; p=(TArtCalibCoin*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtStoreManager),-1,-1,2,"sman=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"val=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtCalibSi */
static void G__setup_memvarTArtCalibSi(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibSi));
   { TArtCalibSi *p; p=(TArtCalibSi*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray),-1,-1,4,"fSiArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_vectorlETArtSiParamUcOallocatorlETArtSiParamUgRsPgR),G__defined_typename("vector<TArtSiPara*>"),-1,4,"fSiParaArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters),-1,-1,4,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TArtStoreManager),-1,-1,4,"sman=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anabrips_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvaranabrips_dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTArtTKEPara(void) {
   /* TArtTKEPara */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara));
   G__memfunc_setup("TArtTKEPara",995,G__anabrips_dict_218_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtTKEPara",995,G__anabrips_dict_218_0_2, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - ech2mev "
"d - 'Double_t' 0 - eped", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtTKEPara",995,G__anabrips_dict_218_0_3, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f D - 'Double_t' 0 - ech2mev "
"D - 'Double_t' 0 - eped", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtTKEPara",995,G__anabrips_dict_218_0_4, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara), -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - ech2mev "
"d - 'Double_t' 0 - eped d - 'Double_t' 0 - tch2nsec "
"d - 'Double_t' 0 - toffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtTKEPara",995,G__anabrips_dict_218_0_5, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara), -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f D - 'Double_t' 0 - ech2mev "
"D - 'Double_t' 0 - eped D - 'Double_t' 0 - tch2nsec "
"D - 'Double_t' 0 - toffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameters",1344,G__anabrips_dict_218_0_6, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - ech2mev "
"d - 'Double_t' 0 - eped d - 'Double_t' 0 - tch2nsec "
"d - 'Double_t' 0 - toffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameters",1344,G__anabrips_dict_218_0_7, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f D - 'Double_t' 0 - ech2mev "
"D - 'Double_t' 0 - eped D - 'Double_t' 0 - tch2nsec "
"D - 'Double_t' 0 - toffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap",586,G__anabrips_dict_218_0_8, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - qfpl i - 'Int_t' 0 - qdet "
"i - 'Int_t' 0 - qgeo i - 'Int_t' 0 - qch "
"i - 'Int_t' 0 - tfpl i - 'Int_t' 0 - tdet "
"i - 'Int_t' 0 - tgeo i - 'Int_t' 0 - tch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap",586,G__anabrips_dict_218_0_9, 121, -1, -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - qfpl "
"i - 'Int_t' 0 - qdet i - 'Int_t' 0 - qgeo "
"i - 'Int_t' 0 - qch i - 'Int_t' 0 - tfpl "
"i - 'Int_t' 0 - tdet i - 'Int_t' 0 - tgeo "
"i - 'Int_t' 0 - tch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap",586,G__anabrips_dict_218_0_10, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - tdet i - 'Int_t' 0 - tgeo "
"i - 'Int_t' 0 - tch i - 'Int_t' 0 - qdet "
"i - 'Int_t' 0 - qgeo i - 'Int_t' 0 - qch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap",586,G__anabrips_dict_218_0_11, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - qfpl i - 'Int_t' 0 - qdet "
"i - 'Int_t' 0 - qgeo i - 'Int_t' 0 - qch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__anabrips_dict_218_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorName",1499,G__anabrips_dict_218_0_13, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpl",578,G__anabrips_dict_218_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetECh2MeV",842,G__anabrips_dict_218_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEPedestal",1175,G__anabrips_dict_218_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetECh2MeV",842,G__anabrips_dict_218_0_17, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEPedestal",1175,G__anabrips_dict_218_0_18, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTCh2nsec",1018,G__anabrips_dict_218_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOffset",987,G__anabrips_dict_218_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTCh2nsec",1018,G__anabrips_dict_218_0_21, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOffset",987,G__anabrips_dict_218_0_22, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumADC",792,G__anabrips_dict_218_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADCMap",774,G__anabrips_dict_218_0_24, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADCMap",774,G__anabrips_dict_218_0_25, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCh",556,G__anabrips_dict_218_0_26, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TArtRIDFMap' - 0 - rmap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTDCMap",793,G__anabrips_dict_218_0_27, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTDCMap",793,G__anabrips_dict_218_0_28, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_218_0_29, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtTKEPara::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_218_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtTKEPara::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_218_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtTKEPara::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_218_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtTKEPara::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_218_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_218_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtTKEPara::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_218_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtTKEPara::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_218_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtTKEPara::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_218_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtTKEPara::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtTKEPara", 995, G__anabrips_dict_218_0_41, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara), -1, 0, 1, 1, 1, 0, "u 'TArtTKEPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtTKEPara", 1121, G__anabrips_dict_218_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_218_0_43, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara), -1, 1, 1, 1, 1, 0, "u 'TArtTKEPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtBigRIPSParameters(void) {
   /* TArtBigRIPSParameters */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters));
   G__memfunc_setup("TArtBigRIPSParameters",2015,G__anabrips_dict_219_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters), -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"BigRIPSParameters\"' name C - - 10 '\"BigRIPSParameters\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__anabrips_dict_219_0_2, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters), -1, 0, 2, 3, 1, 0, 
"C - - 10 '\"BigRIPSParameters\"' name C - - 10 '\"BigRIPSParameters\"' title", (char*)NULL, (void*) G__func2void( (TArtBigRIPSParameters* (*)(const char*, const char*))(&TArtBigRIPSParameters::Instance) ), 0);
   G__memfunc_setup("Delete",595,G__anabrips_dict_219_0_3, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtBigRIPSParameters::Delete) ), 0);
   G__memfunc_setup("LoadParameter",1313,G__anabrips_dict_219_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 0 - xmlfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintListOfPPACPara",1798,G__anabrips_dict_219_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintListOfPlasticPara",2226,G__anabrips_dict_219_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintListOfICPara",1646,G__anabrips_dict_219_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintListOfGePara",1678,G__anabrips_dict_219_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintListOfSiPara",1694,G__anabrips_dict_219_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintListOfTKEPara",1734,G__anabrips_dict_219_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintListOfFocalPlanePara",2487,G__anabrips_dict_219_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRIPSPara",971,G__anabrips_dict_219_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArtRIPSPara' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTOFPara",886,G__anabrips_dict_219_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArtTOFPara' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddBeamPara",1026,G__anabrips_dict_219_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArtBeamPara' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfPPACPara",1561,G__anabrips_dict_219_0_15, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfPlasticPara",1989,G__anabrips_dict_219_0_16, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfICPara",1409,G__anabrips_dict_219_0_17, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfGePara",1441,G__anabrips_dict_219_0_18, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfSiPara",1457,G__anabrips_dict_219_0_19, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfTKEPara",1497,G__anabrips_dict_219_0_20, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfFocalPlanePara",2250,G__anabrips_dict_219_0_21, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfRIPSPara",1587,G__anabrips_dict_219_0_22, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfTOFPara",1502,G__anabrips_dict_219_0_23, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfBeamPara",1642,G__anabrips_dict_219_0_24, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPPACPara",1272,G__anabrips_dict_219_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPlasticPara",1700,G__anabrips_dict_219_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumICPara",1120,G__anabrips_dict_219_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumGePara",1152,G__anabrips_dict_219_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSiPara",1168,G__anabrips_dict_219_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumTKEPara",1208,G__anabrips_dict_219_0_30, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumFocalPlanePara",1961,G__anabrips_dict_219_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumRIPSPara",1298,G__anabrips_dict_219_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumTOFPara",1213,G__anabrips_dict_219_0_33, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumBeamPara",1353,G__anabrips_dict_219_0_34, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPPACPara",1065,G__anabrips_dict_219_0_35, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara), -1, 0, 1, 1, 1, 0, "U 'TArtRIDFMap' - 0 - rmap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPlasticPara",1493,G__anabrips_dict_219_0_36, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara), -1, 0, 1, 1, 1, 0, "U 'TArtRIDFMap' - 0 - rmap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPlasticPara",1493,G__anabrips_dict_219_0_37, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara), -1, 0, 1, 1, 1, 0, "U 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindICPara",913,G__anabrips_dict_219_0_38, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara), -1, 0, 1, 1, 1, 0, "U 'TArtRIDFMap' - 0 - rmap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindGePara",945,G__anabrips_dict_219_0_39, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara), -1, 0, 1, 1, 1, 0, "U 'TArtRIDFMap' - 0 - rmap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindSiPara",961,G__anabrips_dict_219_0_40, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara), -1, 0, 1, 1, 1, 0, "U 'TArtRIDFMap' - 0 - rmap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTKEPara",1001,G__anabrips_dict_219_0_41, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara), -1, 0, 1, 1, 1, 0, "U 'TArtRIDFMap' - 0 - rmap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindFocalPlanePara",1754,G__anabrips_dict_219_0_42, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - fpl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFocusPosOffset",1733,G__anabrips_dict_219_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - fpl d - 'Double_t' 0 - offset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDipoleBrho",1288,G__anabrips_dict_219_0_44, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "U 'TString' - 0 - dname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadDipoleBrho",1384,G__anabrips_dict_219_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseParaList",1307,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TXMLNode' - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParsePPACPara",1187,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara), -1, 0, 1, 1, 2, 0, "U 'TXMLNode' - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParsePlasticPara",1615,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara), -1, 0, 1, 1, 2, 0, "U 'TXMLNode' - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseICPara",1035,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara), -1, 0, 1, 1, 2, 0, "U 'TXMLNode' - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseGePara",1067,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara), -1, 0, 1, 1, 2, 0, "U 'TXMLNode' - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseSiPara",1083,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara), -1, 0, 1, 1, 2, 0, "U 'TXMLNode' - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseTOFPara",1128,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara), -1, 0, 1, 1, 2, 0, "U 'TXMLNode' - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseTKEPara",1123,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara), -1, 0, 1, 1, 2, 0, "U 'TXMLNode' - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseFocalPlanePara",1876,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara), -1, 0, 1, 1, 2, 0, "U 'TXMLNode' - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_219_0_55, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtBigRIPSParameters::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_219_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtBigRIPSParameters::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_219_0_57, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtBigRIPSParameters::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_219_0_58, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtBigRIPSParameters::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_219_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_219_0_63, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtBigRIPSParameters::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_219_0_64, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtBigRIPSParameters::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_219_0_65, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtBigRIPSParameters::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_219_0_66, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtBigRIPSParameters::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtBigRIPSParameters", 2015, G__anabrips_dict_219_0_67, (int) ('i'), 
G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters), -1, 0, 1, 1, 1, 0, "u 'TArtBigRIPSParameters' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtBigRIPSParameters", 2141, G__anabrips_dict_219_0_68, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_219_0_69, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtBigRIPSParameters), -1, 1, 1, 1, 1, 0, "u 'TArtBigRIPSParameters' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtTKE(void) {
   /* TArtTKE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKE));
   G__memfunc_setup("TArtTKE",607,G__anabrips_dict_220_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKE), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__anabrips_dict_220_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumADC",804,G__anabrips_dict_220_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumADC",792,G__anabrips_dict_220_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRawADC",798,G__anabrips_dict_220_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRawTDC",817,G__anabrips_dict_220_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRawADC",798,G__anabrips_dict_220_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRawTDC",817,G__anabrips_dict_220_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRawADC",786,G__anabrips_dict_220_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRawTDC",805,G__anabrips_dict_220_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRawADC",786,G__anabrips_dict_220_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRawTDC",805,G__anabrips_dict_220_0_12, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEnergy",918,G__anabrips_dict_220_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTiming",916,G__anabrips_dict_220_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEnergy",918,G__anabrips_dict_220_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTiming",916,G__anabrips_dict_220_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEnergy",906,G__anabrips_dict_220_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTiming",904,G__anabrips_dict_220_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEnergy",906,G__anabrips_dict_220_0_19, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTiming",904,G__anabrips_dict_220_0_20, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anabrips_dict_220_0_21, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtTKE::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_220_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtTKE::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_220_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtTKE::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_220_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtTKE::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_220_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_220_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtTKE::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_220_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtTKE::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_220_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtTKE::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_220_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtTKE::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtTKE", 607, G__anabrips_dict_220_0_33, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKE), -1, 0, 1, 1, 1, 0, "u 'TArtTKE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtTKE", 733, G__anabrips_dict_220_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_220_0_35, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKE), -1, 1, 1, 1, 1, 0, "u 'TArtTKE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtCalibTKE(void) {
   /* TArtCalibTKE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibTKE));
   G__memfunc_setup("TArtCalibTKE",1082,G__anabrips_dict_222_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibTKE), -1, 0, 1, 1, 1, 0, "u 'TString' - 10 '\"BigRIPSTKE\"' outdataname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_222_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_222_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArtRawSegmentObject' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTKEArray",1027,G__anabrips_dict_222_0_6, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumTKE",820,G__anabrips_dict_222_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTKE",516,G__anabrips_dict_222_0_8, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKE), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTKEPara",904,G__anabrips_dict_222_0_9, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKEPara), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTKE",613,G__anabrips_dict_222_0_10, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTKE), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_222_0_11, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtCalibTKE::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_222_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibTKE::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_222_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtCalibTKE::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_222_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtCalibTKE::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_222_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_222_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibTKE::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_222_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibTKE::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_222_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibTKE::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_222_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibTKE::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtCalibTKE", 1082, G__anabrips_dict_222_0_23, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibTKE), -1, 0, 1, 1, 1, 0, "u 'TArtCalibTKE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtCalibTKE", 1208, G__anabrips_dict_222_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_222_0_25, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibTKE), -1, 1, 1, 1, 1, 0, "u 'TArtCalibTKE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtIC(void) {
   /* TArtIC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC));
   G__memfunc_setup("TArtIC",519,G__anabrips_dict_263_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__anabrips_dict_263_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetIonPair",990,G__anabrips_dict_263_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZCoef",771,G__anabrips_dict_263_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIonPair",978,G__anabrips_dict_263_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZCoef",759,G__anabrips_dict_263_0_6, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRawADC",798,G__anabrips_dict_263_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ch i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPedADC",781,G__anabrips_dict_263_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ch i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPedADCSqSum",1286,G__anabrips_dict_263_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPedADCAvSum",1273,G__anabrips_dict_263_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRawADC",786,G__anabrips_dict_263_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ch", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPedADC",769,G__anabrips_dict_263_0_12, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ch", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPedADCSqSum",1274,G__anabrips_dict_263_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPedADCAvSum",1261,G__anabrips_dict_263_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumHit",897,G__anabrips_dict_263_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nch", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEnergy",918,G__anabrips_dict_263_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ch d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEnergySqSum",1423,G__anabrips_dict_263_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEnergyAvSum",1410,G__anabrips_dict_263_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumHit",885,G__anabrips_dict_263_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEnergy",906,G__anabrips_dict_263_0_20, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ch", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEnergySqSum",1411,G__anabrips_dict_263_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEnergyAvSum",1398,G__anabrips_dict_263_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZet",595,G__anabrips_dict_263_0_23, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anabrips_dict_263_0_24, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtIC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_263_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtIC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_263_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtIC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_263_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtIC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_263_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_263_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtIC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_263_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtIC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_263_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtIC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_263_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtIC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtIC", 519, G__anabrips_dict_263_0_36, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC), -1, 0, 1, 1, 1, 0, "u 'TArtIC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtIC", 645, G__anabrips_dict_263_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_263_0_38, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC), -1, 1, 1, 1, 1, 0, "u 'TArtIC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtFocalPlane(void) {
   /* TArtFocalPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlane));
   G__memfunc_setup("TArtFocalPlane",1360,G__anabrips_dict_294_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__anabrips_dict_294_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetStdZpos",1027,G__anabrips_dict_294_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZoffset",1037,G__anabrips_dict_294_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStdZpos",1015,G__anabrips_dict_294_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZoffset",1025,G__anabrips_dict_294_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOptVector",1234,G__anabrips_dict_294_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOptVector",1222,G__anabrips_dict_294_0_8, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetX",376,G__anabrips_dict_294_0_9, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0' z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetY",377,G__anabrips_dict_294_0_10, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0' z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CopyPos",717,G__anabrips_dict_294_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumFiredPPACX",1474,G__anabrips_dict_294_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumFiredPPACY",1475,G__anabrips_dict_294_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumFiredPPACX",1462,G__anabrips_dict_294_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumFiredPPACY",1463,G__anabrips_dict_294_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anabrips_dict_294_0_16, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtFocalPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_294_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtFocalPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_294_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtFocalPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_294_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtFocalPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_294_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_294_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtFocalPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_294_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtFocalPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_294_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtFocalPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_294_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtFocalPlane::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtFocalPlane", 1360, G__anabrips_dict_294_0_28, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlane), -1, 0, 1, 1, 1, 0, "u 'TArtFocalPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtFocalPlane", 1486, G__anabrips_dict_294_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_294_0_30, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlane), -1, 1, 1, 1, 1, 0, "u 'TArtFocalPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtRIPS(void) {
   /* TArtRIPS */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS));
   G__memfunc_setup("TArtRIPS",697,G__anabrips_dict_297_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__anabrips_dict_297_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDelta",790,G__anabrips_dict_297_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAngle",787,G__anabrips_dict_297_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDelta",778,G__anabrips_dict_297_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAngle",775,G__anabrips_dict_297_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMatrix",929,G__anabrips_dict_297_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMatrixT<double>' 'TMatrixD' 0 - mat", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMatrix",917,G__anabrips_dict_297_0_8, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTlEdoublegR), G__defined_typename("TMatrixD"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCenterBrho",1304,G__anabrips_dict_297_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBrho",695,G__anabrips_dict_297_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLength",910,G__anabrips_dict_297_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUpstreamFpl",1439,G__anabrips_dict_297_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDownstreamFpl",1650,G__anabrips_dict_297_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCenterBrho",1292,G__anabrips_dict_297_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBrho",683,G__anabrips_dict_297_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLength",898,G__anabrips_dict_297_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUpstreamFpl",1427,G__anabrips_dict_297_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDownstreamFpl",1638,G__anabrips_dict_297_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDipoleName",1290,G__anabrips_dict_297_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - dname", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDipoleName",1278,G__anabrips_dict_297_0_20, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anabrips_dict_297_0_21, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtRIPS::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_297_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRIPS::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_297_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtRIPS::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_297_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtRIPS::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_297_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_297_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRIPS::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_297_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtRIPS::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_297_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRIPS::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_297_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtRIPS::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtRIPS", 697, G__anabrips_dict_297_0_33, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS), -1, 0, 1, 1, 1, 0, "u 'TArtRIPS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtRIPS", 823, G__anabrips_dict_297_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_297_0_35, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS), -1, 1, 1, 1, 1, 0, "u 'TArtRIPS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtRecoRIPS(void) {
   /* TArtRecoRIPS */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoRIPS));
   G__memfunc_setup("TArtRecoRIPS",1090,G__anabrips_dict_298_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoRIPS), -1, 0, 1, 1, 1, 0, "u 'TString' - 10 '\"BigRIPSRIPS\"' outdataname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineNewRIPS",1203,G__anabrips_dict_298_0_4, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ffpl i - 'Int_t' 0 - bfpl "
"C - - 10 - file", "set with above definition", (void*) NULL, 0);
   G__memfunc_setup("DefineNewRIPS",1203,G__anabrips_dict_298_0_5, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ffpl i - 'Int_t' 0 - bfpl "
"C - - 10 - file C - - 10 - dipolename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineNewRIPS",1203,G__anabrips_dict_298_0_6, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ffpl i - 'Int_t' 0 - bfpl "
"C - - 10 - file d - 'Double_t' 0 - brho", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineNewRIPS",1203,G__anabrips_dict_298_0_7, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ffpl i - 'Int_t' 0 - bfpl "
"U 'TMatrixT<double>' 'TMatrixD' 0 - mat", "set with above definition", (void*) NULL, 0);
   G__memfunc_setup("DefineNewRIPS",1203,G__anabrips_dict_298_0_8, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ffpl i - 'Int_t' 0 - bfpl "
"U 'TMatrixT<double>' 'TMatrixD' 0 - mat C - - 10 - dipolename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineNewRIPS",1203,G__anabrips_dict_298_0_9, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ffpl i - 'Int_t' 0 - bfpl "
"U 'TMatrixT<double>' 'TMatrixD' 0 - mat d - 'Double_t' 0 - brho", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRIPSArray",1117,G__anabrips_dict_298_0_10, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumRIPS",910,G__anabrips_dict_298_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRIPS",606,G__anabrips_dict_298_0_12, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindRIPS",703,G__anabrips_dict_298_0_13, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - f_fpl i - 'Int_t' 0 - b_fpl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDipoleName",1278,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - ufpl i - 'Int_t' 0 - dfpl", "function to get dipole name", (void*) NULL, 0);
   G__memfunc_setup("SetDipole",905,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", "function to get dipole brho from status data", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_298_0_16, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtRecoRIPS::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_298_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRecoRIPS::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_298_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtRecoRIPS::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_298_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtRecoRIPS::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_298_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_298_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRecoRIPS::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_298_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtRecoRIPS::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_298_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRecoRIPS::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_298_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtRecoRIPS::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtRecoRIPS", 1090, G__anabrips_dict_298_0_28, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoRIPS), -1, 0, 1, 1, 1, 0, "u 'TArtRecoRIPS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtRecoRIPS", 1216, G__anabrips_dict_298_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_298_0_30, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoRIPS), -1, 1, 1, 1, 1, 0, "u 'TArtRecoRIPS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtCalibPPAC(void) {
   /* TArtCalibPPAC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPPAC));
   G__memfunc_setup("TArtCalibPPAC",1146,G__anabrips_dict_303_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPPAC), -1, 0, 1, 1, 1, 0, "u 'TString' - 10 '\"BigRIPSPPAC\"' outdataname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_303_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_303_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArtRawSegmentObject' - 0 - seg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParameter",1229,G__anabrips_dict_303_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArtBigRIPSParameters' - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParameter",1229,G__anabrips_dict_303_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPPACArray",1091,G__anabrips_dict_303_0_8, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumPPAC",884,G__anabrips_dict_303_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPPAC",580,G__anabrips_dict_303_0_10, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPPACPara",968,G__anabrips_dict_303_0_11, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindPPAC",677,G__anabrips_dict_303_0_12, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindPPAC",677,G__anabrips_dict_303_0_13, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC), -1, 0, 1, 1, 1, 0, "U 'TString' - 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindPPAC",677,G__anabrips_dict_303_0_14, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC), -1, 0, 1, 1, 1, 0, "C - - 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anabrips_dict_303_0_15, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtCalibPPAC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_303_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibPPAC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_303_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtCalibPPAC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_303_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtCalibPPAC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_303_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_303_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibPPAC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_303_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibPPAC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_303_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibPPAC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_303_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibPPAC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtCalibPPAC", 1146, G__anabrips_dict_303_0_27, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPPAC), -1, 0, 1, 1, 1, 0, "u 'TArtCalibPPAC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtCalibPPAC", 1272, G__anabrips_dict_303_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_303_0_29, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPPAC), -1, 1, 1, 1, 1, 0, "u 'TArtCalibPPAC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtCalibPlastic(void) {
   /* TArtCalibPlastic */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPlastic));
   G__memfunc_setup("TArtCalibPlastic",1574,G__anabrips_dict_304_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPlastic), -1, 0, 1, 1, 1, 0, "u 'TString' - 10 '\"BigRIPSPlastic\"' outdataname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_304_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_304_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArtRawSegmentObject' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NearSearch",988,G__anabrips_dict_304_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'vector<int,allocator<int> >' 'vector<int>' 0 - tllist u 'vector<int,allocator<int> >' 'vector<int>' 0 - trlist "
"u 'vector<int,allocator<int> >' 'vector<int>' 0 - tlid u 'vector<int,allocator<int> >' 'vector<int>' 0 - trid", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPlasticArray",1519,G__anabrips_dict_304_0_7, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumPlastic",1312,G__anabrips_dict_304_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPlastic",1008,G__anabrips_dict_304_0_9, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPlasticPara",1396,G__anabrips_dict_304_0_10, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindPlastic",1105,G__anabrips_dict_304_0_11, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindPlastic",1105,G__anabrips_dict_304_0_12, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic), -1, 0, 1, 1, 1, 0, "U 'TString' - 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindPlastic",1105,G__anabrips_dict_304_0_13, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic), -1, 0, 1, 1, 1, 0, "C - - 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anabrips_dict_304_0_14, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtCalibPlastic::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_304_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibPlastic::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_304_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtCalibPlastic::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_304_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtCalibPlastic::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_304_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_304_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibPlastic::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_304_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibPlastic::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_304_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibPlastic::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_304_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibPlastic::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtCalibPlastic", 1574, G__anabrips_dict_304_0_26, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPlastic), -1, 0, 1, 1, 1, 0, "u 'TArtCalibPlastic' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtCalibPlastic", 1700, G__anabrips_dict_304_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_304_0_28, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPlastic), -1, 1, 1, 1, 1, 0, "u 'TArtCalibPlastic' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtCalibIC(void) {
   /* TArtCalibIC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibIC));
   G__memfunc_setup("TArtCalibIC",994,G__anabrips_dict_305_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibIC), -1, 0, 1, 1, 1, 0, "u 'TString' - 10 '\"BigRIPSIC\"' outdataname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_305_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_305_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArtRawSegmentObject' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetICArray",939,G__anabrips_dict_305_0_6, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumIC",732,G__anabrips_dict_305_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIC",428,G__anabrips_dict_305_0_8, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetICPara",816,G__anabrips_dict_305_0_9, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindIC",525,G__anabrips_dict_305_0_10, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindIC",525,G__anabrips_dict_305_0_11, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC), -1, 0, 1, 1, 1, 0, "U 'TString' - 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindIC",525,G__anabrips_dict_305_0_12, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtIC), -1, 0, 1, 1, 1, 0, "C - - 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anabrips_dict_305_0_13, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtCalibIC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_305_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibIC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_305_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtCalibIC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_305_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtCalibIC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_305_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_305_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibIC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_305_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibIC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_305_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibIC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_305_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibIC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtCalibIC", 994, G__anabrips_dict_305_0_25, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibIC), -1, 0, 1, 1, 1, 0, "u 'TArtCalibIC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtCalibIC", 1120, G__anabrips_dict_305_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_305_0_27, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibIC), -1, 1, 1, 1, 1, 0, "u 'TArtCalibIC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtCalibGe(void) {
   /* TArtCalibGe */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibGe));
   G__memfunc_setup("TArtCalibGe",1026,G__anabrips_dict_306_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibGe), -1, 0, 1, 1, 1, 0, "u 'TString' - 10 '\"BigRIPSGe\"' outdataname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_306_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_306_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArtRawSegmentObject' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGeArray",971,G__anabrips_dict_306_0_6, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumGe",764,G__anabrips_dict_306_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGe",460,G__anabrips_dict_306_0_8, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtGe), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGePara",848,G__anabrips_dict_306_0_9, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindGe",557,G__anabrips_dict_306_0_10, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtGe), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_306_0_11, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtCalibGe::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_306_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibGe::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_306_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtCalibGe::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_306_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtCalibGe::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_306_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_306_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibGe::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_306_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibGe::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_306_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibGe::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_306_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibGe::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtCalibGe", 1026, G__anabrips_dict_306_0_23, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibGe), -1, 0, 1, 1, 1, 0, "u 'TArtCalibGe' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtCalibGe", 1152, G__anabrips_dict_306_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_306_0_25, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibGe), -1, 1, 1, 1, 1, 0, "u 'TArtCalibGe' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtCalibFocalPlane(void) {
   /* TArtCalibFocalPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibFocalPlane));
   G__memfunc_setup("TArtCalibFocalPlane",1835,G__anabrips_dict_307_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibFocalPlane), -1, 0, 1, 1, 1, 0, "u 'TString' - 10 '\"BigRIPSFocalPlane\"' outdataname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFocalPlaneArray",1780,G__anabrips_dict_307_0_4, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumFocalPlane",1573,G__anabrips_dict_307_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFocalPlane",1269,G__anabrips_dict_307_0_6, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlane), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindFocalPlane",1366,G__anabrips_dict_307_0_7, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlane), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - fpl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_307_0_8, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtCalibFocalPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_307_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibFocalPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_307_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtCalibFocalPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_307_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtCalibFocalPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_307_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_307_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibFocalPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_307_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibFocalPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_307_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibFocalPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_307_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibFocalPlane::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtCalibFocalPlane", 1835, G__anabrips_dict_307_0_20, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibFocalPlane), -1, 0, 1, 1, 1, 0, "u 'TArtCalibFocalPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtCalibFocalPlane", 1961, G__anabrips_dict_307_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_307_0_22, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibFocalPlane), -1, 1, 1, 1, 1, 0, "u 'TArtCalibFocalPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtCalibPID(void) {
   /* TArtCalibPID */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPID));
   G__memfunc_setup("TArtCalibPID",1075,G__anabrips_dict_308_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPID), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_308_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_308_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArtRawSegmentObject' - 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPPACArray",1091,G__anabrips_dict_308_0_6, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlasticArray",1519,G__anabrips_dict_308_0_7, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetICArray",939,G__anabrips_dict_308_0_8, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGeArray",971,G__anabrips_dict_308_0_9, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFocalPlaneArray",1780,G__anabrips_dict_308_0_10, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibPPAC",1055,G__anabrips_dict_308_0_11, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPPAC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibPlastic",1483,G__anabrips_dict_308_0_12, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPlastic), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibIC",903,G__anabrips_dict_308_0_13, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibIC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibGe",935,G__anabrips_dict_308_0_14, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibGe), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibFocalPlane",1744,G__anabrips_dict_308_0_15, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibFocalPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_308_0_16, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtCalibPID::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_308_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibPID::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_308_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtCalibPID::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_308_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtCalibPID::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_308_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_308_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibPID::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_308_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibPID::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_308_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibPID::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_308_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibPID::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtCalibPID", 1075, G__anabrips_dict_308_0_28, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPID), -1, 0, 1, 1, 1, 0, "u 'TArtCalibPID' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtCalibPID", 1201, G__anabrips_dict_308_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_308_0_30, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibPID), -1, 1, 1, 1, 1, 0, "u 'TArtCalibPID' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtTOF(void) {
   /* TArtTOF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF));
   G__memfunc_setup("TArtTOF",612,G__anabrips_dict_309_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__anabrips_dict_309_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOF",533,G__anabrips_dict_309_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLength",910,G__anabrips_dict_309_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUpStreamLength",1727,G__anabrips_dict_309_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDownStreamLength",1938,G__anabrips_dict_309_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOF",521,G__anabrips_dict_309_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBeta",668,G__anabrips_dict_309_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGamma",771,G__anabrips_dict_309_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLength",898,G__anabrips_dict_309_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUpStreamLength",1715,G__anabrips_dict_309_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDownStreamLength",1926,G__anabrips_dict_309_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUpstreamPlaName",1819,G__anabrips_dict_309_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUpstreamPlaFpl",1724,G__anabrips_dict_309_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDownstreamPlaName",2030,G__anabrips_dict_309_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDownstreamPlaFpl",1935,G__anabrips_dict_309_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTimeOffset",1314,G__anabrips_dict_309_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUpstreamPlaName",1807,G__anabrips_dict_309_0_18, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDownstreamPlaName",2018,G__anabrips_dict_309_0_19, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUpstreamPlaFpl",1712,G__anabrips_dict_309_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDownstreamPlaFpl",1923,G__anabrips_dict_309_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeOffset",1302,G__anabrips_dict_309_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anabrips_dict_309_0_23, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtTOF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_309_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtTOF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_309_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtTOF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_309_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtTOF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_309_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_309_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtTOF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_309_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtTOF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_309_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtTOF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_309_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtTOF::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtTOF", 612, G__anabrips_dict_309_0_35, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF), -1, 0, 1, 1, 1, 0, "u 'TArtTOF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtTOF", 738, G__anabrips_dict_309_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_309_0_37, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF), -1, 1, 1, 1, 1, 0, "u 'TArtTOF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtBeam(void) {
   /* TArtBeam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam));
   G__memfunc_setup("TArtBeam",752,G__anabrips_dict_310_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__anabrips_dict_310_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBrho",695,G__anabrips_dict_310_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBrho",683,G__anabrips_dict_310_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAoQ",557,G__anabrips_dict_310_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAoQ",545,G__anabrips_dict_310_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZet",607,G__anabrips_dict_310_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZet",595,G__anabrips_dict_310_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBeta",680,G__anabrips_dict_310_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBeta",668,G__anabrips_dict_310_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumRIPS",922,G__anabrips_dict_310_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRIPSName",1003,G__anabrips_dict_310_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUpstreamRIPSName",1852,G__anabrips_dict_310_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDownstreamRIPSName",2063,G__anabrips_dict_310_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOFName",918,G__anabrips_dict_310_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetICName",825,G__anabrips_dict_310_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetICName",825,G__anabrips_dict_310_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumRIPS",910,G__anabrips_dict_310_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRIPSName",991,G__anabrips_dict_310_0_19, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUpstreamRIPSName",1840,G__anabrips_dict_310_0_20, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDownstreamRIPSName",2051,G__anabrips_dict_310_0_21, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFName",906,G__anabrips_dict_310_0_22, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetICName",813,G__anabrips_dict_310_0_23, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anabrips_dict_310_0_24, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtBeam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_310_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtBeam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_310_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtBeam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_310_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtBeam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_310_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_310_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtBeam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_310_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtBeam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_310_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtBeam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_310_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtBeam::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtBeam", 752, G__anabrips_dict_310_0_36, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam), -1, 0, 1, 1, 1, 0, "u 'TArtBeam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtBeam", 878, G__anabrips_dict_310_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_310_0_38, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam), -1, 1, 1, 1, 1, 0, "u 'TArtBeam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtRecoTOF(void) {
   /* TArtRecoTOF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoTOF));
   G__memfunc_setup("TArtRecoTOF",1005,G__anabrips_dict_311_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoTOF), -1, 0, 1, 1, 1, 0, "u 'TString' - 10 '\"BigRIPSTOF\"' outdataname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineNewTOF",1118,G__anabrips_dict_311_0_4, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF), -1, 0, 4, 1, 1, 0, 
"C - - 0 - uplname C - - 0 - dplname "
"d - 'Double_t' 0 '0' offset i - 'Int_t' 0 '-1' mfpl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFArray",1032,G__anabrips_dict_311_0_5, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumTOF",825,G__anabrips_dict_311_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOF",521,G__anabrips_dict_311_0_7, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTOF",618,G__anabrips_dict_311_0_8, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF), -1, 0, 2, 1, 1, 0, 
"C - - 0 - uplname C - - 0 - dplname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_311_0_9, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtRecoTOF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_311_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRecoTOF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_311_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtRecoTOF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_311_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtRecoTOF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_311_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_311_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRecoTOF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_311_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtRecoTOF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_311_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRecoTOF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_311_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtRecoTOF::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtRecoTOF", 1005, G__anabrips_dict_311_0_21, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoTOF), -1, 0, 1, 1, 1, 0, "u 'TArtRecoTOF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtRecoTOF", 1131, G__anabrips_dict_311_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_311_0_23, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoTOF), -1, 1, 1, 1, 1, 0, "u 'TArtRecoTOF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtRecoBeam(void) {
   /* TArtRecoBeam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoBeam));
   G__memfunc_setup("TArtRecoBeam",1145,G__anabrips_dict_312_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoBeam), -1, 0, 1, 1, 1, 0, "u 'TString' - 10 '\"BigRIPSBeam\"' outdataname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineNewBeam",1258,G__anabrips_dict_312_0_4, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam), -1, 0, 2, 1, 1, 0, 
"U 'TArtTOF' - 0 - tof C - - 10 - icname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineNewBeam",1258,G__anabrips_dict_312_0_5, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam), -1, 0, 3, 1, 1, 0, 
"U 'TArtRIPS' - 0 - rips U 'TArtTOF' - 0 - tof "
"C - - 10 - icname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineNewBeam",1258,G__anabrips_dict_312_0_6, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam), -1, 0, 4, 1, 1, 0, 
"U 'TArtRIPS' - 0 - urips U 'TArtRIPS' - 0 - drips "
"U 'TArtTOF' - 0 - tof C - - 10 - icname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamArray",1172,G__anabrips_dict_312_0_7, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumBeam",965,G__anabrips_dict_312_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeam",661,G__anabrips_dict_312_0_9, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindBeam",758,G__anabrips_dict_312_0_10, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - rips_ufpl i - 'Int_t' 0 - rips_dfpl "
"C - - 0 - tofpl1name C - - 0 - tofpl2name "
"C - - 0 - icname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindBeam",758,G__anabrips_dict_312_0_11, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam), -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - urips_ufpl i - 'Int_t' 0 - urips_dfpl "
"i - 'Int_t' 0 - drips_ufpl i - 'Int_t' 0 - drips_dfpl "
"C - - 0 - tofpl1name C - - 0 - tofpl2name "
"C - - 0 - icname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_312_0_12, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtRecoBeam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_312_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRecoBeam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_312_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtRecoBeam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_312_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtRecoBeam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_312_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_312_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRecoBeam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_312_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtRecoBeam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_312_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRecoBeam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_312_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtRecoBeam::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtRecoBeam", 1145, G__anabrips_dict_312_0_24, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoBeam), -1, 0, 1, 1, 1, 0, "u 'TArtRecoBeam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtRecoBeam", 1271, G__anabrips_dict_312_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_312_0_26, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoBeam), -1, 1, 1, 1, 1, 0, "u 'TArtRecoBeam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtRecoPID(void) {
   /* TArtRecoPID */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoPID));
   G__memfunc_setup("TArtRecoPID",993,G__anabrips_dict_313_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoPID), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineNewRIPS",1203,G__anabrips_dict_313_0_4, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ffpl i - 'Int_t' 0 - bfpl "
"C - - 0 - file d - 'Double_t' 0 - brho", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineNewRIPS",1203,G__anabrips_dict_313_0_5, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPS), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ffpl i - 'Int_t' 0 - bfpl "
"C - - 0 - file C - - 0 - dipolename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineNewTOF",1118,G__anabrips_dict_313_0_6, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOF), -1, 0, 4, 1, 1, 0, 
"C - - 0 - uplname C - - 0 - dplname "
"d - 'Double_t' 0 '0' offset i - 'Int_t' 0 '-1' mfpl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineNewBeam",1258,G__anabrips_dict_313_0_7, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam), -1, 0, 3, 1, 1, 0, 
"U 'TArtRIPS' - 0 - rips U 'TArtTOF' - 0 - tof "
"C - - 0 - icname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineNewBeam",1258,G__anabrips_dict_313_0_8, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeam), -1, 0, 4, 1, 1, 0, 
"U 'TArtRIPS' - 0 - urips U 'TArtRIPS' - 0 - drips "
"U 'TArtTOF' - 0 - tof C - - 0 - icname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRIPSArray",1117,G__anabrips_dict_313_0_9, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFArray",1032,G__anabrips_dict_313_0_10, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamArray",1172,G__anabrips_dict_313_0_11, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRecoRIPS",999,G__anabrips_dict_313_0_12, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoRIPS), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRecoTOF",914,G__anabrips_dict_313_0_13, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoTOF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRecoBeam",1054,G__anabrips_dict_313_0_14, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoBeam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_313_0_15, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtRecoPID::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_313_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRecoPID::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_313_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtRecoPID::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_313_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtRecoPID::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_313_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_313_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRecoPID::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_313_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtRecoPID::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_313_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRecoPID::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_313_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtRecoPID::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtRecoPID", 993, G__anabrips_dict_313_0_27, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoPID), -1, 0, 1, 1, 1, 0, "u 'TArtRecoPID' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtRecoPID", 1119, G__anabrips_dict_313_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_313_0_29, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtRecoPID), -1, 1, 1, 1, 1, 0, "u 'TArtRecoPID' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtFocalPlanePara(void) {
   /* TArtFocalPlanePara */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara));
   G__memfunc_setup("TArtFocalPlanePara",1748,G__anabrips_dict_314_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtFocalPlanePara",1748,G__anabrips_dict_314_0_2, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - f "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__anabrips_dict_314_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpl",578,G__anabrips_dict_314_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStdZpos",1015,G__anabrips_dict_314_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZoffset",1025,G__anabrips_dict_314_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZoffset",1037,G__anabrips_dict_314_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_314_0_8, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtFocalPlanePara::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_314_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtFocalPlanePara::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_314_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtFocalPlanePara::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_314_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtFocalPlanePara::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_314_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_314_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtFocalPlanePara::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_314_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtFocalPlanePara::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_314_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtFocalPlanePara::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_314_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtFocalPlanePara::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtFocalPlanePara", 1748, G__anabrips_dict_314_0_20, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara), -1, 0, 1, 1, 1, 0, "u 'TArtFocalPlanePara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtFocalPlanePara", 1874, G__anabrips_dict_314_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_314_0_22, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtFocalPlanePara), -1, 1, 1, 1, 1, 0, "u 'TArtFocalPlanePara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtGePara(void) {
   /* TArtGePara */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara));
   G__memfunc_setup("TArtGePara",939,G__anabrips_dict_315_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtGePara",939,G__anabrips_dict_315_0_2, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara), -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - es "
"d - 'Double_t' 0 - eo d - 'Double_t' 0 - ts "
"d - 'Double_t' 0 - to", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameters",1344,G__anabrips_dict_315_0_3, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - es "
"d - 'Double_t' 0 - eo d - 'Double_t' 0 - ts "
"d - 'Double_t' 0 - to", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap",586,G__anabrips_dict_315_0_4, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - tdet i - 'Int_t' 0 - tgeo "
"i - 'Int_t' 0 - tch i - 'Int_t' 0 - qdet "
"i - 'Int_t' 0 - qgeo i - 'Int_t' 0 - qch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__anabrips_dict_315_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorName",1499,G__anabrips_dict_315_0_6, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpl",578,G__anabrips_dict_315_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESlope",872,G__anabrips_dict_315_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEOffset",972,G__anabrips_dict_315_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTSlope",887,G__anabrips_dict_315_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOffset",987,G__anabrips_dict_315_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADCMap",774,G__anabrips_dict_315_0_12, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTDCMap",793,G__anabrips_dict_315_0_13, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_315_0_14, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtGePara::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_315_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtGePara::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_315_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtGePara::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_315_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtGePara::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_315_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_315_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtGePara::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_315_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtGePara::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_315_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtGePara::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_315_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtGePara::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtGePara", 939, G__anabrips_dict_315_0_26, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara), -1, 0, 1, 1, 1, 0, "u 'TArtGePara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtGePara", 1065, G__anabrips_dict_315_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_315_0_28, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtGePara), -1, 1, 1, 1, 1, 0, "u 'TArtGePara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtGe(void) {
   /* TArtGe */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtGe));
   G__memfunc_setup("TArtGe",551,G__anabrips_dict_316_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtGe), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawADC",798,G__anabrips_dict_316_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRawTDC",817,G__anabrips_dict_316_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRawADC",786,G__anabrips_dict_316_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRawTDC",805,G__anabrips_dict_316_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEnergy",918,G__anabrips_dict_316_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTiming",916,G__anabrips_dict_316_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEnergy",906,G__anabrips_dict_316_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTiming",904,G__anabrips_dict_316_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anabrips_dict_316_0_10, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtGe::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_316_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtGe::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_316_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtGe::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_316_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtGe::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_316_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_316_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtGe::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_316_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtGe::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_316_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtGe::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_316_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtGe::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtGe", 551, G__anabrips_dict_316_0_22, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtGe), -1, 0, 1, 1, 1, 0, "u 'TArtGe' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtGe", 677, G__anabrips_dict_316_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_316_0_24, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtGe), -1, 1, 1, 1, 1, 0, "u 'TArtGe' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtPPACPara(void) {
   /* TArtPPACPara */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara));
   G__memfunc_setup("TArtPPACPara",1059,G__anabrips_dict_322_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtPPACPara",1059,G__anabrips_dict_322_0_2, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara), -1, 0, 24, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - c2na "
"d - 'Double_t' 0 - c2nx1 d - 'Double_t' 0 - c2ny1 "
"d - 'Double_t' 0 - c2nx2 d - 'Double_t' 0 - c2ny2 "
"d - 'Double_t' 0 - xkf d - 'Double_t' 0 - ykf "
"d - 'Double_t' 0 - xko d - 'Double_t' 0 - yko "
"d - 'Double_t' 0 - xnso d - 'Double_t' 0 - ynso "
"d - 'Double_t' 0 - xpo d - 'Double_t' 0 - ypo "
"d - 'Double_t' 0 - xzp d - 'Double_t' 0 - yzp "
"d - 'Double_t' 0 - tdc_uf d - 'Double_t' 0 - tdc_of "
"d - 'Double_t' 0 - txmin d - 'Double_t' 0 - txmax "
"d - 'Double_t' 0 - tymin d - 'Double_t' 0 - tymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPalameters",1338,G__anabrips_dict_322_0_3, 121, -1, -1, 0, 24, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - c2na "
"d - 'Double_t' 0 - c2nx1 d - 'Double_t' 0 - c2ny1 "
"d - 'Double_t' 0 - c2nx2 d - 'Double_t' 0 - c2ny2 "
"d - 'Double_t' 0 - xkf d - 'Double_t' 0 - ykf "
"d - 'Double_t' 0 - xko d - 'Double_t' 0 - yko "
"d - 'Double_t' 0 - xnso d - 'Double_t' 0 - ynso "
"d - 'Double_t' 0 - xpo d - 'Double_t' 0 - ypo "
"d - 'Double_t' 0 - xzp d - 'Double_t' 0 - yzp "
"d - 'Double_t' 0 - tdc_uf d - 'Double_t' 0 - tdc_of "
"d - 'Double_t' 0 - txmin d - 'Double_t' 0 - txmax "
"d - 'Double_t' 0 - tymin d - 'Double_t' 0 - tymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap",586,G__anabrips_dict_322_0_4, 121, -1, -1, 0, 20, 1, 1, 0, 
"i - 'Int_t' 0 - tx1g i - 'Int_t' 0 - tx1c "
"i - 'Int_t' 0 - tx2g i - 'Int_t' 0 - tx2c "
"i - 'Int_t' 0 - ty1g i - 'Int_t' 0 - ty1c "
"i - 'Int_t' 0 - ty2g i - 'Int_t' 0 - ty2c "
"i - 'Int_t' 0 - tag i - 'Int_t' 0 - tac "
"i - 'Int_t' 0 - qx1g i - 'Int_t' 0 - qx1c "
"i - 'Int_t' 0 - qx2g i - 'Int_t' 0 - qx2c "
"i - 'Int_t' 0 - qy1g i - 'Int_t' 0 - qy1c "
"i - 'Int_t' 0 - qy2g i - 'Int_t' 0 - qy2c "
"i - 'Int_t' 0 - qag i - 'Int_t' 0 - qac", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTx1Map",839,G__anabrips_dict_322_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - f i - 'Int_t' 0 - g "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTx2Map",840,G__anabrips_dict_322_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - f i - 'Int_t' 0 - g "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTy1Map",840,G__anabrips_dict_322_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - f i - 'Int_t' 0 - g "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTy2Map",841,G__anabrips_dict_322_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - f i - 'Int_t' 0 - g "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTaMap",767,G__anabrips_dict_322_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - f i - 'Int_t' 0 - g "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQx1Map",836,G__anabrips_dict_322_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - f i - 'Int_t' 0 - g "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQx2Map",837,G__anabrips_dict_322_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - f i - 'Int_t' 0 - g "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQy1Map",837,G__anabrips_dict_322_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - f i - 'Int_t' 0 - g "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQy2Map",838,G__anabrips_dict_322_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - f i - 'Int_t' 0 - g "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQaMap",764,G__anabrips_dict_322_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - f i - 'Int_t' 0 - g "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__anabrips_dict_322_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorName",1499,G__anabrips_dict_322_0_16, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpl",578,G__anabrips_dict_322_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCh2NsX1",839,G__anabrips_dict_322_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCh2NsX2",840,G__anabrips_dict_322_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCh2NsY1",840,G__anabrips_dict_322_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCh2NsY2",841,G__anabrips_dict_322_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCh2NsA",767,G__anabrips_dict_322_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXFactor",983,G__anabrips_dict_322_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYFactor",984,G__anabrips_dict_322_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXOffset",991,G__anabrips_dict_322_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYOffset",992,G__anabrips_dict_322_0_26, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXDTimeOffset",1458,G__anabrips_dict_322_0_27, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYDTimeOffset",1459,G__anabrips_dict_322_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXPosOffset",1297,G__anabrips_dict_322_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYPosOffset",1298,G__anabrips_dict_322_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXZPos",772,G__anabrips_dict_322_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYZPos",773,G__anabrips_dict_322_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTDCUnderflow",1457,G__anabrips_dict_322_0_33, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTDCOverflow",1359,G__anabrips_dict_322_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTXSumMin",1061,G__anabrips_dict_322_0_35, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTXSumMax",1063,G__anabrips_dict_322_0_36, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTYSumMin",1062,G__anabrips_dict_322_0_37, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTYSumMax",1064,G__anabrips_dict_322_0_38, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTX1Map",795,G__anabrips_dict_322_0_39, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTX2Map",796,G__anabrips_dict_322_0_40, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTY1Map",796,G__anabrips_dict_322_0_41, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTY2Map",797,G__anabrips_dict_322_0_42, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTAMap",723,G__anabrips_dict_322_0_43, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQX1Map",792,G__anabrips_dict_322_0_44, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQX2Map",793,G__anabrips_dict_322_0_45, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQY1Map",793,G__anabrips_dict_322_0_46, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQY2Map",794,G__anabrips_dict_322_0_47, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQAMap",720,G__anabrips_dict_322_0_48, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_322_0_49, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtPPACPara::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_322_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtPPACPara::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_322_0_51, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtPPACPara::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_322_0_52, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtPPACPara::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_322_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_322_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtPPACPara::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_322_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtPPACPara::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_322_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtPPACPara::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_322_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtPPACPara::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtPPACPara", 1059, G__anabrips_dict_322_0_61, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara), -1, 0, 1, 1, 1, 0, "u 'TArtPPACPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtPPACPara", 1185, G__anabrips_dict_322_0_62, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_322_0_63, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPACPara), -1, 1, 1, 1, 1, 0, "u 'TArtPPACPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtPPAC(void) {
   /* TArtPPAC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC));
   G__memfunc_setup("TArtPPAC",671,G__anabrips_dict_323_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__anabrips_dict_323_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetXZPos",784,G__anabrips_dict_323_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetYZPos",785,G__anabrips_dict_323_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXZPos",772,G__anabrips_dict_323_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetYZPos",773,G__anabrips_dict_323_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTX1Raw",819,G__anabrips_dict_323_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTX2Raw",820,G__anabrips_dict_323_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTY1Raw",820,G__anabrips_dict_323_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTY2Raw",821,G__anabrips_dict_323_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTARaw",747,G__anabrips_dict_323_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetQX1Raw",816,G__anabrips_dict_323_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetQX2Raw",817,G__anabrips_dict_323_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetQY1Raw",817,G__anabrips_dict_323_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetQY2Raw",818,G__anabrips_dict_323_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetQARaw",744,G__anabrips_dict_323_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTX1Raw",807,G__anabrips_dict_323_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTX2Raw",808,G__anabrips_dict_323_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTY1Raw",808,G__anabrips_dict_323_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTY2Raw",809,G__anabrips_dict_323_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTARaw",735,G__anabrips_dict_323_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetQX1Raw",804,G__anabrips_dict_323_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetQX2Raw",805,G__anabrips_dict_323_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetQY1Raw",805,G__anabrips_dict_323_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetQY2Raw",806,G__anabrips_dict_323_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetQARaw",732,G__anabrips_dict_323_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTX1",521,G__anabrips_dict_323_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTX2",522,G__anabrips_dict_323_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTY1",522,G__anabrips_dict_323_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTY2",523,G__anabrips_dict_323_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTA",449,G__anabrips_dict_323_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTX1",509,G__anabrips_dict_323_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTX2",510,G__anabrips_dict_323_0_33, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTY1",510,G__anabrips_dict_323_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTY2",511,G__anabrips_dict_323_0_35, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTA",437,G__anabrips_dict_323_0_36, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTSumX",781,G__anabrips_dict_323_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTSumY",782,G__anabrips_dict_323_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTSumX",769,G__anabrips_dict_323_0_39, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTSumY",770,G__anabrips_dict_323_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTDiffX",849,G__anabrips_dict_323_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTDiffY",850,G__anabrips_dict_323_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTDiffX",837,G__anabrips_dict_323_0_43, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTDiffY",838,G__anabrips_dict_323_0_44, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetX",388,G__anabrips_dict_323_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetY",389,G__anabrips_dict_323_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetX",376,G__anabrips_dict_323_0_47, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetY",377,G__anabrips_dict_323_0_48, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFiredX",878,G__anabrips_dict_323_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFiredY",879,G__anabrips_dict_323_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsFiredX",766,G__anabrips_dict_323_0_51, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsFiredY",767,G__anabrips_dict_323_0_52, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anabrips_dict_323_0_53, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtPPAC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_323_0_54, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtPPAC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_323_0_55, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtPPAC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_323_0_56, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtPPAC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_323_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_323_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtPPAC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_323_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtPPAC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_323_0_63, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtPPAC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_323_0_64, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtPPAC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtPPAC", 671, G__anabrips_dict_323_0_65, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC), -1, 0, 1, 1, 1, 0, "u 'TArtPPAC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtPPAC", 797, G__anabrips_dict_323_0_66, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_323_0_67, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtPPAC), -1, 1, 1, 1, 1, 0, "u 'TArtPPAC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtSi(void) {
   /* TArtSi */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtSi));
   G__memfunc_setup("TArtSi",567,G__anabrips_dict_328_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtSi), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIonPair",990,G__anabrips_dict_328_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZCoef",771,G__anabrips_dict_328_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRawADC",798,G__anabrips_dict_328_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRawTDC",817,G__anabrips_dict_328_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRawADC",786,G__anabrips_dict_328_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRawTDC",805,G__anabrips_dict_328_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEnergy",918,G__anabrips_dict_328_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTiming",916,G__anabrips_dict_328_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEnergy",906,G__anabrips_dict_328_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTiming",904,G__anabrips_dict_328_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZet",595,G__anabrips_dict_328_0_12, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anabrips_dict_328_0_13, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtSi::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_328_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtSi::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_328_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtSi::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_328_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtSi::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_328_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_328_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtSi::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_328_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtSi::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_328_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtSi::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_328_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtSi::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtSi", 567, G__anabrips_dict_328_0_25, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtSi), -1, 0, 1, 1, 1, 0, "u 'TArtSi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtSi", 693, G__anabrips_dict_328_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_328_0_27, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtSi), -1, 1, 1, 1, 1, 0, "u 'TArtSi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtPlasticPara(void) {
   /* TArtPlasticPara */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara));
   G__memfunc_setup("TArtPlasticPara",1487,G__anabrips_dict_565_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtPlasticPara",1487,G__anabrips_dict_565_0_2, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara), -1, 0, 20, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - tcl "
"d - 'Double_t' 0 - tcr d - 'Double_t' 0 - qpedl "
"d - 'Double_t' 0 - qpedr d - 'Double_t' 0 - ts_al "
"d - 'Double_t' 0 - ts_bl d - 'Double_t' 0 - ts_cl "
"d - 'Double_t' 0 - ts_ar d - 'Double_t' 0 - ts_br "
"d - 'Double_t' 0 - ts_cr d - 'Double_t' 0 - tdc_uf "
"d - 'Double_t' 0 - tdc_of d - 'Double_t' 0 - z "
"d - 'Double_t' 0 - toff d - 'Double_t' 0 - xc0 "
"d - 'Double_t' 0 - xc1 d - 'Double_t' 0 - xc2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameters",1344,G__anabrips_dict_565_0_3, 121, -1, -1, 0, 20, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - tcl "
"d - 'Double_t' 0 - tcr d - 'Double_t' 0 - qpedl "
"d - 'Double_t' 0 - qpedr d - 'Double_t' 0 - ts_al "
"d - 'Double_t' 0 - ts_bl d - 'Double_t' 0 - ts_cl "
"d - 'Double_t' 0 - ts_ar d - 'Double_t' 0 - ts_br "
"d - 'Double_t' 0 - ts_cr d - 'Double_t' 0 - tdc_uf "
"d - 'Double_t' 0 - tdc_of d - 'Double_t' 0 - z "
"d - 'Double_t' 0 - toff d - 'Double_t' 0 - xc0 "
"d - 'Double_t' 0 - xc1 d - 'Double_t' 0 - xc2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap",586,G__anabrips_dict_565_0_4, 121, -1, -1, 0, 12, 1, 1, 0, 
"i - 'Int_t' 0 - tf i - 'Int_t' 0 - td "
"i - 'Int_t' 0 - tlg i - 'Int_t' 0 - tlc "
"i - 'Int_t' 0 - trg i - 'Int_t' 0 - trc "
"i - 'Int_t' 0 - qf i - 'Int_t' 0 - qd "
"i - 'Int_t' 0 - qlg i - 'Int_t' 0 - qlc "
"i - 'Int_t' 0 - qrg i - 'Int_t' 0 - qrc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__anabrips_dict_565_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorName",1499,G__anabrips_dict_565_0_6, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpl",578,G__anabrips_dict_565_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTCalLeft",1039,G__anabrips_dict_565_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTCalRight",1154,G__anabrips_dict_565_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQPedLeft",1045,G__anabrips_dict_565_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQPedRight",1160,G__anabrips_dict_565_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTLSlewA",924,G__anabrips_dict_565_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTLSlewB",925,G__anabrips_dict_565_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTLSlewC",926,G__anabrips_dict_565_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRSlewA",930,G__anabrips_dict_565_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRSlewB",931,G__anabrips_dict_565_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRSlewC",932,G__anabrips_dict_565_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTDCUnderflow",1457,G__anabrips_dict_565_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTDCOverflow",1359,G__anabrips_dict_565_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZoffset",1025,G__anabrips_dict_565_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetToffset",1019,G__anabrips_dict_565_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXCal0",696,G__anabrips_dict_565_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXCal1",697,G__anabrips_dict_565_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXCal2",698,G__anabrips_dict_565_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTLMap",734,G__anabrips_dict_565_0_25, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRMap",740,G__anabrips_dict_565_0_26, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQLMap",731,G__anabrips_dict_565_0_27, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQRMap",737,G__anabrips_dict_565_0_28, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_565_0_29, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtPlasticPara::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_565_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtPlasticPara::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_565_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtPlasticPara::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_565_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtPlasticPara::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_565_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_565_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtPlasticPara::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_565_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtPlasticPara::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_565_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtPlasticPara::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_565_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtPlasticPara::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtPlasticPara", 1487, G__anabrips_dict_565_0_41, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara), -1, 0, 1, 1, 1, 0, "u 'TArtPlasticPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtPlasticPara", 1613, G__anabrips_dict_565_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_565_0_43, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlasticPara), -1, 1, 1, 1, 1, 0, "u 'TArtPlasticPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtICPara(void) {
   /* TArtICPara */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara));
   G__memfunc_setup("TArtICPara",907,G__anabrips_dict_566_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtICPara",907,G__anabrips_dict_566_0_2, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara), -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - c2m0 "
"d - 'Double_t' 0 - c2m1 d - 'Double_t' 0 - zc0 "
"d - 'Double_t' 0 - zc1 d - 'Double_t' 0 - zc2 "
"d - 'Double_t' 0 - ip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameters",1344,G__anabrips_dict_566_0_3, 121, -1, -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - c2m0 "
"d - 'Double_t' 0 - c2m1 d - 'Double_t' 0 - zc0 "
"d - 'Double_t' 0 - zc1 d - 'Double_t' 0 - zc2 "
"d - 'Double_t' 0 - ip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedestal",1118,G__anabrips_dict_566_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - ped", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap",586,G__anabrips_dict_566_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - d I - 'Int_t' 0 - g "
"I - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__anabrips_dict_566_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorName",1499,G__anabrips_dict_566_0_7, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpl",578,G__anabrips_dict_566_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCh2MeV",773,G__anabrips_dict_566_0_9, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZCoef",759,G__anabrips_dict_566_0_10, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIonPair",978,G__anabrips_dict_566_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedestal",1106,G__anabrips_dict_566_0_12, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap",574,G__anabrips_dict_566_0_13, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCh",556,G__anabrips_dict_566_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TArtRIDFMap' - 0 - rmap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_566_0_15, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtICPara::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_566_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtICPara::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_566_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtICPara::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_566_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtICPara::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_566_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_566_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtICPara::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_566_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtICPara::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_566_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtICPara::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_566_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtICPara::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtICPara", 907, G__anabrips_dict_566_0_27, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara), -1, 0, 1, 1, 1, 0, "u 'TArtICPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtICPara", 1033, G__anabrips_dict_566_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_566_0_29, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtICPara), -1, 1, 1, 1, 1, 0, "u 'TArtICPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtSiPara(void) {
   /* TArtSiPara */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara));
   G__memfunc_setup("TArtSiPara",955,G__anabrips_dict_567_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtSiPara",955,G__anabrips_dict_567_0_2, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara), -1, 0, 11, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - es "
"d - 'Double_t' 0 - eo d - 'Double_t' 0 - ts "
"d - 'Double_t' 0 - to d - 'Double_t' 0 - zc0 "
"d - 'Double_t' 0 - zc1 d - 'Double_t' 0 - zc2 "
"d - 'Double_t' 0 - ip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameters",1344,G__anabrips_dict_567_0_3, 121, -1, -1, 0, 11, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - es "
"d - 'Double_t' 0 - eo d - 'Double_t' 0 - ts "
"d - 'Double_t' 0 - to d - 'Double_t' 0 - zc0 "
"d - 'Double_t' 0 - zc1 d - 'Double_t' 0 - zc2 "
"d - 'Double_t' 0 - ip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap",586,G__anabrips_dict_567_0_4, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - tdet i - 'Int_t' 0 - tgeo "
"i - 'Int_t' 0 - tch i - 'Int_t' 0 - qdet "
"i - 'Int_t' 0 - qgeo i - 'Int_t' 0 - qch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__anabrips_dict_567_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorName",1499,G__anabrips_dict_567_0_6, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpl",578,G__anabrips_dict_567_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCh2MeV",773,G__anabrips_dict_567_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedestal",1106,G__anabrips_dict_567_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCh2Ns",702,G__anabrips_dict_567_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOffset",987,G__anabrips_dict_567_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZCoef",759,G__anabrips_dict_567_0_12, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIonPair",978,G__anabrips_dict_567_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADCMap",774,G__anabrips_dict_567_0_14, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTDCMap",793,G__anabrips_dict_567_0_15, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_567_0_16, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtSiPara::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_567_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtSiPara::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_567_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtSiPara::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_567_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtSiPara::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_567_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_567_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtSiPara::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_567_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtSiPara::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_567_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtSiPara::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_567_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtSiPara::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtSiPara", 955, G__anabrips_dict_567_0_28, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara), -1, 0, 1, 1, 1, 0, "u 'TArtSiPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtSiPara", 1081, G__anabrips_dict_567_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_567_0_30, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara), -1, 1, 1, 1, 1, 0, "u 'TArtSiPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtRIPSPara(void) {
   /* TArtRIPSPara */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara));
   G__memfunc_setup("TArtRIPSPara",1085,G__anabrips_dict_568_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtRIPSPara",1085,G__anabrips_dict_568_0_2, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - u i - 'Int_t' 0 - d "
"C - - 0 - matfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtRIPSPara",1085,G__anabrips_dict_568_0_3, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - u i - 'Int_t' 0 - d "
"C - - 0 - matfile C - - 0 - dipolename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtRIPSPara",1085,G__anabrips_dict_568_0_4, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - u i - 'Int_t' 0 - d "
"C - - 0 - matfile d - 'Double_t' 0 - br", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpstreamFpl",1439,G__anabrips_dict_568_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDownstreamFpl",1650,G__anabrips_dict_568_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBrho",695,G__anabrips_dict_568_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDipoleName",1290,G__anabrips_dict_568_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMatrix",929,G__anabrips_dict_568_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - matfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUpstreamFpl",1427,G__anabrips_dict_568_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDownstreamFpl",1638,G__anabrips_dict_568_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorName",1499,G__anabrips_dict_568_0_12, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDipoleName",1278,G__anabrips_dict_568_0_13, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBrho",683,G__anabrips_dict_568_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMatrix",917,G__anabrips_dict_568_0_15, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TMatrixTlEdoublegR), G__defined_typename("TMatrixD"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_568_0_16, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtRIPSPara::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_568_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRIPSPara::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_568_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtRIPSPara::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_568_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtRIPSPara::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_568_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_568_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRIPSPara::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_568_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtRIPSPara::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_568_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtRIPSPara::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_568_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtRIPSPara::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtRIPSPara", 1085, G__anabrips_dict_568_0_28, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara), -1, 0, 1, 1, 1, 0, "u 'TArtRIPSPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtRIPSPara", 1211, G__anabrips_dict_568_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_568_0_30, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtRIPSPara), -1, 1, 1, 1, 1, 0, "u 'TArtRIPSPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtTOFPara(void) {
   /* TArtTOFPara */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara));
   G__memfunc_setup("TArtTOFPara",1000,G__anabrips_dict_569_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtTOFPara",1000,G__anabrips_dict_569_0_2, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara), -1, 0, 7, 1, 1, 0, 
"C - - 10 - name C - - 10 - upla "
"C - - 10 - dpla d - 'Double_t' 0 '0' toffset "
"i - 'Int_t' 0 '-1' mfpl i - 'Int_t' 0 '-1' ufpl "
"i - 'Int_t' 0 '-1' dfpl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtTOFPara",1000,G__anabrips_dict_569_0_3, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara), -1, 0, 6, 1, 1, 0, 
"C - - 0 - upla C - - 0 - dpla "
"d - 'Double_t' 0 '0' toffset i - 'Int_t' 0 '-1' mfpl "
"i - 'Int_t' 0 '-1' ufpl i - 'Int_t' 0 '-1' dfpl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpstreamPlName",1722,G__anabrips_dict_569_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDownstreamPlName",1933,G__anabrips_dict_569_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOffset",915,G__anabrips_dict_569_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMiddleFpl",1181,G__anabrips_dict_569_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpstreamFpl",1439,G__anabrips_dict_569_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDownstreamFpl",1650,G__anabrips_dict_569_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorName",1499,G__anabrips_dict_569_0_10, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUpstreamPlName",1710,G__anabrips_dict_569_0_11, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDownstreamPlName",1921,G__anabrips_dict_569_0_12, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOffset",903,G__anabrips_dict_569_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMiddleFpl",1169,G__anabrips_dict_569_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUpstreamFpl",1427,G__anabrips_dict_569_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDownstreamFpl",1638,G__anabrips_dict_569_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_569_0_17, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtTOFPara::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_569_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtTOFPara::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_569_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtTOFPara::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_569_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtTOFPara::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_569_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_569_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtTOFPara::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_569_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtTOFPara::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_569_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtTOFPara::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_569_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtTOFPara::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtTOFPara", 1000, G__anabrips_dict_569_0_29, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara), -1, 0, 1, 1, 1, 0, "u 'TArtTOFPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtTOFPara", 1126, G__anabrips_dict_569_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_569_0_31, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtTOFPara), -1, 1, 1, 1, 1, 0, "u 'TArtTOFPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtBeamPara(void) {
   /* TArtBeamPara */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara));
   G__memfunc_setup("TArtBeamPara",1140,G__anabrips_dict_570_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtBeamPara",1140,G__anabrips_dict_570_0_2, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara), -1, 0, 4, 1, 1, 0, 
"U 'TArtRIPSPara' - 0 - r1 U 'TArtRIPSPara' - 0 - r2 "
"U 'TArtTOFPara' - 0 - t C - - 0 - de", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtBeamPara",1140,G__anabrips_dict_570_0_3, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara), -1, 0, 3, 1, 1, 0, 
"U 'TArtRIPSPara' - 0 - r U 'TArtTOFPara' - 0 - t "
"C - - 0 - de", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtBeamPara",1140,G__anabrips_dict_570_0_4, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara), -1, 0, 2, 1, 1, 0, 
"U 'TArtTOFPara' - 0 - t C - - 0 - de", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumRIPS",922,G__anabrips_dict_570_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorName",1511,G__anabrips_dict_570_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpstreamRIPSName",1852,G__anabrips_dict_570_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDownstreamRIPSName",2063,G__anabrips_dict_570_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFName",918,G__anabrips_dict_570_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDeltaEName",1244,G__anabrips_dict_570_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumRIPS",910,G__anabrips_dict_570_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorName",1499,G__anabrips_dict_570_0_12, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUpstreamRIPSName",1840,G__anabrips_dict_570_0_13, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDownstreamRIPSName",2051,G__anabrips_dict_570_0_14, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFName",906,G__anabrips_dict_570_0_15, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeltaEName",1232,G__anabrips_dict_570_0_16, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_570_0_17, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtBeamPara::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_570_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtBeamPara::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_570_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtBeamPara::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_570_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtBeamPara::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_570_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_570_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtBeamPara::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_570_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtBeamPara::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_570_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtBeamPara::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_570_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtBeamPara::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtBeamPara", 1140, G__anabrips_dict_570_0_29, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara), -1, 0, 1, 1, 1, 0, "u 'TArtBeamPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtBeamPara", 1266, G__anabrips_dict_570_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_570_0_31, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtBeamPara), -1, 1, 1, 1, 1, 0, "u 'TArtBeamPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtPlastic(void) {
   /* TArtPlastic */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic));
   G__memfunc_setup("TArtPlastic",1099,G__anabrips_dict_663_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__anabrips_dict_663_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZoffset",1037,G__anabrips_dict_663_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZposition",1275,G__anabrips_dict_663_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZoffset",1025,G__anabrips_dict_663_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZposition",1263,G__anabrips_dict_663_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTLRaw",758,G__anabrips_dict_663_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRRaw",764,G__anabrips_dict_663_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQLRaw",755,G__anabrips_dict_663_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQRRaw",761,G__anabrips_dict_663_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQLPed",738,G__anabrips_dict_663_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQRPed",744,G__anabrips_dict_663_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQAvePed",946,G__anabrips_dict_663_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTLRaw",746,G__anabrips_dict_663_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRRaw",752,G__anabrips_dict_663_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQLRaw",743,G__anabrips_dict_663_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQRRaw",749,G__anabrips_dict_663_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQAveRaw",951,G__anabrips_dict_663_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTAveCal",940,G__anabrips_dict_663_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTLCal",732,G__anabrips_dict_663_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTRCal",738,G__anabrips_dict_663_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTLSlw",770,G__anabrips_dict_663_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTRSlw",776,G__anabrips_dict_663_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTAveSlw",978,G__anabrips_dict_663_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTAveSlwOff",1261,G__anabrips_dict_663_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTDiff",761,G__anabrips_dict_663_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetXposition",1273,G__anabrips_dict_663_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTAveCal",928,G__anabrips_dict_663_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTLCal",720,G__anabrips_dict_663_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRCal",726,G__anabrips_dict_663_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTLSlw",758,G__anabrips_dict_663_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRSlw",764,G__anabrips_dict_663_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTAveSlw",966,G__anabrips_dict_663_0_33, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTAveSlwOff",1249,G__anabrips_dict_663_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTDiff",749,G__anabrips_dict_663_0_35, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXposition",1261,G__anabrips_dict_663_0_36, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__anabrips_dict_663_0_37, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQLPed",726,G__anabrips_dict_663_0_38, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQRPed",732,G__anabrips_dict_663_0_39, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQAvePed",934,G__anabrips_dict_663_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_663_0_41, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtPlastic::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_663_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtPlastic::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_663_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtPlastic::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_663_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtPlastic::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_663_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_663_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtPlastic::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_663_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtPlastic::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_663_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtPlastic::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_663_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtPlastic::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtPlastic", 1099, G__anabrips_dict_663_0_53, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic), -1, 0, 1, 1, 1, 0, "u 'TArtPlastic' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtPlastic", 1225, G__anabrips_dict_663_0_54, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_663_0_55, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtPlastic), -1, 1, 1, 1, 1, 0, "u 'TArtPlastic' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtCalibCoin(void) {
   /* TArtCalibCoin */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibCoin));
   G__memfunc_setup("TArtCalibCoin",1247,G__anabrips_dict_688_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibCoin), -1, 0, 1, 1, 1, 0, "u 'TString' - 10 '\"EventInfo\"' outdataname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_688_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_688_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArtRawSegmentObject' - 0 - seg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsChTrue",775,G__anabrips_dict_688_0_6, 103, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anabrips_dict_688_0_7, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtCalibCoin::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_688_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibCoin::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_688_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtCalibCoin::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_688_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtCalibCoin::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_688_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_688_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibCoin::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_688_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibCoin::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_688_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibCoin::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_688_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibCoin::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtCalibCoin", 1247, G__anabrips_dict_688_0_19, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibCoin), -1, 0, 1, 1, 1, 0, "u 'TArtCalibCoin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtCalibCoin", 1373, G__anabrips_dict_688_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_688_0_21, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibCoin), -1, 1, 1, 1, 1, 0, "u 'TArtCalibCoin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtCalibSi(void) {
   /* TArtCalibSi */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibSi));
   G__memfunc_setup("TArtCalibSi",1042,G__anabrips_dict_689_0_1, 105, G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibSi), -1, 0, 1, 1, 1, 0, "u 'TString' - 10 '\"BigRIPSSi\"' outdataname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_689_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anabrips_dict_689_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArtRawSegmentObject' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSiArray",987,G__anabrips_dict_689_0_6, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSi",780,G__anabrips_dict_689_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSi",476,G__anabrips_dict_689_0_8, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtSi), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSiPara",864,G__anabrips_dict_689_0_9, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtSiPara), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindSi",573,G__anabrips_dict_689_0_10, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TArtSi), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anabrips_dict_689_0_11, 85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtCalibSi::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anabrips_dict_689_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibSi::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anabrips_dict_689_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtCalibSi::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anabrips_dict_689_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtCalibSi::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anabrips_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anabrips_dict_689_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anabrips_dict_689_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibSi::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anabrips_dict_689_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibSi::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anabrips_dict_689_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibSi::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anabrips_dict_689_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibSi::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtCalibSi", 1042, G__anabrips_dict_689_0_23, (int) ('i'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibSi), -1, 0, 1, 1, 1, 0, "u 'TArtCalibSi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtCalibSi", 1168, G__anabrips_dict_689_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anabrips_dict_689_0_25, (int) ('u'), G__get_linked_tagnum(&G__anabrips_dictLN_TArtCalibSi), -1, 1, 1, 1, 1, 0, "u 'TArtCalibSi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncanabrips_dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalanabrips_dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {
}

static void G__cpp_setup_func36() {
}

static void G__cpp_setup_func37() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcanabrips_dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
  G__cpp_setup_func36();
  G__cpp_setup_func37();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__anabrips_dictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtReconstruction = { "TArtReconstruction" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtRawSegmentObject = { "TArtRawSegmentObject" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtTKEPara = { "TArtTKEPara" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtBigRIPSParameters = { "TArtBigRIPSParameters" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtTKE = { "TArtTKE" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtStoreManager = { "TArtStoreManager" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtCalibTKE = { "TArtCalibTKE" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETArtTKEParamUcOallocatorlETArtTKEParamUgRsPgR = { "vector<TArtTKEPara*,allocator<TArtTKEPara*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETArtTKEParamUcOallocatorlETArtTKEParamUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtTKEPara*,allocator<TArtTKEPara*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTSparselEdoublegR = { "TMatrixTSparse<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtDataObject = { "TArtDataObject" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtIC = { "TArtIC" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtFocalPlane = { "TArtFocalPlane" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtRIPS = { "TArtRIPS" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtRecoRIPS = { "TArtRecoRIPS" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETArtFocalPlanemUcOallocatorlETArtFocalPlanemUgRsPgR = { "vector<TArtFocalPlane*,allocator<TArtFocalPlane*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETArtFocalPlanemUcOallocatorlETArtFocalPlanemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtFocalPlane*,allocator<TArtFocalPlane*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtCalibPPAC = { "TArtCalibPPAC" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtCalibPlastic = { "TArtCalibPlastic" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtCalibIC = { "TArtCalibIC" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtCalibGe = { "TArtCalibGe" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtCalibFocalPlane = { "TArtCalibFocalPlane" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtCalibPID = { "TArtCalibPID" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtTOF = { "TArtTOF" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtBeam = { "TArtBeam" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtRecoTOF = { "TArtRecoTOF" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtRecoBeam = { "TArtRecoBeam" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtRecoPID = { "TArtRecoPID" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtFocalPlanePara = { "TArtFocalPlanePara" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtGePara = { "TArtGePara" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtGe = { "TArtGe" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETArtGeParamUcOallocatorlETArtGeParamUgRsPgR = { "vector<TArtGePara*,allocator<TArtGePara*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETArtGeParamUcOallocatorlETArtGeParamUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtGePara*,allocator<TArtGePara*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtPPACPara = { "TArtPPACPara" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtPPAC = { "TArtPPAC" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETArtPPACParamUcOallocatorlETArtPPACParamUgRsPgR = { "vector<TArtPPACPara*,allocator<TArtPPACPara*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPPACParamUcOallocatorlETArtPPACParamUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtPPACPara*,allocator<TArtPPACPara*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtSi = { "TArtSi" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TXMLNode = { "TXMLNode" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtPlasticPara = { "TArtPlasticPara" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtICPara = { "TArtICPara" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtSiPara = { "TArtSiPara" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtRIPSPara = { "TArtRIPSPara" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtTOFPara = { "TArtTOFPara" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtBeamPara = { "TArtBeamPara" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtRIDFMap = { "TArtRIDFMap" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_maplETArtRIDFMapcOTArtPPACParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtPPACParamUgRsPgRsPgR = { "map<TArtRIDFMap,TArtPPACPara*,less<TArtRIDFMap>,allocator<pair<const TArtRIDFMap,TArtPPACPara*> > >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_maplETArtRIDFMapcOTArtPlasticParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtPlasticParamUgRsPgRsPgR = { "map<TArtRIDFMap,TArtPlasticPara*,less<TArtRIDFMap>,allocator<pair<const TArtRIDFMap,TArtPlasticPara*> > >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_maplETStringcOTArtPlasticParamUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArtPlasticParamUgRsPgRsPgR = { "map<TString,TArtPlasticPara*,less<TString>,allocator<pair<const TString,TArtPlasticPara*> > >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_maplETStringcOTArtTOFParamUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArtTOFParamUgRsPgRsPgR = { "map<TString,TArtTOFPara*,less<TString>,allocator<pair<const TString,TArtTOFPara*> > >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_maplETArtRIDFMapcOTArtICParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtICParamUgRsPgRsPgR = { "map<TArtRIDFMap,TArtICPara*,less<TArtRIDFMap>,allocator<pair<const TArtRIDFMap,TArtICPara*> > >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_maplETArtRIDFMapcOTArtGeParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtGeParamUgRsPgRsPgR = { "map<TArtRIDFMap,TArtGePara*,less<TArtRIDFMap>,allocator<pair<const TArtRIDFMap,TArtGePara*> > >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_maplETArtRIDFMapcOTArtSiParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtSiParamUgRsPgRsPgR = { "map<TArtRIDFMap,TArtSiPara*,less<TArtRIDFMap>,allocator<pair<const TArtRIDFMap,TArtSiPara*> > >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_maplETArtRIDFMapcOTArtTKEParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtTKEParamUgRsPgRsPgR = { "map<TArtRIDFMap,TArtTKEPara*,less<TArtRIDFMap>,allocator<pair<const TArtRIDFMap,TArtTKEPara*> > >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_maplEintcOTArtFocalPlaneParamUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTArtFocalPlaneParamUgRsPgRsPgR = { "map<int,TArtFocalPlanePara*,less<int>,allocator<pair<const int,TArtFocalPlanePara*> > >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETArtBigRIPSParameterscLcLDipolecOallocatorlETArtBigRIPSParameterscLcLDipolegRsPgR = { "vector<TArtBigRIPSParameters::Dipole,allocator<TArtBigRIPSParameters::Dipole> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETArtBigRIPSParameterscLcLDipolecOallocatorlETArtBigRIPSParameterscLcLDipolegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtBigRIPSParameters::Dipole,allocator<TArtBigRIPSParameters::Dipole> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_maplETArtRIDFMapcOintcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOintgRsPgRsPgR = { "map<TArtRIDFMap,int,less<TArtRIDFMap>,allocator<pair<const TArtRIDFMap,int> > >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETArtICParamUcOallocatorlETArtICParamUgRsPgR = { "vector<TArtICPara*,allocator<TArtICPara*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETArtICParamUcOallocatorlETArtICParamUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtICPara*,allocator<TArtICPara*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgR = { "vector<TArtPPAC*,allocator<TArtPPAC*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtPPAC*,allocator<TArtPPAC*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgR = { "vector<vector<TArtPPAC*,allocator<TArtPPAC*> >*,allocator<vector<TArtPPAC*,allocator<TArtPPAC*> >*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<TArtPPAC*,allocator<TArtPPAC*> >*,allocator<vector<TArtPPAC*,allocator<TArtPPAC*> >*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtPlastic = { "TArtPlastic" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETArtPlasticParamUcOallocatorlETArtPlasticParamUgRsPgR = { "vector<TArtPlasticPara*,allocator<TArtPlasticPara*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPlasticParamUcOallocatorlETArtPlasticParamUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtPlasticPara*,allocator<TArtPlasticPara*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETArtRIPSmUcOallocatorlETArtRIPSmUgRsPgR = { "vector<TArtRIPS*,allocator<TArtRIPS*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETArtRIPSmUcOallocatorlETArtRIPSmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtRIPS*,allocator<TArtRIPS*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETArtTOFmUcOallocatorlETArtTOFmUgRsPgR = { "vector<TArtTOF*,allocator<TArtTOF*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETArtTOFmUcOallocatorlETArtTOFmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtTOF*,allocator<TArtTOF*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETArtICmUcOallocatorlETArtICmUgRsPgR = { "vector<TArtIC*,allocator<TArtIC*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETArtICmUcOallocatorlETArtICmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtIC*,allocator<TArtIC*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETArtPlasticmUcOallocatorlETArtPlasticmUgRsPgR = { "vector<TArtPlastic*,allocator<TArtPlastic*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPlasticmUcOallocatorlETArtPlasticmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtPlastic*,allocator<TArtPlastic*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtCalibCoin = { "TArtCalibCoin" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_TArtCalibSi = { "TArtCalibSi" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_vectorlETArtSiParamUcOallocatorlETArtSiParamUgRsPgR = { "vector<TArtSiPara*,allocator<TArtSiPara*> >" , 99 , -1 };
G__linked_taginfo G__anabrips_dictLN_reverse_iteratorlEvectorlETArtSiParamUcOallocatorlETArtSiParamUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtSiPara*,allocator<TArtSiPara*> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableanabrips_dict() {
  G__anabrips_dictLN_TClass.tagnum = -1 ;
  G__anabrips_dictLN_TBuffer.tagnum = -1 ;
  G__anabrips_dictLN_TMemberInspector.tagnum = -1 ;
  G__anabrips_dictLN_TObject.tagnum = -1 ;
  G__anabrips_dictLN_TNamed.tagnum = -1 ;
  G__anabrips_dictLN_TString.tagnum = -1 ;
  G__anabrips_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_TList.tagnum = -1 ;
  G__anabrips_dictLN_TClonesArray.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__anabrips_dictLN_TArtReconstruction.tagnum = -1 ;
  G__anabrips_dictLN_TArtRawSegmentObject.tagnum = -1 ;
  G__anabrips_dictLN_TArtTKEPara.tagnum = -1 ;
  G__anabrips_dictLN_TArtBigRIPSParameters.tagnum = -1 ;
  G__anabrips_dictLN_TArtTKE.tagnum = -1 ;
  G__anabrips_dictLN_TArtStoreManager.tagnum = -1 ;
  G__anabrips_dictLN_TArtCalibTKE.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETArtTKEParamUcOallocatorlETArtTKEParamUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETArtTKEParamUcOallocatorlETArtTKEParamUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__anabrips_dictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTSparselEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__anabrips_dictLN_TArtDataObject.tagnum = -1 ;
  G__anabrips_dictLN_TArtIC.tagnum = -1 ;
  G__anabrips_dictLN_TArtFocalPlane.tagnum = -1 ;
  G__anabrips_dictLN_TArtRIPS.tagnum = -1 ;
  G__anabrips_dictLN_TArtRecoRIPS.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETArtFocalPlanemUcOallocatorlETArtFocalPlanemUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETArtFocalPlanemUcOallocatorlETArtFocalPlanemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_TArtCalibPPAC.tagnum = -1 ;
  G__anabrips_dictLN_TArtCalibPlastic.tagnum = -1 ;
  G__anabrips_dictLN_TArtCalibIC.tagnum = -1 ;
  G__anabrips_dictLN_TArtCalibGe.tagnum = -1 ;
  G__anabrips_dictLN_TArtCalibFocalPlane.tagnum = -1 ;
  G__anabrips_dictLN_TArtCalibPID.tagnum = -1 ;
  G__anabrips_dictLN_TArtTOF.tagnum = -1 ;
  G__anabrips_dictLN_TArtBeam.tagnum = -1 ;
  G__anabrips_dictLN_TArtRecoTOF.tagnum = -1 ;
  G__anabrips_dictLN_TArtRecoBeam.tagnum = -1 ;
  G__anabrips_dictLN_TArtRecoPID.tagnum = -1 ;
  G__anabrips_dictLN_TArtFocalPlanePara.tagnum = -1 ;
  G__anabrips_dictLN_TArtGePara.tagnum = -1 ;
  G__anabrips_dictLN_TArtGe.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETArtGeParamUcOallocatorlETArtGeParamUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETArtGeParamUcOallocatorlETArtGeParamUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_TArtPPACPara.tagnum = -1 ;
  G__anabrips_dictLN_TArtPPAC.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETArtPPACParamUcOallocatorlETArtPPACParamUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPPACParamUcOallocatorlETArtPPACParamUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_TArtSi.tagnum = -1 ;
  G__anabrips_dictLN_TXMLNode.tagnum = -1 ;
  G__anabrips_dictLN_TArtPlasticPara.tagnum = -1 ;
  G__anabrips_dictLN_TArtICPara.tagnum = -1 ;
  G__anabrips_dictLN_TArtSiPara.tagnum = -1 ;
  G__anabrips_dictLN_TArtRIPSPara.tagnum = -1 ;
  G__anabrips_dictLN_TArtTOFPara.tagnum = -1 ;
  G__anabrips_dictLN_TArtBeamPara.tagnum = -1 ;
  G__anabrips_dictLN_TArtRIDFMap.tagnum = -1 ;
  G__anabrips_dictLN_maplETArtRIDFMapcOTArtPPACParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtPPACParamUgRsPgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_maplETArtRIDFMapcOTArtPlasticParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtPlasticParamUgRsPgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_maplETStringcOTArtPlasticParamUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArtPlasticParamUgRsPgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_maplETStringcOTArtTOFParamUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArtTOFParamUgRsPgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_maplETArtRIDFMapcOTArtICParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtICParamUgRsPgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_maplETArtRIDFMapcOTArtGeParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtGeParamUgRsPgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_maplETArtRIDFMapcOTArtSiParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtSiParamUgRsPgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_maplETArtRIDFMapcOTArtTKEParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtTKEParamUgRsPgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_maplEintcOTArtFocalPlaneParamUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTArtFocalPlaneParamUgRsPgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETArtBigRIPSParameterscLcLDipolecOallocatorlETArtBigRIPSParameterscLcLDipolegRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETArtBigRIPSParameterscLcLDipolecOallocatorlETArtBigRIPSParameterscLcLDipolegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_maplETArtRIDFMapcOintcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOintgRsPgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETArtICParamUcOallocatorlETArtICParamUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETArtICParamUcOallocatorlETArtICParamUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_vectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_TArtPlastic.tagnum = -1 ;
  G__anabrips_dictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETArtPlasticParamUcOallocatorlETArtPlasticParamUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPlasticParamUcOallocatorlETArtPlasticParamUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETArtRIPSmUcOallocatorlETArtRIPSmUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETArtRIPSmUcOallocatorlETArtRIPSmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETArtTOFmUcOallocatorlETArtTOFmUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETArtTOFmUcOallocatorlETArtTOFmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETArtICmUcOallocatorlETArtICmUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETArtICmUcOallocatorlETArtICmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETArtPlasticmUcOallocatorlETArtPlasticmUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPlasticmUcOallocatorlETArtPlasticmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anabrips_dictLN_TArtCalibCoin.tagnum = -1 ;
  G__anabrips_dictLN_TArtCalibSi.tagnum = -1 ;
  G__anabrips_dictLN_vectorlETArtSiParamUcOallocatorlETArtSiParamUgRsPgR.tagnum = -1 ;
  G__anabrips_dictLN_reverse_iteratorlEvectorlETArtSiParamUcOallocatorlETArtSiParamUgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableanabrips_dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TClass);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TObject);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TString);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TList);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtReconstruction);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtRawSegmentObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtTKEPara),sizeof(TArtTKEPara),-1,324864,(char*)NULL,G__setup_memvarTArtTKEPara,G__setup_memfuncTArtTKEPara);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtBigRIPSParameters),sizeof(TArtBigRIPSParameters),-1,324864,(char*)NULL,G__setup_memvarTArtBigRIPSParameters,G__setup_memfuncTArtBigRIPSParameters);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtTKE),sizeof(TArtTKE),-1,292096,(char*)NULL,G__setup_memvarTArtTKE,G__setup_memfuncTArtTKE);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtStoreManager);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtCalibTKE),sizeof(TArtCalibTKE),-1,263424,(char*)NULL,G__setup_memvarTArtCalibTKE,G__setup_memfuncTArtCalibTKE);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETArtTKEParamUcOallocatorlETArtTKEParamUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtTKEParamUcOallocatorlETArtTKEParamUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTSparselEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtDataObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtIC),sizeof(TArtIC),-1,292096,(char*)NULL,G__setup_memvarTArtIC,G__setup_memfuncTArtIC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtFocalPlane),sizeof(TArtFocalPlane),-1,292096,(char*)NULL,G__setup_memvarTArtFocalPlane,G__setup_memfuncTArtFocalPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtRIPS),sizeof(TArtRIPS),-1,292096,(char*)NULL,G__setup_memvarTArtRIPS,G__setup_memfuncTArtRIPS);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtRecoRIPS),sizeof(TArtRecoRIPS),-1,263424,(char*)NULL,G__setup_memvarTArtRecoRIPS,G__setup_memfuncTArtRecoRIPS);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETArtFocalPlanemUcOallocatorlETArtFocalPlanemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtFocalPlanemUcOallocatorlETArtFocalPlanemUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtCalibPPAC),sizeof(TArtCalibPPAC),-1,263424,(char*)NULL,G__setup_memvarTArtCalibPPAC,G__setup_memfuncTArtCalibPPAC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtCalibPlastic),sizeof(TArtCalibPlastic),-1,263424,(char*)NULL,G__setup_memvarTArtCalibPlastic,G__setup_memfuncTArtCalibPlastic);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtCalibIC),sizeof(TArtCalibIC),-1,263424,(char*)NULL,G__setup_memvarTArtCalibIC,G__setup_memfuncTArtCalibIC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtCalibGe),sizeof(TArtCalibGe),-1,263424,(char*)NULL,G__setup_memvarTArtCalibGe,G__setup_memfuncTArtCalibGe);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtCalibFocalPlane),sizeof(TArtCalibFocalPlane),-1,263424,(char*)NULL,G__setup_memvarTArtCalibFocalPlane,G__setup_memfuncTArtCalibFocalPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtCalibPID),sizeof(TArtCalibPID),-1,263424,(char*)NULL,G__setup_memvarTArtCalibPID,G__setup_memfuncTArtCalibPID);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtTOF),sizeof(TArtTOF),-1,292096,(char*)NULL,G__setup_memvarTArtTOF,G__setup_memfuncTArtTOF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtBeam),sizeof(TArtBeam),-1,292096,(char*)NULL,G__setup_memvarTArtBeam,G__setup_memfuncTArtBeam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtRecoTOF),sizeof(TArtRecoTOF),-1,263424,(char*)NULL,G__setup_memvarTArtRecoTOF,G__setup_memfuncTArtRecoTOF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtRecoBeam),sizeof(TArtRecoBeam),-1,263424,(char*)NULL,G__setup_memvarTArtRecoBeam,G__setup_memfuncTArtRecoBeam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtRecoPID),sizeof(TArtRecoPID),-1,263424,(char*)NULL,G__setup_memvarTArtRecoPID,G__setup_memfuncTArtRecoPID);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtFocalPlanePara),sizeof(TArtFocalPlanePara),-1,324864,(char*)NULL,G__setup_memvarTArtFocalPlanePara,G__setup_memfuncTArtFocalPlanePara);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtGePara),sizeof(TArtGePara),-1,324864,(char*)NULL,G__setup_memvarTArtGePara,G__setup_memfuncTArtGePara);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtGe),sizeof(TArtGe),-1,292096,(char*)NULL,G__setup_memvarTArtGe,G__setup_memfuncTArtGe);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETArtGeParamUcOallocatorlETArtGeParamUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtGeParamUcOallocatorlETArtGeParamUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtPPACPara),sizeof(TArtPPACPara),-1,324864,(char*)NULL,G__setup_memvarTArtPPACPara,G__setup_memfuncTArtPPACPara);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtPPAC),sizeof(TArtPPAC),-1,292096,(char*)NULL,G__setup_memvarTArtPPAC,G__setup_memfuncTArtPPAC);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETArtPPACParamUcOallocatorlETArtPPACParamUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPPACParamUcOallocatorlETArtPPACParamUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtSi),sizeof(TArtSi),-1,292096,(char*)NULL,G__setup_memvarTArtSi,G__setup_memfuncTArtSi);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TXMLNode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtPlasticPara),sizeof(TArtPlasticPara),-1,324864,(char*)NULL,G__setup_memvarTArtPlasticPara,G__setup_memfuncTArtPlasticPara);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtICPara),sizeof(TArtICPara),-1,324864,(char*)NULL,G__setup_memvarTArtICPara,G__setup_memfuncTArtICPara);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtSiPara),sizeof(TArtSiPara),-1,324864,(char*)NULL,G__setup_memvarTArtSiPara,G__setup_memfuncTArtSiPara);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtRIPSPara),sizeof(TArtRIPSPara),-1,324864,(char*)NULL,G__setup_memvarTArtRIPSPara,G__setup_memfuncTArtRIPSPara);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtTOFPara),sizeof(TArtTOFPara),-1,324864,(char*)NULL,G__setup_memvarTArtTOFPara,G__setup_memfuncTArtTOFPara);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtBeamPara),sizeof(TArtBeamPara),-1,324864,(char*)NULL,G__setup_memvarTArtBeamPara,G__setup_memfuncTArtBeamPara);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtRIDFMap);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtPPACParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtPPACParamUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtPlasticParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtPlasticParamUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_maplETStringcOTArtPlasticParamUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArtPlasticParamUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_maplETStringcOTArtTOFParamUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArtTOFParamUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtICParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtICParamUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtGeParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtGeParamUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtSiParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtSiParamUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_maplETArtRIDFMapcOTArtTKEParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtTKEParamUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_maplEintcOTArtFocalPlaneParamUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTArtFocalPlaneParamUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETArtBigRIPSParameterscLcLDipolecOallocatorlETArtBigRIPSParameterscLcLDipolegRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtBigRIPSParameterscLcLDipolecOallocatorlETArtBigRIPSParameterscLcLDipolegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_maplETArtRIDFMapcOintcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETArtICParamUcOallocatorlETArtICParamUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtICParamUcOallocatorlETArtICParamUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUcOallocatorlEvectorlETArtPPACmUcOallocatorlETArtPPACmUgRsPgRmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtPlastic),sizeof(TArtPlastic),-1,292096,(char*)NULL,G__setup_memvarTArtPlastic,G__setup_memfuncTArtPlastic);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETArtPlasticParamUcOallocatorlETArtPlasticParamUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPlasticParamUcOallocatorlETArtPlasticParamUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETArtRIPSmUcOallocatorlETArtRIPSmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtRIPSmUcOallocatorlETArtRIPSmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETArtTOFmUcOallocatorlETArtTOFmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtTOFmUcOallocatorlETArtTOFmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETArtICmUcOallocatorlETArtICmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtICmUcOallocatorlETArtICmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETArtPlasticmUcOallocatorlETArtPlasticmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtPlasticmUcOallocatorlETArtPlasticmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtCalibCoin),sizeof(TArtCalibCoin),-1,263424,(char*)NULL,G__setup_memvarTArtCalibCoin,G__setup_memfuncTArtCalibCoin);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anabrips_dictLN_TArtCalibSi),sizeof(TArtCalibSi),-1,263424,(char*)NULL,G__setup_memvarTArtCalibSi,G__setup_memfuncTArtCalibSi);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_vectorlETArtSiParamUcOallocatorlETArtSiParamUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anabrips_dictLN_reverse_iteratorlEvectorlETArtSiParamUcOallocatorlETArtSiParamUgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupanabrips_dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupanabrips_dict()");
  G__set_cpp_environmentanabrips_dict();
  G__cpp_setup_tagtableanabrips_dict();

  G__cpp_setup_inheritanceanabrips_dict();

  G__cpp_setup_typetableanabrips_dict();

  G__cpp_setup_memvaranabrips_dict();

  G__cpp_setup_memfuncanabrips_dict();
  G__cpp_setup_globalanabrips_dict();
  G__cpp_setup_funcanabrips_dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncanabrips_dict();
  return;
}
class G__cpp_setup_initanabrips_dict {
  public:
    G__cpp_setup_initanabrips_dict() { G__add_setup_func("anabrips_dict",(G__incsetup)(&G__cpp_setupanabrips_dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initanabrips_dict() { G__remove_setup_func("anabrips_dict"); }
};
G__cpp_setup_initanabrips_dict G__cpp_setup_initializeranabrips_dict;


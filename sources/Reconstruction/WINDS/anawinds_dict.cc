//
// File generated by rootcint at Mon Nov 27 20:35:29 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME anawinds_dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "anawinds_dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void TArtWINDSPla_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtWINDSPla(void *p = 0);
   static void *newArray_TArtWINDSPla(Long_t size, void *p);
   static void delete_TArtWINDSPla(void *p);
   static void deleteArray_TArtWINDSPla(void *p);
   static void destruct_TArtWINDSPla(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtWINDSPla*)
   {
      ::TArtWINDSPla *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtWINDSPla >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtWINDSPla", ::TArtWINDSPla::Class_Version(), "./include/TArtWINDSPla.hh", 6,
                  typeid(::TArtWINDSPla), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtWINDSPla::Dictionary, isa_proxy, 4,
                  sizeof(::TArtWINDSPla) );
      instance.SetNew(&new_TArtWINDSPla);
      instance.SetNewArray(&newArray_TArtWINDSPla);
      instance.SetDelete(&delete_TArtWINDSPla);
      instance.SetDeleteArray(&deleteArray_TArtWINDSPla);
      instance.SetDestructor(&destruct_TArtWINDSPla);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtWINDSPla*)
   {
      return GenerateInitInstanceLocal((::TArtWINDSPla*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtWINDSPla*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtWINDSPlaPara_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtWINDSPlaPara(void *p = 0);
   static void *newArray_TArtWINDSPlaPara(Long_t size, void *p);
   static void delete_TArtWINDSPlaPara(void *p);
   static void deleteArray_TArtWINDSPlaPara(void *p);
   static void destruct_TArtWINDSPlaPara(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtWINDSPlaPara*)
   {
      ::TArtWINDSPlaPara *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtWINDSPlaPara >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtWINDSPlaPara", ::TArtWINDSPlaPara::Class_Version(), "./include/TArtWINDSPlaPara.hh", 12,
                  typeid(::TArtWINDSPlaPara), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtWINDSPlaPara::Dictionary, isa_proxy, 4,
                  sizeof(::TArtWINDSPlaPara) );
      instance.SetNew(&new_TArtWINDSPlaPara);
      instance.SetNewArray(&newArray_TArtWINDSPlaPara);
      instance.SetDelete(&delete_TArtWINDSPlaPara);
      instance.SetDeleteArray(&deleteArray_TArtWINDSPlaPara);
      instance.SetDestructor(&destruct_TArtWINDSPlaPara);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtWINDSPlaPara*)
   {
      return GenerateInitInstanceLocal((::TArtWINDSPlaPara*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtWINDSPlaPara*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtWINDSParameters_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtWINDSParameters(void *p = 0);
   static void *newArray_TArtWINDSParameters(Long_t size, void *p);
   static void delete_TArtWINDSParameters(void *p);
   static void deleteArray_TArtWINDSParameters(void *p);
   static void destruct_TArtWINDSParameters(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtWINDSParameters*)
   {
      ::TArtWINDSParameters *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtWINDSParameters >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtWINDSParameters", ::TArtWINDSParameters::Class_Version(), "./include/TArtWINDSParameters.hh", 15,
                  typeid(::TArtWINDSParameters), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtWINDSParameters::Dictionary, isa_proxy, 4,
                  sizeof(::TArtWINDSParameters) );
      instance.SetNew(&new_TArtWINDSParameters);
      instance.SetNewArray(&newArray_TArtWINDSParameters);
      instance.SetDelete(&delete_TArtWINDSParameters);
      instance.SetDeleteArray(&deleteArray_TArtWINDSParameters);
      instance.SetDestructor(&destruct_TArtWINDSParameters);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtWINDSParameters*)
   {
      return GenerateInitInstanceLocal((::TArtWINDSParameters*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtWINDSParameters*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TArtCalibWINDSPla_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TArtCalibWINDSPla(void *p = 0);
   static void *newArray_TArtCalibWINDSPla(Long_t size, void *p);
   static void delete_TArtCalibWINDSPla(void *p);
   static void deleteArray_TArtCalibWINDSPla(void *p);
   static void destruct_TArtCalibWINDSPla(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TArtCalibWINDSPla*)
   {
      ::TArtCalibWINDSPla *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TArtCalibWINDSPla >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TArtCalibWINDSPla", ::TArtCalibWINDSPla::Class_Version(), "./include/TArtCalibWINDSPla.hh", 17,
                  typeid(::TArtCalibWINDSPla), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TArtCalibWINDSPla::Dictionary, isa_proxy, 4,
                  sizeof(::TArtCalibWINDSPla) );
      instance.SetNew(&new_TArtCalibWINDSPla);
      instance.SetNewArray(&newArray_TArtCalibWINDSPla);
      instance.SetDelete(&delete_TArtCalibWINDSPla);
      instance.SetDeleteArray(&deleteArray_TArtCalibWINDSPla);
      instance.SetDestructor(&destruct_TArtCalibWINDSPla);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TArtCalibWINDSPla*)
   {
      return GenerateInitInstanceLocal((::TArtCalibWINDSPla*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TArtCalibWINDSPla*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr TArtWINDSPla::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtWINDSPla::Class_Name()
{
   return "TArtWINDSPla";
}

//______________________________________________________________________________
const char *TArtWINDSPla::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtWINDSPla*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtWINDSPla::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtWINDSPla*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtWINDSPla::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtWINDSPla*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtWINDSPla::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtWINDSPla*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtWINDSPlaPara::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtWINDSPlaPara::Class_Name()
{
   return "TArtWINDSPlaPara";
}

//______________________________________________________________________________
const char *TArtWINDSPlaPara::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtWINDSPlaPara*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtWINDSPlaPara::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtWINDSPlaPara*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtWINDSPlaPara::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtWINDSPlaPara*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtWINDSPlaPara::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtWINDSPlaPara*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtWINDSParameters::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtWINDSParameters::Class_Name()
{
   return "TArtWINDSParameters";
}

//______________________________________________________________________________
const char *TArtWINDSParameters::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtWINDSParameters*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtWINDSParameters::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtWINDSParameters*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtWINDSParameters::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtWINDSParameters*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtWINDSParameters::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtWINDSParameters*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TArtCalibWINDSPla::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TArtCalibWINDSPla::Class_Name()
{
   return "TArtCalibWINDSPla";
}

//______________________________________________________________________________
const char *TArtCalibWINDSPla::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibWINDSPla*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TArtCalibWINDSPla::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibWINDSPla*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TArtCalibWINDSPla::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibWINDSPla*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TArtCalibWINDSPla::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TArtCalibWINDSPla*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void TArtWINDSParameters::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtWINDSParameters.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtWINDSParameters::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtWINDSParameters::Class(),this);
   }
}

//______________________________________________________________________________
void TArtWINDSParameters::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtWINDSParameters.
      TClass *R__cl = ::TArtWINDSParameters::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "winds_pmap", (void*)&winds_pmap);
      R__insp.InspectMember("map<TArtRIDFMap,TArtWINDSPlaPara*>", (void*)&winds_pmap, "winds_pmap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*listOfWINDSPlaPara", &listOfWINDSPlaPara);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStoreManager", &fStoreManager);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtWINDSParameters(void *p) {
      return  p ? new(p) ::TArtWINDSParameters : new ::TArtWINDSParameters;
   }
   static void *newArray_TArtWINDSParameters(Long_t nElements, void *p) {
      return p ? new(p) ::TArtWINDSParameters[nElements] : new ::TArtWINDSParameters[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtWINDSParameters(void *p) {
      delete ((::TArtWINDSParameters*)p);
   }
   static void deleteArray_TArtWINDSParameters(void *p) {
      delete [] ((::TArtWINDSParameters*)p);
   }
   static void destruct_TArtWINDSParameters(void *p) {
      typedef ::TArtWINDSParameters current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtWINDSParameters

//______________________________________________________________________________
void TArtCalibWINDSPla::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtCalibWINDSPla.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtCalibWINDSPla::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtCalibWINDSPla::Class(),this);
   }
}

//______________________________________________________________________________
void TArtCalibWINDSPla::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtCalibWINDSPla.
      TClass *R__cl = ::TArtCalibWINDSPla::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWINDSPlaArray", &fWINDSPlaArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWINDSPlaParaArray", (void*)&fWINDSPlaParaArray);
      R__insp.InspectMember("vector<TArtWINDSPlaPara*>", (void*)&fWINDSPlaParaArray, "fWINDSPlaParaArray.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sman", &sman);
      TArtReconstruction::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtCalibWINDSPla(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibWINDSPla : new ::TArtCalibWINDSPla;
   }
   static void *newArray_TArtCalibWINDSPla(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TArtCalibWINDSPla[nElements] : new ::TArtCalibWINDSPla[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtCalibWINDSPla(void *p) {
      delete ((::TArtCalibWINDSPla*)p);
   }
   static void deleteArray_TArtCalibWINDSPla(void *p) {
      delete [] ((::TArtCalibWINDSPla*)p);
   }
   static void destruct_TArtCalibWINDSPla(void *p) {
      typedef ::TArtCalibWINDSPla current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtCalibWINDSPla

//______________________________________________________________________________
void TArtWINDSPla::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtWINDSPla.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtWINDSPla::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtWINDSPla::Class(),this);
   }
}

//______________________________________________________________________________
void TArtWINDSPla::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtWINDSPla.
      TClass *R__cl = ::TArtWINDSPla::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT1Raw", &fT1Raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT2Raw", &fT2Raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT1TRaw", &fT1TRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT2TRaw", &fT2TRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQ1Raw", &fQ1Raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQ2Raw", &fQ2Raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQ1Ped", &fQ1Ped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQ2Ped", &fQ2Ped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQ1Cal", &fQ1Cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQ2Cal", &fQ2Cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQAveRaw", &fQAveRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQAvePed", &fQAvePed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQAveCal", &fQAveCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime1", &fTime1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime2", &fTime2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime1Slew", &fTime1Slew);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime2Slew", &fTime2Slew);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeSlew", &fTimeSlew);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeCal", &fTimeCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeSlewCal", &fTimeSlewCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYpos", &fYpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXpos", &fXpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZpos", &fZpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYposSlew", &fYposSlew);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYposIntr", &fYposIntr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYposIntrSlew", &fYposIntrSlew);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTdif12", &fTdif12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTdif12Slew", &fTdif12Slew);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTdif12Raw", &fTdif12Raw);
      TArtDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtWINDSPla(void *p) {
      return  p ? new(p) ::TArtWINDSPla : new ::TArtWINDSPla;
   }
   static void *newArray_TArtWINDSPla(Long_t nElements, void *p) {
      return p ? new(p) ::TArtWINDSPla[nElements] : new ::TArtWINDSPla[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtWINDSPla(void *p) {
      delete ((::TArtWINDSPla*)p);
   }
   static void deleteArray_TArtWINDSPla(void *p) {
      delete [] ((::TArtWINDSPla*)p);
   }
   static void destruct_TArtWINDSPla(void *p) {
      typedef ::TArtWINDSPla current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtWINDSPla

//______________________________________________________________________________
void TArtWINDSPlaPara::Streamer(TBuffer &R__b)
{
   // Stream an object of class TArtWINDSPlaPara.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TArtWINDSPlaPara::Class(),this);
   } else {
      R__b.WriteClassBuffer(TArtWINDSPlaPara::Class(),this);
   }
}

//______________________________________________________________________________
void TArtWINDSPlaPara::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TArtWINDSPlaPara.
      TClass *R__cl = ::TArtWINDSPlaPara::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detname", &detname);
      R__insp.InspectMember(detname, "detname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpl", &fpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tcal_1", &tcal_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tcal_2", &tcal_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "toff_1", &toff_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "toff_2", &toff_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qcal_1", &qcal_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qcal_2", &qcal_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qped_1", &qped_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qped_2", &qped_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tslew_1_a", &tslew_1_a);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tslew_1_b", &tslew_1_b);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tslew_2_a", &tslew_2_a);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tslew_2_b", &tslew_2_b);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofslew_a", &tofslew_a);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofoffset", &tofoffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofslewoffset", &tofslewoffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ypos_ch2mm", &ypos_ch2mm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ypos_offset", &ypos_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xcenter", &xcenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ycenter", &ycenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zcenter", &zcenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_t1", &map_t1);
      R__insp.InspectMember(map_t1, "map_t1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_t2", &map_t2);
      R__insp.InspectMember(map_t2, "map_t2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_q1", &map_q1);
      R__insp.InspectMember(map_q1, "map_q1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_q2", &map_q2);
      R__insp.InspectMember(map_q2, "map_q2.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TArtWINDSPlaPara(void *p) {
      return  p ? new(p) ::TArtWINDSPlaPara : new ::TArtWINDSPlaPara;
   }
   static void *newArray_TArtWINDSPlaPara(Long_t nElements, void *p) {
      return p ? new(p) ::TArtWINDSPlaPara[nElements] : new ::TArtWINDSPlaPara[nElements];
   }
   // Wrapper around operator delete
   static void delete_TArtWINDSPlaPara(void *p) {
      delete ((::TArtWINDSPlaPara*)p);
   }
   static void deleteArray_TArtWINDSPlaPara(void *p) {
      delete [] ((::TArtWINDSPlaPara*)p);
   }
   static void destruct_TArtWINDSPlaPara(void *p) {
      typedef ::TArtWINDSPlaPara current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TArtWINDSPlaPara

namespace ROOTDict {
   void maplETArtRIDFMapcOTArtWINDSPlaParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETArtRIDFMapcOTArtWINDSPlaParamUgR_Dictionary();
   static void *new_maplETArtRIDFMapcOTArtWINDSPlaParamUgR(void *p = 0);
   static void *newArray_maplETArtRIDFMapcOTArtWINDSPlaParamUgR(Long_t size, void *p);
   static void delete_maplETArtRIDFMapcOTArtWINDSPlaParamUgR(void *p);
   static void deleteArray_maplETArtRIDFMapcOTArtWINDSPlaParamUgR(void *p);
   static void destruct_maplETArtRIDFMapcOTArtWINDSPlaParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TArtRIDFMap,TArtWINDSPlaPara*>*)
   {
      map<TArtRIDFMap,TArtWINDSPlaPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TArtRIDFMap,TArtWINDSPlaPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TArtRIDFMap,TArtWINDSPlaPara*>", -2, "prec_stl/map", 63,
                  typeid(map<TArtRIDFMap,TArtWINDSPlaPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETArtRIDFMapcOTArtWINDSPlaParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TArtRIDFMap,TArtWINDSPlaPara*>) );
      instance.SetNew(&new_maplETArtRIDFMapcOTArtWINDSPlaParamUgR);
      instance.SetNewArray(&newArray_maplETArtRIDFMapcOTArtWINDSPlaParamUgR);
      instance.SetDelete(&delete_maplETArtRIDFMapcOTArtWINDSPlaParamUgR);
      instance.SetDeleteArray(&deleteArray_maplETArtRIDFMapcOTArtWINDSPlaParamUgR);
      instance.SetDestructor(&destruct_maplETArtRIDFMapcOTArtWINDSPlaParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TArtRIDFMap,TArtWINDSPlaPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtWINDSPlaPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETArtRIDFMapcOTArtWINDSPlaParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TArtRIDFMap,TArtWINDSPlaPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETArtRIDFMapcOTArtWINDSPlaParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtWINDSPlaPara*> : new map<TArtRIDFMap,TArtWINDSPlaPara*>;
   }
   static void *newArray_maplETArtRIDFMapcOTArtWINDSPlaParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TArtRIDFMap,TArtWINDSPlaPara*>[nElements] : new map<TArtRIDFMap,TArtWINDSPlaPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETArtRIDFMapcOTArtWINDSPlaParamUgR(void *p) {
      delete ((map<TArtRIDFMap,TArtWINDSPlaPara*>*)p);
   }
   static void deleteArray_maplETArtRIDFMapcOTArtWINDSPlaParamUgR(void *p) {
      delete [] ((map<TArtRIDFMap,TArtWINDSPlaPara*>*)p);
   }
   static void destruct_maplETArtRIDFMapcOTArtWINDSPlaParamUgR(void *p) {
      typedef map<TArtRIDFMap,TArtWINDSPlaPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TArtRIDFMap,TArtWINDSPlaPara*>

namespace ROOTDict {
   void vectorlETArtWINDSPlaParamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETArtWINDSPlaParamUgR_Dictionary();
   static void *new_vectorlETArtWINDSPlaParamUgR(void *p = 0);
   static void *newArray_vectorlETArtWINDSPlaParamUgR(Long_t size, void *p);
   static void delete_vectorlETArtWINDSPlaParamUgR(void *p);
   static void deleteArray_vectorlETArtWINDSPlaParamUgR(void *p);
   static void destruct_vectorlETArtWINDSPlaParamUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TArtWINDSPlaPara*>*)
   {
      vector<TArtWINDSPlaPara*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TArtWINDSPlaPara*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TArtWINDSPlaPara*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TArtWINDSPlaPara*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETArtWINDSPlaParamUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TArtWINDSPlaPara*>) );
      instance.SetNew(&new_vectorlETArtWINDSPlaParamUgR);
      instance.SetNewArray(&newArray_vectorlETArtWINDSPlaParamUgR);
      instance.SetDelete(&delete_vectorlETArtWINDSPlaParamUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETArtWINDSPlaParamUgR);
      instance.SetDestructor(&destruct_vectorlETArtWINDSPlaParamUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TArtWINDSPlaPara*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TArtWINDSPlaPara*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETArtWINDSPlaParamUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TArtWINDSPlaPara*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETArtWINDSPlaParamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtWINDSPlaPara*> : new vector<TArtWINDSPlaPara*>;
   }
   static void *newArray_vectorlETArtWINDSPlaParamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TArtWINDSPlaPara*>[nElements] : new vector<TArtWINDSPlaPara*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETArtWINDSPlaParamUgR(void *p) {
      delete ((vector<TArtWINDSPlaPara*>*)p);
   }
   static void deleteArray_vectorlETArtWINDSPlaParamUgR(void *p) {
      delete [] ((vector<TArtWINDSPlaPara*>*)p);
   }
   static void destruct_vectorlETArtWINDSPlaParamUgR(void *p) {
      typedef vector<TArtWINDSPlaPara*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TArtWINDSPlaPara*>

/********************************************************
* anawinds_dict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableanawinds_dict();

extern "C" void G__set_cpp_environmentanawinds_dict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("include/TArtWINDSPla.hh");
  G__add_compiledheader("include/TArtWINDSPlaPara.hh");
  G__add_compiledheader("include/TArtCalibWINDSPla.hh");
  G__add_compiledheader("include/TArtWINDSParameters.hh");
  G__cpp_reset_tagtableanawinds_dict();
}
#include <new>
extern "C" int G__cpp_dllrevanawinds_dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TArtWINDSPla */
static int G__anawinds_dict_185_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtWINDSPla* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtWINDSPla[n];
     } else {
       p = new((void*) gvp) TArtWINDSPla[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtWINDSPla;
     } else {
       p = new((void*) gvp) TArtWINDSPla;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetT1Raw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetT2Raw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetT1TRaw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetT2TRaw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetQ1Raw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetQ2Raw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetQ1Ped((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetQ2Ped((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetQ1Cal((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetQ2Cal((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetQAveRaw((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetQAvePed((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetQAveCal((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtWINDSPla*) G__getstructoffset())->GetT1Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtWINDSPla*) G__getstructoffset())->GetT2Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtWINDSPla*) G__getstructoffset())->GetT1TRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtWINDSPla*) G__getstructoffset())->GetT2TRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtWINDSPla*) G__getstructoffset())->GetQ1Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtWINDSPla*) G__getstructoffset())->GetQ2Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetQ1Ped());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetQ2Ped());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetQ1Cal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetQ2Cal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetQAveRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetQAvePed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetQAveCal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetTime((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetTime1((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetTime2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetTime1Slew((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetTime2Slew((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetTimeSlew((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetTdif12Slew((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetTimeCal((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetTimeSlewCal((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetTdif12((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetTdif12Raw((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetXpos((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetYpos((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetZpos((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetYposIntr((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetYposSlew((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->SetYposIntrSlew((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetTime1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetTime2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetTime1Slew());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetTime2Slew());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetTimeSlew());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetTimeCal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetTimeSlewCal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetTdif12Slew());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetTdif12());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetTdif12Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetXpos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetYpos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetZpos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetYposSlew());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetYposIntr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TArtWINDSPla*) G__getstructoffset())->GetYposIntrSlew());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TArtWINDSPla*) G__getstructoffset())->IsEqual((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtWINDSPla::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtWINDSPla::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtWINDSPla::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtWINDSPla::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPla*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtWINDSPla::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtWINDSPla::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtWINDSPla::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_185_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtWINDSPla::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anawinds_dict_185_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtWINDSPla* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtWINDSPla(*(TArtWINDSPla*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtWINDSPla G__TTArtWINDSPla;
static int G__anawinds_dict_185_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtWINDSPla*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtWINDSPla*) (soff+(sizeof(TArtWINDSPla)*i)))->~G__TTArtWINDSPla();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtWINDSPla*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtWINDSPla*) (soff))->~G__TTArtWINDSPla();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anawinds_dict_185_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtWINDSPla* dest = (TArtWINDSPla*) G__getstructoffset();
   *dest = *(TArtWINDSPla*) libp->para[0].ref;
   const TArtWINDSPla& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtWINDSPlaPara */
static int G__anawinds_dict_422_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtWINDSPlaPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtWINDSPlaPara[n];
     } else {
       p = new((void*) gvp) TArtWINDSPlaPara[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtWINDSPlaPara;
     } else {
       p = new((void*) gvp) TArtWINDSPlaPara;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtWINDSPlaPara* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 23
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TArtWINDSPlaPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Double_t) G__double(libp->para[18]), (Double_t) G__double(libp->para[19])
, (Double_t) G__double(libp->para[20]), (Double_t) G__double(libp->para[21])
, (Double_t) G__double(libp->para[22]));
   } else {
     p = new((void*) gvp) TArtWINDSPlaPara(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Double_t) G__double(libp->para[18]), (Double_t) G__double(libp->para[19])
, (Double_t) G__double(libp->para[20]), (Double_t) G__double(libp->para[21])
, (Double_t) G__double(libp->para[22]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPlaPara*) G__getstructoffset())->SetPalameters(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Double_t) G__double(libp->para[18]), (Double_t) G__double(libp->para[19])
, (Double_t) G__double(libp->para[20]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPlaPara*) G__getstructoffset())->SetMap(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtWINDSPlaPara*) G__getstructoffset())->GetDetectorName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetFpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetTCal1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetTCal2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetTOff1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetTOff2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetQCal1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetQCal2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetQPed1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetQPed2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetT1SlewA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetT1SlewB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetT2SlewA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetT2SlewB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetTOFSlewA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetYposCal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetYposOff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetXcenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetYcenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetZcenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetTOFOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TArtWINDSPlaPara*) G__getstructoffset())->GetTOFSlewOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtWINDSPlaPara*) G__getstructoffset())->GetT1Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtWINDSPlaPara*) G__getstructoffset())->GetT2Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtWINDSPlaPara*) G__getstructoffset())->GetQ1Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtWINDSPlaPara*) G__getstructoffset())->GetQ2Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtWINDSPlaPara::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtWINDSPlaPara::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtWINDSPlaPara::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtWINDSPlaPara::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSPlaPara*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtWINDSPlaPara::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtWINDSPlaPara::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtWINDSPlaPara::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_422_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtWINDSPlaPara::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anawinds_dict_422_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtWINDSPlaPara* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtWINDSPlaPara(*(TArtWINDSPlaPara*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtWINDSPlaPara G__TTArtWINDSPlaPara;
static int G__anawinds_dict_422_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtWINDSPlaPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtWINDSPlaPara*) (soff+(sizeof(TArtWINDSPlaPara)*i)))->~G__TTArtWINDSPlaPara();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtWINDSPlaPara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtWINDSPlaPara*) (soff))->~G__TTArtWINDSPlaPara();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anawinds_dict_422_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtWINDSPlaPara* dest = (TArtWINDSPlaPara*) G__getstructoffset();
   *dest = *(TArtWINDSPlaPara*) libp->para[0].ref;
   const TArtWINDSPlaPara& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtWINDSParameters */
static int G__anawinds_dict_459_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtWINDSParameters* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtWINDSParameters((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TArtWINDSParameters((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtWINDSParameters((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TArtWINDSParameters((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtWINDSParameters[n];
       } else {
         p = new((void*) gvp) TArtWINDSParameters[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtWINDSParameters;
       } else {
         p = new((void*) gvp) TArtWINDSParameters;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSParameters));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) TArtWINDSParameters::Instance((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) TArtWINDSParameters::Instance((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) TArtWINDSParameters::Instance());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtWINDSParameters::Delete();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TArtWINDSParameters*) G__getstructoffset())->LoadParameter((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSParameters*) G__getstructoffset())->PrintListOfWINDSPlaPara();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtWINDSParameters*) G__getstructoffset())->GetListOfWINDSPlaPara());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TArtWINDSParameters*) G__getstructoffset())->FindWINDSPlaPara((TArtRIDFMap*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtWINDSParameters::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtWINDSParameters::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtWINDSParameters::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtWINDSParameters::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtWINDSParameters*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtWINDSParameters::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtWINDSParameters::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtWINDSParameters::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_459_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtWINDSParameters::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anawinds_dict_459_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtWINDSParameters* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtWINDSParameters(*(TArtWINDSParameters*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSParameters));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtWINDSParameters G__TTArtWINDSParameters;
static int G__anawinds_dict_459_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtWINDSParameters*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtWINDSParameters*) (soff+(sizeof(TArtWINDSParameters)*i)))->~G__TTArtWINDSParameters();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtWINDSParameters*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtWINDSParameters*) (soff))->~G__TTArtWINDSParameters();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anawinds_dict_459_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtWINDSParameters* dest = (TArtWINDSParameters*) G__getstructoffset();
   *dest = *(TArtWINDSParameters*) libp->para[0].ref;
   const TArtWINDSParameters& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TArtCalibWINDSPla */
static int G__anawinds_dict_461_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibWINDSPla* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TArtCalibWINDSPla(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) TArtCalibWINDSPla(*((const TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibWINDSPla[n];
       } else {
         p = new((void*) gvp) TArtCalibWINDSPla[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TArtCalibWINDSPla;
       } else {
         p = new((void*) gvp) TArtCalibWINDSPla;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anawinds_dictLN_TArtCalibWINDSPla));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibWINDSPla*) G__getstructoffset())->LoadData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibWINDSPla*) G__getstructoffset())->LoadData((TArtRawSegmentObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibWINDSPla*) G__getstructoffset())->GetWINDSPlaArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TArtCalibWINDSPla*) G__getstructoffset())->GetNumWINDSPla());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibWINDSPla*) G__getstructoffset())->GetWINDSPla((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibWINDSPla*) G__getstructoffset())->GetWINDSPlaPara((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibWINDSPla*) G__getstructoffset())->FindWINDSPla((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibWINDSPla*) G__getstructoffset())->FindWINDSPla((TString*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TArtCalibWINDSPla*) G__getstructoffset())->FindWINDSPla((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TArtCalibWINDSPla::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibWINDSPla::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TArtCalibWINDSPla::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TArtCalibWINDSPla::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TArtCalibWINDSPla*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibWINDSPla::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibWINDSPla::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TArtCalibWINDSPla::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__anawinds_dict_461_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TArtCalibWINDSPla::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__anawinds_dict_461_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TArtCalibWINDSPla* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TArtCalibWINDSPla(*(TArtCalibWINDSPla*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__anawinds_dictLN_TArtCalibWINDSPla));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TArtCalibWINDSPla G__TTArtCalibWINDSPla;
static int G__anawinds_dict_461_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TArtCalibWINDSPla*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TArtCalibWINDSPla*) (soff+(sizeof(TArtCalibWINDSPla)*i)))->~G__TTArtCalibWINDSPla();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TArtCalibWINDSPla*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TArtCalibWINDSPla*) (soff))->~G__TTArtCalibWINDSPla();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__anawinds_dict_461_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TArtCalibWINDSPla* dest = (TArtCalibWINDSPla*) G__getstructoffset();
   *dest = *(TArtCalibWINDSPla*) libp->para[0].ref;
   const TArtCalibWINDSPla& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TArtWINDSPla */

/* TArtWINDSPlaPara */

/* TArtWINDSParameters */

/* TArtCalibWINDSPla */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncanawinds_dict {
 public:
  G__Sizep2memfuncanawinds_dict(): p(&G__Sizep2memfuncanawinds_dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncanawinds_dict::*p)();
};

size_t G__get_sizep2memfuncanawinds_dict()
{
  G__Sizep2memfuncanawinds_dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceanawinds_dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla))) {
     TArtWINDSPla *G__Lderived;
     G__Lderived=(TArtWINDSPla*)0x1000;
     {
       TArtDataObject *G__Lpbase=(TArtDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla),G__get_linked_tagnum(&G__anawinds_dictLN_TArtDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla),G__get_linked_tagnum(&G__anawinds_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara))) {
     TArtWINDSPlaPara *G__Lderived;
     G__Lderived=(TArtWINDSPlaPara*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara),G__get_linked_tagnum(&G__anawinds_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara),G__get_linked_tagnum(&G__anawinds_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSParameters))) {
     TArtWINDSParameters *G__Lderived;
     G__Lderived=(TArtWINDSParameters*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSParameters),G__get_linked_tagnum(&G__anawinds_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSParameters),G__get_linked_tagnum(&G__anawinds_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__anawinds_dictLN_TArtCalibWINDSPla))) {
     TArtCalibWINDSPla *G__Lderived;
     G__Lderived=(TArtCalibWINDSPla*)0x1000;
     {
       TArtReconstruction *G__Lpbase=(TArtReconstruction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtCalibWINDSPla),G__get_linked_tagnum(&G__anawinds_dictLN_TArtReconstruction),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableanawinds_dict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__anawinds_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anawinds_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anawinds_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anawinds_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anawinds_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__anawinds_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anawinds_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anawinds_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anawinds_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anawinds_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__anawinds_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__anawinds_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__anawinds_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__anawinds_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__anawinds_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TArtWINDSPlaPara*>",117,G__get_linked_tagnum(&G__anawinds_dictLN_vectorlETArtWINDSPlaParamUcOallocatorlETArtWINDSPlaParamUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__anawinds_dictLN_reverse_iteratorlEvectorlETArtWINDSPlaParamUcOallocatorlETArtWINDSPlaParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anawinds_dictLN_vectorlETArtWINDSPlaParamUcOallocatorlETArtWINDSPlaParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__anawinds_dictLN_reverse_iteratorlEvectorlETArtWINDSPlaParamUcOallocatorlETArtWINDSPlaParamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__anawinds_dictLN_vectorlETArtWINDSPlaParamUcOallocatorlETArtWINDSPlaParamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtWINDSPlaPara*>",117,G__get_linked_tagnum(&G__anawinds_dictLN_maplETArtRIDFMapcOTArtWINDSPlaParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtWINDSPlaParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TArtRIDFMap,TArtWINDSPlaPara*,less<TArtRIDFMap> >",117,G__get_linked_tagnum(&G__anawinds_dictLN_maplETArtRIDFMapcOTArtWINDSPlaParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtWINDSPlaParamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TArtWINDSPla */
static void G__setup_memvarTArtWINDSPla(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla));
   { TArtWINDSPla *p; p=(TArtWINDSPla*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fT1Raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fT2Raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fT1TRaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fT2TRaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fQ1Raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fQ2Raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fQ1Ped=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fQ2Ped=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fQ1Cal=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fQ2Cal=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fQAveRaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fQAvePed=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fQAveCal=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTime1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTime2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTime1Slew=",0,"after slewing correction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTime2Slew=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTimeSlew=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTimeCal=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTimeSlewCal=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fYpos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fXpos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZpos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fYposSlew=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fYposIntr=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fYposIntrSlew=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTdif12=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTdif12Slew=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTdif12Raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtWINDSPlaPara */
static void G__setup_memvarTArtWINDSPlaPara(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara));
   { TArtWINDSPlaPara *p; p=(TArtWINDSPlaPara*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"id=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TString),-1,-1,4,"detname=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tcal_1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tcal_2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"toff_1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"toff_2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"qcal_1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"qcal_2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"qped_1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"qped_2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tslew_1_a=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tslew_1_b=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tslew_2_a=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tslew_2_b=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tofslew_a=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tofoffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tofslewoffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ypos_ch2mm=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ypos_offset=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"xcenter=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ycenter=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zcenter=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TArtRIDFMap),-1,-1,4,"map_t1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TArtRIDFMap),-1,-1,4,"map_t2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TArtRIDFMap),-1,-1,4,"map_q1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TArtRIDFMap),-1,-1,4,"map_q2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtWINDSParameters */
static void G__setup_memvarTArtWINDSParameters(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSParameters));
   { TArtWINDSParameters *p; p=(TArtWINDSParameters*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_maplETArtRIDFMapcOTArtWINDSPlaParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtWINDSPlaParamUgRsPgRsPgR),G__defined_typename("map<TArtRIDFMap,TArtWINDSPlaPara*>"),-1,4,"winds_pmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TList),-1,-1,4,"listOfWINDSPlaPara=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TArtStoreManager),-1,-1,4,"fStoreManager=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSParameters),-1,-2,4,"fWINDSParameters=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TArtCalibWINDSPla */
static void G__setup_memvarTArtCalibWINDSPla(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtCalibWINDSPla));
   { TArtCalibWINDSPla *p; p=(TArtCalibWINDSPla*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TClonesArray),-1,-1,4,"fWINDSPlaArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_vectorlETArtWINDSPlaParamUcOallocatorlETArtWINDSPlaParamUgRsPgR),G__defined_typename("vector<TArtWINDSPlaPara*>"),-1,4,"fWINDSPlaParaArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSParameters),-1,-1,4,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TArtStoreManager),-1,-1,4,"sman=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__anawinds_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvaranawinds_dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTArtWINDSPla(void) {
   /* TArtWINDSPla */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla));
   G__memfunc_setup("TArtWINDSPla",1053,G__anawinds_dict_185_0_1, 105, G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT1Raw",731,G__anawinds_dict_185_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT2Raw",732,G__anawinds_dict_185_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT1TRaw",815,G__anawinds_dict_185_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT2TRaw",816,G__anawinds_dict_185_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQ1Raw",728,G__anawinds_dict_185_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQ2Raw",729,G__anawinds_dict_185_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQ1Ped",711,G__anawinds_dict_185_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQ2Ped",712,G__anawinds_dict_185_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQ1Cal",702,G__anawinds_dict_185_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQ2Cal",703,G__anawinds_dict_185_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQAveRaw",963,G__anawinds_dict_185_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQAvePed",946,G__anawinds_dict_185_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQAveCal",937,G__anawinds_dict_185_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT1Raw",719,G__anawinds_dict_185_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT2Raw",720,G__anawinds_dict_185_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT1TRaw",803,G__anawinds_dict_185_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT2TRaw",804,G__anawinds_dict_185_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQ1Raw",716,G__anawinds_dict_185_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQ2Raw",717,G__anawinds_dict_185_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQ1Ped",699,G__anawinds_dict_185_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQ2Ped",700,G__anawinds_dict_185_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQ1Cal",690,G__anawinds_dict_185_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQ2Cal",691,G__anawinds_dict_185_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQAveRaw",951,G__anawinds_dict_185_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQAvePed",934,G__anawinds_dict_185_0_26, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQAveCal",925,G__anawinds_dict_185_0_27, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__anawinds_dict_185_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTime1",748,G__anawinds_dict_185_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTime2",749,G__anawinds_dict_185_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTime1Slew",1159,G__anawinds_dict_185_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTime2Slew",1160,G__anawinds_dict_185_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTimeSlew",1110,G__anawinds_dict_185_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTdif12Slew",1201,G__anawinds_dict_185_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTimeCal",971,G__anawinds_dict_185_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTimeSlewCal",1382,G__anawinds_dict_185_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTdif12",790,G__anawinds_dict_185_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTdif12Raw",1088,G__anawinds_dict_185_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetXpos",726,G__anawinds_dict_185_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetYpos",727,G__anawinds_dict_185_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZpos",728,G__anawinds_dict_185_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetYposIntr",1140,G__anawinds_dict_185_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetYposSlew",1138,G__anawinds_dict_185_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetYposIntrSlew",1551,G__anawinds_dict_185_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTime",687,G__anawinds_dict_185_0_45, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime1",736,G__anawinds_dict_185_0_46, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime2",737,G__anawinds_dict_185_0_47, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime1Slew",1147,G__anawinds_dict_185_0_48, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime2Slew",1148,G__anawinds_dict_185_0_49, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeSlew",1098,G__anawinds_dict_185_0_50, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeCal",959,G__anawinds_dict_185_0_51, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeSlewCal",1370,G__anawinds_dict_185_0_52, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTdif12Slew",1189,G__anawinds_dict_185_0_53, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTdif12",778,G__anawinds_dict_185_0_54, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTdif12Raw",1076,G__anawinds_dict_185_0_55, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXpos",714,G__anawinds_dict_185_0_56, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYpos",715,G__anawinds_dict_185_0_57, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZpos",716,G__anawinds_dict_185_0_58, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYposSlew",1126,G__anawinds_dict_185_0_59, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYposIntr",1128,G__anawinds_dict_185_0_60, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYposIntrSlew",1539,G__anawinds_dict_185_0_61, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEqual",692,G__anawinds_dict_185_0_62, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__anawinds_dict_185_0_65, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtWINDSPla::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anawinds_dict_185_0_66, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtWINDSPla::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anawinds_dict_185_0_67, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtWINDSPla::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anawinds_dict_185_0_68, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtWINDSPla::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anawinds_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anawinds_dict_185_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anawinds_dict_185_0_73, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtWINDSPla::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anawinds_dict_185_0_74, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtWINDSPla::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anawinds_dict_185_0_75, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtWINDSPla::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anawinds_dict_185_0_76, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtWINDSPla::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtWINDSPla", 1053, G__anawinds_dict_185_0_77, (int) ('i'), G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla), -1, 0, 1, 1, 1, 0, "u 'TArtWINDSPla' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtWINDSPla", 1179, G__anawinds_dict_185_0_78, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anawinds_dict_185_0_79, (int) ('u'), G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla), -1, 1, 1, 1, 1, 0, "u 'TArtWINDSPla' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtWINDSPlaPara(void) {
   /* TArtWINDSPlaPara */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara));
   G__memfunc_setup("TArtWINDSPlaPara",1441,G__anawinds_dict_422_0_1, 105, G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TArtWINDSPlaPara",1441,G__anawinds_dict_422_0_2, 105, G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara), -1, 0, 23, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - tc1 "
"d - 'Double_t' 0 - tc2 d - 'Double_t' 0 - to1 "
"d - 'Double_t' 0 - to2 d - 'Double_t' 0 - qcal1 "
"d - 'Double_t' 0 - qcal2 d - 'Double_t' 0 - qped1 "
"d - 'Double_t' 0 - qped2 d - 'Double_t' 0 - ts_a1 "
"d - 'Double_t' 0 - ts_b1 d - 'Double_t' 0 - ts_a2 "
"d - 'Double_t' 0 - ts_b2 d - 'Double_t' 0 - ts_a3 "
"d - 'Double_t' 0 - tofoff d - 'Double_t' 0 - tofslewoff "
"d - 'Double_t' 0 - yposc d - 'Double_t' 0 - yposo "
"d - 'Double_t' 0 - xcen d - 'Double_t' 0 - ycen "
"d - 'Double_t' 0 - zcen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPalameters",1338,G__anawinds_dict_422_0_3, 121, -1, -1, 0, 21, 1, 1, 0, 
"i - 'Int_t' 0 - i u 'TString' - 0 - n "
"i - 'Int_t' 0 - f d - 'Double_t' 0 - tc1 "
"d - 'Double_t' 0 - tc2 d - 'Double_t' 0 - to1 "
"d - 'Double_t' 0 - to2 d - 'Double_t' 0 - qped1 "
"d - 'Double_t' 0 - qped2 d - 'Double_t' 0 - ts_a1 "
"d - 'Double_t' 0 - ts_b1 d - 'Double_t' 0 - ts_a2 "
"d - 'Double_t' 0 - ts_b2 d - 'Double_t' 0 - ts_a3 "
"d - 'Double_t' 0 - tofoff d - 'Double_t' 0 - tofslewoff "
"d - 'Double_t' 0 - yposc d - 'Double_t' 0 - yposo "
"d - 'Double_t' 0 - xcen d - 'Double_t' 0 - ycen "
"d - 'Double_t' 0 - zcen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap",586,G__anawinds_dict_422_0_4, 121, -1, -1, 0, 10, 1, 1, 0, 
"i - 'Int_t' 0 - dt i - 'Int_t' 0 - t1g "
"i - 'Int_t' 0 - t1c i - 'Int_t' 0 - t2g "
"i - 'Int_t' 0 - t2c i - 'Int_t' 0 - dq "
"i - 'Int_t' 0 - q1g i - 'Int_t' 0 - q1c "
"i - 'Int_t' 0 - q2g i - 'Int_t' 0 - q2c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__anawinds_dict_422_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorName",1499,G__anawinds_dict_422_0_6, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpl",578,G__anawinds_dict_422_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTCal1",693,G__anawinds_dict_422_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTCal2",694,G__anawinds_dict_422_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOff1",704,G__anawinds_dict_422_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOff2",705,G__anawinds_dict_422_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQCal1",690,G__anawinds_dict_422_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQCal2",691,G__anawinds_dict_422_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQPed1",699,G__anawinds_dict_422_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQPed2",700,G__anawinds_dict_422_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT1SlewA",897,G__anawinds_dict_422_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT1SlewB",898,G__anawinds_dict_422_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT2SlewA",898,G__anawinds_dict_422_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT2SlewB",899,G__anawinds_dict_422_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFSlewA",997,G__anawinds_dict_422_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYposCal",987,G__anawinds_dict_422_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYposOff",998,G__anawinds_dict_422_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXcenter",1017,G__anawinds_dict_422_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYcenter",1018,G__anawinds_dict_422_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZcenter",1019,G__anawinds_dict_422_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFOffset",1136,G__anawinds_dict_422_0_26, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFSlewOffset",1547,G__anawinds_dict_422_0_27, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT1Map",707,G__anawinds_dict_422_0_28, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT2Map",708,G__anawinds_dict_422_0_29, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQ1Map",704,G__anawinds_dict_422_0_30, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQ2Map",705,G__anawinds_dict_422_0_31, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TArtRIDFMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anawinds_dict_422_0_32, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtWINDSPlaPara::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anawinds_dict_422_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtWINDSPlaPara::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anawinds_dict_422_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtWINDSPlaPara::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anawinds_dict_422_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtWINDSPlaPara::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anawinds_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anawinds_dict_422_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anawinds_dict_422_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtWINDSPlaPara::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anawinds_dict_422_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtWINDSPlaPara::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anawinds_dict_422_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtWINDSPlaPara::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anawinds_dict_422_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtWINDSPlaPara::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtWINDSPlaPara", 1441, G__anawinds_dict_422_0_44, (int) ('i'), G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara), -1, 0, 1, 1, 1, 0, "u 'TArtWINDSPlaPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtWINDSPlaPara", 1567, G__anawinds_dict_422_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anawinds_dict_422_0_46, (int) ('u'), G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara), -1, 1, 1, 1, 1, 0, "u 'TArtWINDSPlaPara' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtWINDSParameters(void) {
   /* TArtWINDSParameters */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSParameters));
   G__memfunc_setup("TArtWINDSParameters",1812,G__anawinds_dict_459_0_1, 105, G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSParameters), -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"WINDSParameters\"' name C - - 10 '\"WINDSParameters\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__anawinds_dict_459_0_2, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSParameters), -1, 0, 2, 3, 1, 0, 
"C - - 10 '\"WINDSParameters\"' name C - - 10 '\"WINDSParameters\"' title", (char*)NULL, (void*) G__func2void( (TArtWINDSParameters* (*)(const char*, const char*))(&TArtWINDSParameters::Instance) ), 0);
   G__memfunc_setup("Delete",595,G__anawinds_dict_459_0_3, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtWINDSParameters::Delete) ), 0);
   G__memfunc_setup("LoadParameter",1313,G__anawinds_dict_459_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - xmlfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintListOfWINDSPlaPara",2180,G__anawinds_dict_459_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfWINDSPlaPara",1943,G__anawinds_dict_459_0_6, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindWINDSPlaPara",1447,G__anawinds_dict_459_0_7, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara), -1, 0, 1, 1, 1, 9, "U 'TArtRIDFMap' - 0 - rmap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseParaList",1307,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TXMLNode' - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseWINDSPlaPara",1569,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara), -1, 0, 1, 1, 4, 0, "U 'TXMLNode' - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anawinds_dict_459_0_10, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtWINDSParameters::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anawinds_dict_459_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtWINDSParameters::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anawinds_dict_459_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtWINDSParameters::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anawinds_dict_459_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtWINDSParameters::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anawinds_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anawinds_dict_459_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anawinds_dict_459_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtWINDSParameters::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anawinds_dict_459_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtWINDSParameters::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anawinds_dict_459_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtWINDSParameters::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anawinds_dict_459_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtWINDSParameters::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtWINDSParameters", 1812, G__anawinds_dict_459_0_22, (int) ('i'), G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSParameters), -1, 0, 1, 1, 1, 0, "u 'TArtWINDSParameters' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtWINDSParameters", 1938, G__anawinds_dict_459_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anawinds_dict_459_0_24, (int) ('u'), G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSParameters), -1, 1, 1, 1, 1, 0, "u 'TArtWINDSParameters' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTArtCalibWINDSPla(void) {
   /* TArtCalibWINDSPla */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__anawinds_dictLN_TArtCalibWINDSPla));
   G__memfunc_setup("TArtCalibWINDSPla",1528,G__anawinds_dict_461_0_1, 105, G__get_linked_tagnum(&G__anawinds_dictLN_TArtCalibWINDSPla), -1, 0, 1, 1, 1, 0, "u 'TString' - 10 '\"WINDSPla\"' outdataname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anawinds_dict_461_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__anawinds_dict_461_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArtRawSegmentObject' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearData",865,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReconstructData",1558,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWINDSPlaArray",1473,G__anawinds_dict_461_0_6, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumWINDSPla",1266,G__anawinds_dict_461_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWINDSPla",962,G__anawinds_dict_461_0_8, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWINDSPlaPara",1350,G__anawinds_dict_461_0_9, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPlaPara), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindWINDSPla",1059,G__anawinds_dict_461_0_10, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindWINDSPla",1059,G__anawinds_dict_461_0_11, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla), -1, 0, 1, 1, 1, 0, "U 'TString' - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindWINDSPla",1059,G__anawinds_dict_461_0_12, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TArtWINDSPla), -1, 0, 1, 1, 1, 0, "C - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__anawinds_dict_461_0_13, 85, G__get_linked_tagnum(&G__anawinds_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TArtCalibWINDSPla::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__anawinds_dict_461_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibWINDSPla::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__anawinds_dict_461_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TArtCalibWINDSPla::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__anawinds_dict_461_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TArtCalibWINDSPla::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__anawinds_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__anawinds_dict_461_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__anawinds_dict_461_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibWINDSPla::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__anawinds_dict_461_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibWINDSPla::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__anawinds_dict_461_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TArtCalibWINDSPla::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__anawinds_dict_461_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TArtCalibWINDSPla::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TArtCalibWINDSPla", 1528, G__anawinds_dict_461_0_25, (int) ('i'), G__get_linked_tagnum(&G__anawinds_dictLN_TArtCalibWINDSPla), -1, 0, 1, 1, 1, 0, "u 'TArtCalibWINDSPla' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TArtCalibWINDSPla", 1654, G__anawinds_dict_461_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__anawinds_dict_461_0_27, (int) ('u'), G__get_linked_tagnum(&G__anawinds_dictLN_TArtCalibWINDSPla), -1, 1, 1, 1, 1, 0, "u 'TArtCalibWINDSPla' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncanawinds_dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalanawinds_dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcanawinds_dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__anawinds_dictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TArtDataObject = { "TArtDataObject" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TArtWINDSPla = { "TArtWINDSPla" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TArtRIDFMap = { "TArtRIDFMap" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TArtWINDSPlaPara = { "TArtWINDSPlaPara" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__anawinds_dictLN_TArtReconstruction = { "TArtReconstruction" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TArtRawSegmentObject = { "TArtRawSegmentObject" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TArtWINDSParameters = { "TArtWINDSParameters" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TArtStoreManager = { "TArtStoreManager" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TArtCalibWINDSPla = { "TArtCalibWINDSPla" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_vectorlETArtWINDSPlaParamUcOallocatorlETArtWINDSPlaParamUgRsPgR = { "vector<TArtWINDSPlaPara*,allocator<TArtWINDSPlaPara*> >" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_reverse_iteratorlEvectorlETArtWINDSPlaParamUcOallocatorlETArtWINDSPlaParamUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TArtWINDSPlaPara*,allocator<TArtWINDSPlaPara*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_TXMLNode = { "TXMLNode" , 99 , -1 };
G__linked_taginfo G__anawinds_dictLN_maplETArtRIDFMapcOTArtWINDSPlaParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtWINDSPlaParamUgRsPgRsPgR = { "map<TArtRIDFMap,TArtWINDSPlaPara*,less<TArtRIDFMap>,allocator<pair<const TArtRIDFMap,TArtWINDSPlaPara*> > >" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableanawinds_dict() {
  G__anawinds_dictLN_TClass.tagnum = -1 ;
  G__anawinds_dictLN_TBuffer.tagnum = -1 ;
  G__anawinds_dictLN_TMemberInspector.tagnum = -1 ;
  G__anawinds_dictLN_TObject.tagnum = -1 ;
  G__anawinds_dictLN_TNamed.tagnum = -1 ;
  G__anawinds_dictLN_TString.tagnum = -1 ;
  G__anawinds_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__anawinds_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anawinds_dictLN_TList.tagnum = -1 ;
  G__anawinds_dictLN_TClonesArray.tagnum = -1 ;
  G__anawinds_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__anawinds_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anawinds_dictLN_TArtDataObject.tagnum = -1 ;
  G__anawinds_dictLN_TArtWINDSPla.tagnum = -1 ;
  G__anawinds_dictLN_TArtRIDFMap.tagnum = -1 ;
  G__anawinds_dictLN_TArtWINDSPlaPara.tagnum = -1 ;
  G__anawinds_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__anawinds_dictLN_TArtReconstruction.tagnum = -1 ;
  G__anawinds_dictLN_TArtRawSegmentObject.tagnum = -1 ;
  G__anawinds_dictLN_TArtWINDSParameters.tagnum = -1 ;
  G__anawinds_dictLN_TArtStoreManager.tagnum = -1 ;
  G__anawinds_dictLN_TArtCalibWINDSPla.tagnum = -1 ;
  G__anawinds_dictLN_vectorlETArtWINDSPlaParamUcOallocatorlETArtWINDSPlaParamUgRsPgR.tagnum = -1 ;
  G__anawinds_dictLN_reverse_iteratorlEvectorlETArtWINDSPlaParamUcOallocatorlETArtWINDSPlaParamUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__anawinds_dictLN_TXMLNode.tagnum = -1 ;
  G__anawinds_dictLN_maplETArtRIDFMapcOTArtWINDSPlaParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtWINDSPlaParamUgRsPgRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableanawinds_dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TClass);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TObject);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TString);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TList);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TArtDataObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TArtWINDSPla),sizeof(TArtWINDSPla),-1,292096,(char*)NULL,G__setup_memvarTArtWINDSPla,G__setup_memfuncTArtWINDSPla);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TArtRIDFMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TArtWINDSPlaPara),sizeof(TArtWINDSPlaPara),-1,324864,(char*)NULL,G__setup_memvarTArtWINDSPlaPara,G__setup_memfuncTArtWINDSPlaPara);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TArtReconstruction);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TArtRawSegmentObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TArtWINDSParameters),sizeof(TArtWINDSParameters),-1,324864,(char*)NULL,G__setup_memvarTArtWINDSParameters,G__setup_memfuncTArtWINDSParameters);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TArtStoreManager);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TArtCalibWINDSPla),sizeof(TArtCalibWINDSPla),-1,263424,(char*)NULL,G__setup_memvarTArtCalibWINDSPla,G__setup_memfuncTArtCalibWINDSPla);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_vectorlETArtWINDSPlaParamUcOallocatorlETArtWINDSPlaParamUgRsPgR);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_reverse_iteratorlEvectorlETArtWINDSPlaParamUcOallocatorlETArtWINDSPlaParamUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_TXMLNode);
   G__get_linked_tagnum_fwd(&G__anawinds_dictLN_maplETArtRIDFMapcOTArtWINDSPlaParamUcOlesslETArtRIDFMapgRcOallocatorlEpairlEconstsPTArtRIDFMapcOTArtWINDSPlaParamUgRsPgRsPgR);
}
extern "C" void G__cpp_setupanawinds_dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupanawinds_dict()");
  G__set_cpp_environmentanawinds_dict();
  G__cpp_setup_tagtableanawinds_dict();

  G__cpp_setup_inheritanceanawinds_dict();

  G__cpp_setup_typetableanawinds_dict();

  G__cpp_setup_memvaranawinds_dict();

  G__cpp_setup_memfuncanawinds_dict();
  G__cpp_setup_globalanawinds_dict();
  G__cpp_setup_funcanawinds_dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncanawinds_dict();
  return;
}
class G__cpp_setup_initanawinds_dict {
  public:
    G__cpp_setup_initanawinds_dict() { G__add_setup_func("anawinds_dict",(G__incsetup)(&G__cpp_setupanawinds_dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initanawinds_dict() { G__remove_setup_func("anawinds_dict"); }
};
G__cpp_setup_initanawinds_dict G__cpp_setup_initializeranawinds_dict;

